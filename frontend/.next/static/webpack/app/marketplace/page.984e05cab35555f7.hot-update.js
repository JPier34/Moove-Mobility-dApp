"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/marketplace/page",{

/***/ "(app-pages-browser)/./utils/vehicleGeoLocation.ts":
/*!*************************************!*\
  !*** ./utils/vehicleGeoLocation.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VehicleGeolocationSystem: function() { return /* binding */ VehicleGeolocationSystem; },\n/* harmony export */   formatDistance: function() { return /* binding */ formatDistance; },\n/* harmony export */   getBatteryColor: function() { return /* binding */ getBatteryColor; },\n/* harmony export */   getVehicleEmoji: function() { return /* binding */ getVehicleEmoji; }\n/* harmony export */ });\n/* harmony import */ var _config_cities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/config/cities */ \"(app-pages-browser)/./config/cities.ts\");\n\n// ============= CONSTANTS =============\nconst GEOLOCATION_OPTIONS = {\n    enableHighAccuracy: false,\n    timeout: 10000,\n    maximumAge: 300000\n};\nconst STORAGE_KEY = \"moove_city_location\";\nconst CACHE_DURATION = 30 * 60 * 1000; // 30 minutes\nclass VehicleGeolocationSystem {\n    static getInstance() {\n        if (!VehicleGeolocationSystem.instance) {\n            VehicleGeolocationSystem.instance = new VehicleGeolocationSystem();\n            VehicleGeolocationSystem.instance.initializeVehicleFleet();\n        }\n        return VehicleGeolocationSystem.instance;\n    }\n    // ============= PERSISTENT LOCATION MANAGEMENT =============\n    saveLocationToStorage(state) {\n        try {\n            if ( true && window.sessionStorage) {\n                sessionStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n            }\n        } catch (error) {\n            console.warn(\"Failed to save location:\", error);\n        }\n    }\n    loadLocationFromStorage() {\n        try {\n            if ( false || !window.sessionStorage) {\n                return null;\n            }\n            const stored = sessionStorage.getItem(STORAGE_KEY);\n            if (!stored) return null;\n            const data = JSON.parse(stored);\n            const now = Date.now();\n            // Check if cache is still valid\n            if (now - data.lastUpdated > CACHE_DURATION) {\n                sessionStorage.removeItem(STORAGE_KEY);\n                return null;\n            }\n            return data;\n        } catch (error) {\n            console.warn(\"Failed to load location:\", error);\n            return null;\n        }\n    }\n    // ============= MAIN LOCATION METHODS =============\n    /**\r\n   * Get current user location with caching\r\n   */ async getCurrentLocation() {\n        // Try cache first for LocationCoordinates compatibility\n        const cached = this.loadLocationFromStorage();\n        if (cached && cached.currentCity) {\n            console.log(\"Using cached location\");\n            return cached.currentCity.coordinates;\n        }\n        // Get fresh location\n        if (!navigator.geolocation) {\n            throw new Error(\"Geolocation is not supported by this browser\");\n        }\n        return new Promise((resolve, reject)=>{\n            navigator.geolocation.getCurrentPosition((position)=>{\n                const coordinates = {\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude\n                };\n                // Find and cache nearest city\n                const nearestCity = this.findNearestSupportedCity(coordinates);\n                this.saveLocationState(coordinates, nearestCity);\n                resolve(coordinates);\n            }, (error)=>{\n                let message;\n                switch(error.code){\n                    case error.PERMISSION_DENIED:\n                        message = \"Location access denied. Please enable location services.\";\n                        break;\n                    case error.POSITION_UNAVAILABLE:\n                        message = \"Location information unavailable.\";\n                        break;\n                    case error.TIMEOUT:\n                        message = \"Location request timed out.\";\n                        break;\n                    default:\n                        message = \"Unknown location error.\";\n                }\n                reject(new Error(message));\n            }, GEOLOCATION_OPTIONS);\n        });\n    }\n    /**\r\n   * Get current location state (new method for compatibility)\r\n   */ async getCurrentLocationState() {\n        // Try cache first\n        const cached = this.loadLocationFromStorage();\n        if (cached) {\n            console.log(\"Using cached location state\");\n            return cached;\n        }\n        // Get fresh location\n        try {\n            const coordinates = await this.getCurrentLocation();\n            const nearestCity = this.findNearestSupportedCity(coordinates);\n            return this.saveLocationState(coordinates, nearestCity);\n        } catch (error) {\n            return {\n                currentCity: null,\n                isLoading: false,\n                error: error.message,\n                canRent: false,\n                lastUpdated: Date.now(),\n                method: \"gps\"\n            };\n        }\n    }\n    saveLocationState(coordinates, nearestCity) {\n        const state = {\n            currentCity: nearestCity,\n            isLoading: false,\n            error: null,\n            canRent: !!nearestCity,\n            lastUpdated: Date.now(),\n            method: \"gps\"\n        };\n        this.saveLocationToStorage(state);\n        return state;\n    }\n    findNearestSupportedCity(coordinates) {\n        let nearestCity = null;\n        let minDistance = Infinity;\n        for (const city of _config_cities__WEBPACK_IMPORTED_MODULE_0__.EUROPEAN_CITIES){\n            const { bounds } = city;\n            // Check if inside city bounds first\n            if (coordinates.lat >= bounds.south && coordinates.lat <= bounds.north && coordinates.lng >= bounds.west && coordinates.lng <= bounds.east) {\n                return city; // Inside city, return immediately\n            }\n            // Calculate distance to city center\n            const distance = this.calculateDistance(coordinates.lat, coordinates.lng, city.coordinates.lat, city.coordinates.lng);\n            if (distance < minDistance) {\n                minDistance = distance;\n                nearestCity = city;\n            }\n        }\n        // Only return city if within reasonable distance (100km)\n        return minDistance <= 200 ? nearestCity : null;\n    }\n    /**\r\n   * Check if user is in a supported city\r\n   */ checkCitySupport(location) {\n        // Check if user is within any supported city bounds\n        for (const city of _config_cities__WEBPACK_IMPORTED_MODULE_0__.EUROPEAN_CITIES){\n            const { bounds } = city;\n            if (location.lat >= bounds.south && location.lat <= bounds.north && location.lng >= bounds.west && location.lng <= bounds.east) {\n                return {\n                    inCity: true,\n                    cityName: city.id,\n                    distance: 0\n                };\n            }\n        }\n        // User is not in a supported city, find nearest one\n        const distances = _config_cities__WEBPACK_IMPORTED_MODULE_0__.EUROPEAN_CITIES.map((city)=>({\n                city: city.id,\n                name: city.name,\n                distance: this.calculateDistance(location.lat, location.lng, city.coordinates.lat, city.coordinates.lng)\n            }));\n        const nearest = distances.reduce((min, curr)=>curr.distance < min.distance ? curr : min);\n        return {\n            inCity: false,\n            distance: nearest.distance,\n            nearestCity: nearest.name\n        };\n    }\n    // ============= DEVELOPMENT/TESTING METHODS =============\n    /**\r\n   * Set manual location for testing\r\n   */ async setTestLocation(cityId) {\n        const city = _config_cities__WEBPACK_IMPORTED_MODULE_0__.EUROPEAN_CITIES.find((c)=>c.id === cityId);\n        if (!city) {\n            throw new Error(\"City \".concat(cityId, \" not found\"));\n        }\n        const state = {\n            currentCity: city,\n            isLoading: false,\n            error: null,\n            canRent: true,\n            lastUpdated: Date.now(),\n            method: \"manual\"\n        };\n        this.saveLocationToStorage(state);\n        console.log(\"\\uD83E\\uDDEA Test location set: \".concat(city.name));\n        return state;\n    }\n    /**\r\n   * Clear location cache\r\n   */ clearLocationCache() {\n        try {\n            if ( true && window.sessionStorage) {\n                sessionStorage.removeItem(STORAGE_KEY);\n            }\n            console.log(\"Location cache cleared\");\n        } catch (error) {\n            console.warn(\"Failed to clear location:\", error);\n        }\n    }\n    /**\r\n   * Check location permission (for compatibility)\r\n   */ async checkLocationPermission() {\n        if (!navigator.permissions) {\n            return \"prompt\";\n        }\n        try {\n            const permission = await navigator.permissions.query({\n                name: \"geolocation\"\n            });\n            return permission.state;\n        } catch (error) {\n            console.warn(\"Could not check location permission:\", error);\n            return \"prompt\";\n        }\n    }\n    // ============= NEARBY VEHICLES METHODS (existing functionality) =============\n    /**\r\n   * Get nearby vehicles within specified radius\r\n   */ async getNearbyVehicles(location) {\n        let radiusKm = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2, vehicleType = arguments.length > 2 ? arguments[2] : void 0, onlyAvailable = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;\n        // Simulate API delay\n        await new Promise((resolve)=>setTimeout(resolve, 300));\n        const nearbyVehicles = [];\n        this.vehicleLocations.forEach((vehicle)=>{\n            // Filter by availability if requested\n            if (onlyAvailable && !vehicle.isAvailable) return;\n            // Filter by vehicle type if specified\n            if (vehicleType && vehicle.vehicleType !== vehicleType) return;\n            const distance = this.calculateDistance(location.lat, location.lng, vehicle.coordinates.lat, vehicle.coordinates.lng);\n            if (distance <= radiusKm) {\n                nearbyVehicles.push({\n                    vehicleId: vehicle.vehicleId,\n                    vehicleType: vehicle.vehicleType,\n                    location: {\n                        lat: vehicle.coordinates.lat,\n                        lng: vehicle.coordinates.lng\n                    },\n                    distance,\n                    batteryLevel: vehicle.batteryLevel,\n                    estimatedRange: vehicle.estimatedRange,\n                    isAvailable: vehicle.isAvailable,\n                    lastUpdate: vehicle.lastUpdate,\n                    cityId: vehicle.cityId\n                });\n            }\n        });\n        // Sort by distance\n        return nearbyVehicles.sort((a, b)=>a.distance - b.distance);\n    }\n    // Get vehicles near user location\n    getVehiclesNearLocation(userLat, userLng) {\n        let radiusKm = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2, vehicleType = arguments.length > 3 ? arguments[3] : void 0;\n        const nearbyVehicles = [];\n        this.vehicleLocations.forEach((vehicle)=>{\n            if (!vehicle.isAvailable) return;\n            if (vehicleType && vehicle.vehicleType !== vehicleType) return;\n            const distance = this.calculateDistance(userLat, userLng, vehicle.coordinates.lat, vehicle.coordinates.lng);\n            if (distance <= radiusKm) {\n                nearbyVehicles.push({\n                    ...vehicle,\n                    distance\n                });\n            }\n        });\n        return nearbyVehicles.sort((a, b)=>a.distance - b.distance);\n    }\n    // Get vehicles in specific city\n    getVehiclesInCity(cityId, vehicleType) {\n        const cityVehicles = [];\n        this.vehicleLocations.forEach((vehicle)=>{\n            if (vehicle.cityId !== cityId) return;\n            if (!vehicle.isAvailable) return;\n            if (vehicleType && vehicle.vehicleType !== vehicleType) return;\n            cityVehicles.push(vehicle);\n        });\n        return cityVehicles;\n    }\n    // ============= UTILITY METHODS =============\n    calculateDistance(lat1, lng1, lat2, lng2) {\n        const R = 6371; // Earth's radius in kilometers\n        const dLat = this.toRadians(lat2 - lat1);\n        const dLng = this.toRadians(lng2 - lng1);\n        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        return R * c;\n    }\n    toRadians(degrees) {\n        return degrees * (Math.PI / 180);\n    }\n    // ============= VEHICLE FLEET METHODS (existing) =============\n    initializeVehicleFleet() {\n        _config_cities__WEBPACK_IMPORTED_MODULE_0__.EUROPEAN_CITIES.forEach((city)=>{\n            Object.entries(city.vehicleLimit).forEach((param)=>{\n                let [vehicleType, limit] = param;\n                if (limit > 0 && city.allowedVehicles.includes(vehicleType)) {\n                    for(let i = 0; i < limit; i++){\n                        const vehicleId = this.generateVehicleId(city.id, vehicleType, i);\n                        const location = this.generateRandomLocationInCity(city);\n                        this.vehicleLocations.set(vehicleId, {\n                            vehicleId,\n                            vehicleType: vehicleType,\n                            cityId: city.id,\n                            coordinates: location,\n                            batteryLevel: Math.floor(Math.random() * 40) + 60,\n                            isAvailable: Math.random() > 0.15,\n                            lastUpdate: new Date(),\n                            estimatedRange: this.calculateRange(vehicleType)\n                        });\n                    }\n                }\n            });\n        });\n    }\n    generateVehicleId(cityId, vehicleType, index) {\n        const typeCode = {\n            bike: \"BK\",\n            scooter: \"SC\",\n            monopattino: \"MP\"\n        }[vehicleType];\n        const cityCode = cityId.substring(0, 3).toUpperCase();\n        return \"MOOVE-\".concat(cityCode, \"-\").concat(typeCode, \"-\").concat((index + 1).toString().padStart(3, \"0\"));\n    }\n    generateRandomLocationInCity(city) {\n        const latRange = city.bounds.north - city.bounds.south;\n        const lngRange = city.bounds.east - city.bounds.west;\n        return {\n            lat: city.bounds.south + Math.random() * latRange,\n            lng: city.bounds.west + Math.random() * lngRange\n        };\n    }\n    calculateRange(vehicleType) {\n        const ranges = {\n            bike: [\n                25,\n                50\n            ],\n            scooter: [\n                30,\n                60\n            ],\n            monopattino: [\n                15,\n                35\n            ]\n        };\n        const [min, max] = ranges[vehicleType];\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    // Vehicle management methods (existing)\n    reserveVehicle(vehicleId) {\n        const vehicle = this.vehicleLocations.get(vehicleId);\n        if (vehicle && vehicle.isAvailable) {\n            vehicle.isAvailable = false;\n            vehicle.lastUpdate = new Date();\n            return true;\n        }\n        return false;\n    }\n    releaseVehicle(vehicleId, newLocation) {\n        const vehicle = this.vehicleLocations.get(vehicleId);\n        if (vehicle) {\n            vehicle.isAvailable = true;\n            vehicle.lastUpdate = new Date();\n            if (newLocation) {\n                vehicle.coordinates = newLocation;\n            }\n            vehicle.batteryLevel = Math.max(0, vehicle.batteryLevel - Math.floor(Math.random() * 20));\n        }\n    }\n    getVehicle(vehicleId) {\n        return this.vehicleLocations.get(vehicleId);\n    }\n    getAllVehicles() {\n        return Array.from(this.vehicleLocations.values());\n    }\n    updateVehicleLocation(vehicleId, newLocation) {\n        const vehicle = this.vehicleLocations.get(vehicleId);\n        if (vehicle) {\n            vehicle.coordinates = newLocation;\n            vehicle.lastUpdate = new Date();\n        }\n    }\n    constructor(){\n        this.vehicleLocations = new Map();\n        if (!this.vehicleLocations.size) {\n            this.initializeVehicleFleet();\n        }\n    }\n}\n// ============= HELPER FUNCTIONS (existing) =============\nfunction formatDistance(distanceKm) {\n    if (distanceKm < 0.1) {\n        return \"Very close\";\n    } else if (distanceKm < 1) {\n        return \"\".concat(Math.round(distanceKm * 1000), \"m\");\n    } else {\n        return \"\".concat(distanceKm.toFixed(1), \"km\");\n    }\n}\nfunction getBatteryColor(level) {\n    if (level > 70) return \"text-green-600\";\n    if (level > 30) return \"text-yellow-600\";\n    return \"text-red-600\";\n}\nfunction getVehicleEmoji(type) {\n    switch(type){\n        case \"bike\":\n            return \"\\uD83D\\uDEB2\";\n        case \"scooter\":\n            return \"\\uD83D\\uDEF4\";\n        case \"monopattino\":\n            return \"\\uD83D\\uDEF5\";\n        default:\n            return \"\\uD83D\\uDEB2\";\n    }\n}\n// Export default for compatibility\n/* harmony default export */ __webpack_exports__[\"default\"] = (VehicleGeolocationSystem);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/vehicleGeoLocation.ts\n"));

/***/ })

});