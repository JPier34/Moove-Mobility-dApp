{
  "address": "0x40E455515bf712144C1A5D859F19d64b537754f7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_accessControl",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "ERC2981InvalidDefaultRoyalty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC2981InvalidDefaultRoyaltyReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "ERC2981InvalidTokenRoyalty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC2981InvalidTokenRoyaltyReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "allowColorChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowTextChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowSizeChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowEffectsChange",
              "type": "bool"
            },
            {
              "internalType": "string[]",
              "name": "availableColors",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "maxTextLength",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct MooveNFT.CustomizationOptions",
          "name": "newOptions",
          "type": "tuple"
        }
      ],
      "name": "CustomizationOptionsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "RoyaltyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "customizer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "changeDescription",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newState",
          "type": "string"
        }
      ],
      "name": "StickerCustomized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum MooveNFT.StickerCategory",
          "name": "category",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum MooveNFT.StickerRarity",
          "name": "rarity",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLimitedEdition",
          "type": "bool"
        }
      ],
      "name": "StickerMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accessControl",
      "outputs": [
        {
          "internalType": "contract MooveAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "editionName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "editionDescription",
          "type": "string"
        },
        {
          "internalType": "enum MooveNFT.StickerCategory",
          "name": "category",
          "type": "uint8"
        },
        {
          "internalType": "enum MooveNFT.StickerRarity",
          "name": "rarity",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "allowColorChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowTextChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowSizeChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowEffectsChange",
              "type": "bool"
            },
            {
              "internalType": "string[]",
              "name": "availableColors",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "maxTextLength",
              "type": "uint256"
            }
          ],
          "internalType": "struct MooveNFT.CustomizationOptions",
          "name": "customizationOptions",
          "type": "tuple"
        },
        {
          "internalType": "string[]",
          "name": "tokenURIs",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "royaltyPercentage",
          "type": "uint96"
        }
      ],
      "name": "batchMintLimitedEdition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creatorStickers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "customizationHistory",
      "outputs": [
        {
          "internalType": "address",
          "name": "customizer",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "changeDescription",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "previousState",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newState",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "changeDescription",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newState",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newTokenURI",
          "type": "string"
        }
      ],
      "name": "customizeSticker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getCreatorStickers",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCustomizationHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "customizer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "string",
              "name": "changeDescription",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "previousState",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "newState",
              "type": "string"
            }
          ],
          "internalType": "struct MooveNFT.CustomizationHistory[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSticker",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "enum MooveNFT.StickerCategory",
              "name": "category",
              "type": "uint8"
            },
            {
              "internalType": "enum MooveNFT.StickerRarity",
              "name": "rarity",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "creationDate",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "isLimitedEdition",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "editionSize",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "editionNumber",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "allowColorChange",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "allowTextChange",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "allowSizeChange",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "allowEffectsChange",
                  "type": "bool"
                },
                {
                  "internalType": "string[]",
                  "name": "availableColors",
                  "type": "string[]"
                },
                {
                  "internalType": "uint256",
                  "name": "maxTextLength",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MooveNFT.CustomizationOptions",
              "name": "customization",
              "type": "tuple"
            }
          ],
          "internalType": "struct MooveNFT.StickerNFT",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isCustomizable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isStickerCustomizable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "mintNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "stickerName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "enum MooveNFT.StickerCategory",
          "name": "category",
          "type": "uint8"
        },
        {
          "internalType": "enum MooveNFT.StickerRarity",
          "name": "rarity",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isLimitedEdition",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "allowColorChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowTextChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowSizeChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowEffectsChange",
              "type": "bool"
            },
            {
              "internalType": "string[]",
              "name": "availableColors",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "maxTextLength",
              "type": "uint256"
            }
          ],
          "internalType": "struct MooveNFT.CustomizationOptions",
          "name": "customizationOptions",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "editionName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "royaltyPercentage",
          "type": "uint96"
        }
      ],
      "name": "mintStickerNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stickers",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "enum MooveNFT.StickerCategory",
          "name": "category",
          "type": "uint8"
        },
        {
          "internalType": "enum MooveNFT.StickerRarity",
          "name": "rarity",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "creationDate",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isLimitedEdition",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "editionSize",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "editionNumber",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "allowColorChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowTextChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowSizeChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowEffectsChange",
              "type": "bool"
            },
            {
              "internalType": "string[]",
              "name": "availableColors",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "maxTextLength",
              "type": "uint256"
            }
          ],
          "internalType": "struct MooveNFT.CustomizationOptions",
          "name": "customization",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "allowColorChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowTextChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowSizeChange",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowEffectsChange",
              "type": "bool"
            },
            {
              "internalType": "string[]",
              "name": "availableColors",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "maxTextLength",
              "type": "uint256"
            }
          ],
          "internalType": "struct MooveNFT.CustomizationOptions",
          "name": "newOptions",
          "type": "tuple"
        }
      ],
      "name": "updateCustomizationOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "updateTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfa72879897d9c05e997bb0045e97aaa7c64b3e09a90bd80e810e560d678d86df",
  "receipt": {
    "to": null,
    "from": "0x777382955f33Bb8540602E914D9b650C962EF6Cc",
    "contractAddress": "0x40E455515bf712144C1A5D859F19d64b537754f7",
    "transactionIndex": 6,
    "gasUsed": "3827557",
    "logsBloom": "0x
    "blockHash": "0x6b8a94fcaabbac97c5325cc88cf6d8276ba197f47a36dce9b4b9a5ec62e6e7b6",
    "transactionHash": "0xfa72879897d9c05e997bb0045e97aaa7c64b3e09a90bd80e810e560d678d86df",
    "logs": [],
    "blockNumber": 8924688,
    "cumulativeGasUsed": "3953557",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Moove Stickers",
    "MOOVE",
    "0x005672EcC14b09A958742B960Ebb76eBE52Be44A"
  ],
  "numDeployments": 1,
  "solcInputHash": "cf9183c5756e95f1fc92655ea94dc824",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_accessControl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"ERC2981InvalidDefaultRoyalty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC2981InvalidDefaultRoyaltyReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"ERC2981InvalidTokenRoyalty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC2981InvalidTokenRoyaltyReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowColorChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTextChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowSizeChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowEffectsChange\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"availableColors\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"maxTextLength\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MooveNFT.CustomizationOptions\",\"name\":\"newOptions\",\"type\":\"tuple\"}],\"name\":\"CustomizationOptionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"RoyaltyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"changeDescription\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newState\",\"type\":\"string\"}],\"name\":\"StickerCustomized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum MooveNFT.StickerCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum MooveNFT.StickerRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLimitedEdition\",\"type\":\"bool\"}],\"name\":\"StickerMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessControl\",\"outputs\":[{\"internalType\":\"contract MooveAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"editionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"editionDescription\",\"type\":\"string\"},{\"internalType\":\"enum MooveNFT.StickerCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"enum MooveNFT.StickerRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowColorChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTextChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowSizeChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowEffectsChange\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"availableColors\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"maxTextLength\",\"type\":\"uint256\"}],\"internalType\":\"struct MooveNFT.CustomizationOptions\",\"name\":\"customizationOptions\",\"type\":\"tuple\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyPercentage\",\"type\":\"uint96\"}],\"name\":\"batchMintLimitedEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorStickers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customizationHistory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"customizer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"changeDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"previousState\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newState\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"changeDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newState\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newTokenURI\",\"type\":\"string\"}],\"name\":\"customizeSticker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getCreatorStickers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCustomizationHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"customizer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"changeDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"previousState\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newState\",\"type\":\"string\"}],\"internalType\":\"struct MooveNFT.CustomizationHistory[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSticker\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum MooveNFT.StickerCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"enum MooveNFT.StickerRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"creationDate\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isLimitedEdition\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"editionSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"editionNumber\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowColorChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTextChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowSizeChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowEffectsChange\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"availableColors\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"maxTextLength\",\"type\":\"uint256\"}],\"internalType\":\"struct MooveNFT.CustomizationOptions\",\"name\":\"customization\",\"type\":\"tuple\"}],\"internalType\":\"struct MooveNFT.StickerNFT\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isCustomizable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isStickerCustomizable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"mintNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"stickerName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"enum MooveNFT.StickerCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"enum MooveNFT.StickerRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isLimitedEdition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowColorChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTextChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowSizeChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowEffectsChange\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"availableColors\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"maxTextLength\",\"type\":\"uint256\"}],\"internalType\":\"struct MooveNFT.CustomizationOptions\",\"name\":\"customizationOptions\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"editionName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyPercentage\",\"type\":\"uint96\"}],\"name\":\"mintStickerNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stickers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum MooveNFT.StickerCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"enum MooveNFT.StickerRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"creationDate\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isLimitedEdition\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"editionSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"editionNumber\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowColorChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTextChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowSizeChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowEffectsChange\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"availableColors\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"maxTextLength\",\"type\":\"uint256\"}],\"internalType\":\"struct MooveNFT.CustomizationOptions\",\"name\":\"customization\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowColorChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTextChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowSizeChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowEffectsChange\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"availableColors\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"maxTextLength\",\"type\":\"uint256\"}],\"internalType\":\"struct MooveNFT.CustomizationOptions\",\"name\":\"newOptions\",\"type\":\"tuple\"}],\"name\":\"updateCustomizationOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"updateTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"NFT contract for customizable stickers - OPTIMIZED for size reduction\",\"errors\":{\"ERC2981InvalidDefaultRoyalty(uint256,uint256)\":[{\"details\":\"The default royalty set is invalid (eg. (numerator / denominator) >= 1).\"}],\"ERC2981InvalidDefaultRoyaltyReceiver(address)\":[{\"details\":\"The default royalty receiver is invalid.\"}],\"ERC2981InvalidTokenRoyalty(uint256,uint256,uint256)\":[{\"details\":\"The royalty set for a specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\"}],\"ERC2981InvalidTokenRoyaltyReceiver(uint256,address)\":[{\"details\":\"The royalty receiver for `tokenId` is invalid.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"batchMintLimitedEdition(address[],string,string,uint8,uint8,uint256,(bool,bool,bool,bool,string[],uint256),string[],address,uint96)\":{\"details\":\"Batch mint stickers for limited editions - OPTIMIZED\"},\"burn(uint256)\":{\"details\":\"Burn token - OPTIMIZED\"},\"customizeSticker(uint256,string,string,string)\":{\"details\":\"Customize a sticker - OPTIMIZED\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getCreatorStickers(address)\":{\"details\":\"Get creator stickers - OPTIMIZED\"},\"getCustomizationHistory(uint256)\":{\"details\":\"Get customization history - OPTIMIZED\"},\"getSticker(uint256)\":{\"details\":\"Get sticker details - OPTIMIZED\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isStickerCustomizable(uint256)\":{\"details\":\"Check if sticker is customizable - OPTIMIZED\"},\"mintNFT(address,string)\":{\"details\":\"Mint a basic NFT - OPTIMIZED: simplified\"},\"mintStickerNFT(address,string,string,uint8,uint8,bool,uint256,(bool,bool,bool,bool,string[],uint256),string,address,uint96)\":{\"details\":\"Mint a new sticker NFT - OPTIMIZED for size\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"Pause contract - OPTIMIZED\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Get royalty info - OPTIMIZED: simplified\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"Required override for ERC721Royalty\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"Required override for ERC721URIStorage\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"unpause()\":{\"details\":\"Unpause contract - OPTIMIZED\"},\"updateCustomizationOptions(uint256,(bool,bool,bool,bool,string[],uint256))\":{\"details\":\"Update customization options - OPTIMIZED\"},\"updateTokenRoyalty(uint256,address,uint96)\":{\"details\":\"Update token royalty - OPTIMIZED\"}},\"stateVariables\":{\"DEFAULT_ROYALTY\":{\"details\":\"Default royalty percentage (500 = 5%) - OPTIMIZED: removed separate variable\"},\"_tokenIdCounter\":{\"details\":\"Counter for token IDs\"},\"accessControl\":{\"details\":\"Reference to access control contract\"},\"creatorStickers\":{\"details\":\"Mapping from creator to their created stickers\"},\"customizationHistory\":{\"details\":\"Mapping from token ID to customization history\"},\"isCustomizable\":{\"details\":\"Mapping to track if sticker is customizable\"},\"stickers\":{\"details\":\"Mapping from token ID to sticker details\"}},\"title\":\"MooveNFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"These NFTs represent customizable stickers created by admins for auction system\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MooveNFT.sol\":\"MooveNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     *\\n     * NOTE: ERC-2981 allows setting the royalty to 100% of the price. In that case all the price would be sent to the\\n     * royalty receiver and 0 tokens to the seller. Contracts dealing with royalty should consider empty transfers.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3b017a19c1730050d0fdff8dfa9255741634699aa4217442724746ca49e13292\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title ERC-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x1b8691e244f6e11d987459993671db0af33e6a29f7805eac6a9925cc6b601957\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"./utils/ERC721Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0x39ed367e54765186281efcfe83e47cf0ad62cc879f10e191360712507125f29a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {ERC2981} from \\\"../../common/ERC2981.sol\\\";\\n\\n/**\\n * @dev Extension of ERC-721 with the ERC-2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {ERC2981-_setDefaultRoyalty}, and/or individually\\n * for specific token ids via {ERC2981-_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the ERC. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n */\\nabstract contract ERC721Royalty is ERC2981, ERC721 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x6931eb56297ef01d684f2b24b36f67949a8754ee753789d71b425be2dec8cf8b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC-721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {IERC4906-MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x2b27b58570ff2456c7e65022a356c7e4f205bfabf95d0e870855a86587bb1356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721Receiver-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xddab643169f47a2c5291afafcbfdca045d9e6835553307d090bc048b6dabd0ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC2981} from \\\"../../interfaces/IERC2981.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the ERC. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 tokenId => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev The default royalty set is invalid (eg. (numerator / denominator) >= 1).\\n     */\\n    error ERC2981InvalidDefaultRoyalty(uint256 numerator, uint256 denominator);\\n\\n    /**\\n     * @dev The default royalty receiver is invalid.\\n     */\\n    error ERC2981InvalidDefaultRoyaltyReceiver(address receiver);\\n\\n    /**\\n     * @dev The royalty set for a specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\\n     */\\n    error ERC2981InvalidTokenRoyalty(uint256 tokenId, uint256 numerator, uint256 denominator);\\n\\n    /**\\n     * @dev The royalty receiver for `tokenId` is invalid.\\n     */\\n    error ERC2981InvalidTokenRoyaltyReceiver(uint256 tokenId, address receiver);\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) public view virtual returns (address receiver, uint256 amount) {\\n        RoyaltyInfo storage _royaltyInfo = _tokenRoyaltyInfo[tokenId];\\n        address royaltyReceiver = _royaltyInfo.receiver;\\n        uint96 royaltyFraction = _royaltyInfo.royaltyFraction;\\n\\n        if (royaltyReceiver == address(0)) {\\n            royaltyReceiver = _defaultRoyaltyInfo.receiver;\\n            royaltyFraction = _defaultRoyaltyInfo.royaltyFraction;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royaltyFraction) / _feeDenominator();\\n\\n        return (royaltyReceiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        uint256 denominator = _feeDenominator();\\n        if (feeNumerator > denominator) {\\n            // Royalty fee will exceed the sale price\\n            revert ERC2981InvalidDefaultRoyalty(feeNumerator, denominator);\\n        }\\n        if (receiver == address(0)) {\\n            revert ERC2981InvalidDefaultRoyaltyReceiver(address(0));\\n        }\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        uint256 denominator = _feeDenominator();\\n        if (feeNumerator > denominator) {\\n            // Royalty fee will exceed the sale price\\n            revert ERC2981InvalidTokenRoyalty(tokenId, feeNumerator, denominator);\\n        }\\n        if (receiver == address(0)) {\\n            revert ERC2981InvalidTokenRoyaltyReceiver(tokenId, address(0));\\n        }\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xbc10927da9f47d87e6cd46a3218526b7718716a717d07722791eb7de6befc2a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\\n        (1 << 0x08) | // backspace\\n            (1 << 0x09) | // tab\\n            (1 << 0x0a) | // newline\\n            (1 << 0x0c) | // form feed\\n            (1 << 0x0d) | // carriage return\\n            (1 << 0x22) | // double quote\\n            (1 << 0x5c); // backslash\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress-string} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\\n     *\\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\\n     *\\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\\n     * characters that are not in this range, but other tooling may provide different results.\\n     */\\n    function escapeJSON(string memory input) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(input);\\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\\n        uint256 outputLength = 0;\\n\\n        for (uint256 i; i < buffer.length; ++i) {\\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\\n                output[outputLength++] = \\\"\\\\\\\\\\\";\\n                if (char == 0x08) output[outputLength++] = \\\"b\\\";\\n                else if (char == 0x09) output[outputLength++] = \\\"t\\\";\\n                else if (char == 0x0a) output[outputLength++] = \\\"n\\\";\\n                else if (char == 0x0c) output[outputLength++] = \\\"f\\\";\\n                else if (char == 0x0d) output[outputLength++] = \\\"r\\\";\\n                else if (char == 0x5c) output[outputLength++] = \\\"\\\\\\\\\\\";\\n                else if (char == 0x22) {\\n                    // solhint-disable-next-line quotes\\n                    output[outputLength++] = '\\\"';\\n                }\\n            } else {\\n                output[outputLength++] = char;\\n            }\\n        }\\n        // write the actual length and deallocate unused memory\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(output, outputLength)\\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\\n        }\\n\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81c274a60a7ae232ae3dc9ff3a4011b4849a853c13b0832cd3351bb1bb2f0dae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/MooveAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MooveAccessControl\\r\\n * @dev Centralized access control system for the Moove ecosystem\\r\\n * @notice Manages roles, permissions, and security features across all Moove contracts\\r\\n */\\r\\ncontract MooveAccessControl is AccessControl, Pausable, ReentrancyGuard {\\r\\n    // ============= ROLE DEFINITIONS =============\\r\\n\\r\\n    /// @dev Master admin role - can grant/revoke all other roles\\r\\n    bytes32 public constant MASTER_ADMIN_ROLE = keccak256(\\\"MASTER_ADMIN_ROLE\\\");\\r\\n\\r\\n    /// @dev NFT minting permissions\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n\\r\\n    /// @dev Auction and marketplace management\\r\\n    bytes32 public constant AUCTION_MANAGER_ROLE =\\r\\n        keccak256(\\\"AUCTION_MANAGER_ROLE\\\");\\r\\n\\r\\n    /// @dev Vehicle customization management\\r\\n    bytes32 public constant CUSTOMIZATION_ADMIN_ROLE =\\r\\n        keccak256(\\\"CUSTOMIZATION_ADMIN_ROLE\\\");\\r\\n\\r\\n    /// @dev Price and fee management\\r\\n    bytes32 public constant PRICE_MANAGER_ROLE =\\r\\n        keccak256(\\\"PRICE_MANAGER_ROLE\\\");\\r\\n\\r\\n    /// @dev Emergency pause permissions\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\r\\n\\r\\n    /// @dev Fund withdrawal permissions\\r\\n    bytes32 public constant WITHDRAWER_ROLE = keccak256(\\\"WITHDRAWER_ROLE\\\");\\r\\n\\r\\n    /// @dev Contract upgrade permissions\\r\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\r\\n\\r\\n    /// @dev Metadata management permissions\\r\\n    bytes32 public constant METADATA_MANAGER_ROLE =\\r\\n        keccak256(\\\"METADATA_MANAGER_ROLE\\\");\\r\\n\\r\\n    bytes32 public constant TRADER_ROLE = keccak256(\\\"TRADER_ROLE\\\");\\r\\n    bytes32 public constant MARKETPLACE_MANAGER_ROLE =\\r\\n        keccak256(\\\"MARKETPLACE_MANAGER_ROLE\\\");\\r\\n\\r\\n    // ============= STATE VARIABLES =============\\r\\n\\r\\n    /// @dev Mapping to track authorized contract addresses\\r\\n    mapping(address => bool) public authorizedContracts;\\r\\n\\r\\n    /// @dev Mapping to track emergency contacts\\r\\n    mapping(address => bool) public emergencyContacts;\\r\\n\\r\\n    /// @dev Time lock duration for critical operations (in seconds)\\r\\n    uint256 public timeLockDuration = 24 hours;\\r\\n\\r\\n    /// @dev Mapping to track time-locked operations\\r\\n    mapping(bytes32 => uint256) public timelockExecutions;\\r\\n\\r\\n    /// @dev Mapping to track role members for enumeration (if needed)\\r\\n    mapping(bytes32 => address[]) private _roleMembers;\\r\\n    mapping(bytes32 => mapping(address => uint256)) private _roleMemberIndex;\\r\\n\\r\\n    /// @dev Global pause state that affects all contracts\\r\\n    bool public globalPause = false;\\r\\n\\r\\n    /// @dev Maximum number of admins allowed\\r\\n    uint256 public constant MAX_ADMINS = 10;\\r\\n\\r\\n    /// @dev Current number of master admins\\r\\n    uint256 public masterAdminCount = 0;\\r\\n\\r\\n    // ============= EVENTS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a contract is authorized or deauthorized\\r\\n     */\\r\\n    event ContractAuthorizationChanged(\\r\\n        address indexed contractAddress,\\r\\n        bool authorized\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when an emergency contact is added or removed\\r\\n     */\\r\\n    event EmergencyContactChanged(address indexed contact, bool added);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when timelock duration is updated\\r\\n     */\\r\\n    event TimeLockDurationUpdated(uint256 oldDuration, uint256 newDuration);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a time-locked operation is scheduled\\r\\n     */\\r\\n    event TimeLockOperationScheduled(\\r\\n        bytes32 indexed operationId,\\r\\n        uint256 executeAfter\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a time-locked operation is executed\\r\\n     */\\r\\n    event TimeLockOperationExecuted(bytes32 indexed operationId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when global pause state changes\\r\\n     */\\r\\n    event GlobalPauseStateChanged(bool paused);\\r\\n\\r\\n    // ============= MODIFIERS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if caller is an authorized contract\\r\\n     */\\r\\n    modifier onlyAuthorizedContract() {\\r\\n        require(authorizedContracts[msg.sender], \\\"Not authorized contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if caller is emergency contact\\r\\n     */\\r\\n    modifier onlyEmergencyContact() {\\r\\n        require(\\r\\n            emergencyContacts[msg.sender] ||\\r\\n                hasRole(MASTER_ADMIN_ROLE, msg.sender),\\r\\n            \\\"Not emergency contact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to ensure global pause is not active\\r\\n     */\\r\\n    modifier whenNotGloballyPaused() {\\r\\n        require(!globalPause, \\\"Globally paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier for time-locked operations\\r\\n     */\\r\\n    modifier onlyAfterTimelock(bytes32 operationId) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] != 0 &&\\r\\n                block.timestamp >= timelockExecutions[operationId],\\r\\n            \\\"Operation not ready or not scheduled\\\"\\r\\n        );\\r\\n        _;\\r\\n        delete timelockExecutions[operationId];\\r\\n    }\\r\\n\\r\\n    // ============= CONSTRUCTOR =============\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor sets up initial roles and admin\\r\\n     * @param initialAdmin Address to be granted master admin role\\r\\n     */\\r\\n    constructor(address initialAdmin) {\\r\\n        require(initialAdmin != address(0), \\\"Invalid admin address\\\");\\r\\n\\r\\n        // Grant master admin role to initial admin\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialAdmin);\\r\\n        _grantRole(MASTER_ADMIN_ROLE, initialAdmin);\\r\\n\\r\\n        // Set master admin as role admin for all roles\\r\\n        _setRoleAdmin(MINTER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(AUCTION_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(CUSTOMIZATION_ADMIN_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(PRICE_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(PAUSER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(WITHDRAWER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(UPGRADER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(METADATA_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(TRADER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(MARKETPLACE_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n\\r\\n        // Add initial admin as emergency contact\\r\\n        emergencyContacts[initialAdmin] = true;\\r\\n        masterAdminCount = 1;\\r\\n\\r\\n        emit EmergencyContactChanged(initialAdmin, true);\\r\\n    }\\r\\n\\r\\n    // ============= ROLE MANAGEMENT =============\\r\\n\\r\\n    /**\\r\\n     * @dev Grant master admin role with safety checks\\r\\n     * @param account Address to grant master admin role\\r\\n     */\\r\\n    function grantMasterAdmin(\\r\\n        address account\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(account != address(0), \\\"Invalid address\\\");\\r\\n        require(masterAdminCount < MAX_ADMINS, \\\"Too many admins\\\");\\r\\n        require(!hasRole(MASTER_ADMIN_ROLE, account), \\\"Already master admin\\\");\\r\\n\\r\\n        _grantRole(MASTER_ADMIN_ROLE, account);\\r\\n        emergencyContacts[account] = true;\\r\\n        masterAdminCount++;\\r\\n\\r\\n        emit EmergencyContactChanged(account, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revoke master admin role with safety checks\\r\\n     * @param account Address to revoke master admin role from\\r\\n     */\\r\\n    function revokeMasterAdmin(\\r\\n        address account\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(account != msg.sender, \\\"Cannot revoke own admin\\\");\\r\\n        require(masterAdminCount > 1, \\\"Cannot remove last admin\\\");\\r\\n        require(hasRole(MASTER_ADMIN_ROLE, account), \\\"Not master admin\\\");\\r\\n\\r\\n        _revokeRole(MASTER_ADMIN_ROLE, account);\\r\\n        emergencyContacts[account] = false;\\r\\n        masterAdminCount--;\\r\\n\\r\\n        emit EmergencyContactChanged(account, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch grant roles to multiple addresses\\r\\n     * @param role The role to grant\\r\\n     * @param accounts Array of addresses to grant the role to\\r\\n     */\\r\\n    function batchGrantRole(\\r\\n        bytes32 role,\\r\\n        address[] calldata accounts\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            if (!hasRole(role, accounts[i])) {\\r\\n                _grantRole(role, accounts[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch revoke roles from multiple addresses\\r\\n     * @param role The role to revoke\\r\\n     * @param accounts Array of addresses to revoke the role from\\r\\n     */\\r\\n    function batchRevokeRole(\\r\\n        bytes32 role,\\r\\n        address[] calldata accounts\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            if (hasRole(role, accounts[i])) {\\r\\n                _revokeRole(role, accounts[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============= CONTRACT AUTHORIZATION =============\\r\\n\\r\\n    /**\\r\\n     * @dev Authorize a contract to interact with the system\\r\\n     * @param contractAddress Address of the contract to authorize\\r\\n     */\\r\\n    function authorizeContract(\\r\\n        address contractAddress\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(contractAddress != address(0), \\\"Invalid contract address\\\");\\r\\n        require(contractAddress.code.length > 0, \\\"Not a contract\\\");\\r\\n\\r\\n        authorizedContracts[contractAddress] = true;\\r\\n        emit ContractAuthorizationChanged(contractAddress, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deauthorize a contract\\r\\n     * @param contractAddress Address of the contract to deauthorize\\r\\n     */\\r\\n    function deauthorizeContract(\\r\\n        address contractAddress\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        authorizedContracts[contractAddress] = false;\\r\\n        emit ContractAuthorizationChanged(contractAddress, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch authorize multiple contracts\\r\\n     * @param contractAddresses Array of contract addresses to authorize\\r\\n     */\\r\\n    function batchAuthorizeContracts(\\r\\n        address[] calldata contractAddresses\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < contractAddresses.length; i++) {\\r\\n            if (\\r\\n                contractAddresses[i] != address(0) &&\\r\\n                contractAddresses[i].code.length > 0\\r\\n            ) {\\r\\n                authorizedContracts[contractAddresses[i]] = true;\\r\\n                emit ContractAuthorizationChanged(contractAddresses[i], true);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if user is able to trade\\r\\n     * @param account Account check\\r\\n     */\\r\\n\\r\\n    function canTrade(\\r\\n        address account\\r\\n    ) external view returns (bool hasTraderRole) {\\r\\n        return\\r\\n            hasRole(TRADER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if user is able to use Marketplace\\r\\n     * @param account Account check\\r\\n     */\\r\\n\\r\\n    function canManageMarketplace(\\r\\n        address account\\r\\n    ) external view returns (bool hasMarketplaceRole) {\\r\\n        return\\r\\n            hasRole(MARKETPLACE_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    // ============= EMERGENCY MANAGEMENT =============\\r\\n\\r\\n    /**\\r\\n     * @dev Add emergency contact\\r\\n     * @param contact Address to add as emergency contact\\r\\n     */\\r\\n    function addEmergencyContact(\\r\\n        address contact\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(contact != address(0), \\\"Invalid contact address\\\");\\r\\n\\r\\n        emergencyContacts[contact] = true;\\r\\n        emit EmergencyContactChanged(contact, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove emergency contact\\r\\n     * @param contact Address to remove as emergency contact\\r\\n     */\\r\\n    function removeEmergencyContact(\\r\\n        address contact\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        emergencyContacts[contact] = false;\\r\\n        emit EmergencyContactChanged(contact, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency pause - can be called by emergency contacts\\r\\n     */\\r\\n    function emergencyPause() external onlyEmergencyContact {\\r\\n        globalPause = true;\\r\\n        _pause();\\r\\n        emit GlobalPauseStateChanged(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency unpause - requires master admin\\r\\n     */\\r\\n    function emergencyUnpause() external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        globalPause = false;\\r\\n        _unpause();\\r\\n        emit GlobalPauseStateChanged(false);\\r\\n    }\\r\\n\\r\\n    // ============= TIME LOCK OPERATIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Schedule a time-locked operation\\r\\n     * @param operationId Unique identifier for the operation\\r\\n     */\\r\\n    function scheduleTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] == 0,\\r\\n            \\\"Operation already scheduled\\\"\\r\\n        );\\r\\n\\r\\n        uint256 executeAfter = block.timestamp + timeLockDuration;\\r\\n        timelockExecutions[operationId] = executeAfter;\\r\\n\\r\\n        emit TimeLockOperationScheduled(operationId, executeAfter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Cancel a time-locked operation\\r\\n     * @param operationId Unique identifier for the operation\\r\\n     */\\r\\n    function cancelTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] != 0,\\r\\n            \\\"Operation not scheduled\\\"\\r\\n        );\\r\\n\\r\\n        delete timelockExecutions[operationId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update timelock duration\\r\\n     * @param newDuration New duration in seconds\\r\\n     */\\r\\n    function updateTimeLockDuration(\\r\\n        uint256 newDuration\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            newDuration >= 1 hours && newDuration <= 7 days,\\r\\n            \\\"Invalid duration\\\"\\r\\n        );\\r\\n\\r\\n        uint256 oldDuration = timeLockDuration;\\r\\n        timeLockDuration = newDuration;\\r\\n\\r\\n        emit TimeLockDurationUpdated(oldDuration, newDuration);\\r\\n    }\\r\\n\\r\\n    // ============= QUERY FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address has minting permissions\\r\\n     * @param account Address to check\\r\\n     * @return hasMinterRole True if address can mint\\r\\n     */\\r\\n    function canMint(\\r\\n        address account\\r\\n    ) external view returns (bool hasMinterRole) {\\r\\n        return\\r\\n            hasRole(MINTER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage auctions\\r\\n     * @param account Address to check\\r\\n     * @return hasAuctionRole True if address can manage auctions\\r\\n     */\\r\\n    function canManageAuctions(\\r\\n        address account\\r\\n    ) external view returns (bool hasAuctionRole) {\\r\\n        return\\r\\n            hasRole(AUCTION_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage customizations\\r\\n     * @param account Address to check\\r\\n     * @return hasCustomizationRole True if address can manage customizations\\r\\n     */\\r\\n    function canManageCustomizations(\\r\\n        address account\\r\\n    ) external view returns (bool hasCustomizationRole) {\\r\\n        return\\r\\n            hasRole(CUSTOMIZATION_ADMIN_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage prices\\r\\n     * @param account Address to check\\r\\n     * @return hasPriceRole True if address can manage prices\\r\\n     */\\r\\n    function canManagePrices(\\r\\n        address account\\r\\n    ) external view returns (bool hasPriceRole) {\\r\\n        return\\r\\n            hasRole(PRICE_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can pause contracts\\r\\n     * @param account Address to check\\r\\n     * @return hasPauserRole True if address can pause\\r\\n     */\\r\\n    function canPause(\\r\\n        address account\\r\\n    ) external view returns (bool hasPauserRole) {\\r\\n        return\\r\\n            hasRole(PAUSER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account) ||\\r\\n            emergencyContacts[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can withdraw funds\\r\\n     * @param account Address to check\\r\\n     * @return hasWithdrawRole True if address can withdraw\\r\\n     */\\r\\n    function canWithdraw(\\r\\n        address account\\r\\n    ) external view returns (bool hasWithdrawRole) {\\r\\n        return\\r\\n            hasRole(WITHDRAWER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get all role members for a specific role\\r\\n     * @param role The role to query\\r\\n     * @return members Array of addresses with the role\\r\\n     */\\r\\n    function getRoleMembers(\\r\\n        bytes32 role\\r\\n    ) external view returns (address[] memory members) {\\r\\n        return _roleMembers[role];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get number of members for a specific role\\r\\n     * @param role The role to query\\r\\n     * @return count Number of addresses with the role\\r\\n     */\\r\\n    function getRoleMemberCount(\\r\\n        bytes32 role\\r\\n    ) external view returns (uint256 count) {\\r\\n        return _roleMembers[role].length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Execute time-locked operation validation\\r\\n     * @param operationId The operation ID to validate\\r\\n     */\\r\\n    function executeTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) onlyAfterTimelock(operationId) {\\r\\n        emit TimeLockOperationExecuted(operationId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if the system is in global pause state\\r\\n     * @return isPaused True if globally paused\\r\\n     */\\r\\n    function isGloballyPaused() external view returns (bool isPaused) {\\r\\n        return globalPause;\\r\\n    }\\r\\n\\r\\n    // ============= EXTERNAL VALIDATION FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Validate that caller has required role (called by other contracts)\\r\\n     * @param role The role to check\\r\\n     * @param account The account to validate\\r\\n     */\\r\\n    function validateRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) external view onlyAuthorizedContract {\\r\\n        require(\\r\\n            hasRole(role, account) || hasRole(MASTER_ADMIN_ROLE, account),\\r\\n            \\\"Access denied\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validate that system is not paused (called by other contracts)\\r\\n     */\\r\\n    function validateNotPaused() external view onlyAuthorizedContract {\\r\\n        require(!globalPause && !paused(), \\\"System paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override _grantRole to track role members\\r\\n     */\\r\\n    function _grantRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) internal override returns (bool) {\\r\\n        super._grantRole(role, account);\\r\\n\\r\\n        // Track role member for enumeration\\r\\n        if (_roleMemberIndex[role][account] == 0) {\\r\\n            _roleMembers[role].push(account);\\r\\n            _roleMemberIndex[role][account] = _roleMembers[role].length;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override _revokeRole to untrack role members\\r\\n     */\\r\\n    function _revokeRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) internal override returns (bool) {\\r\\n        super._revokeRole(role, account);\\r\\n\\r\\n        // Remove from role member tracking\\r\\n        uint256 index = _roleMemberIndex[role][account];\\r\\n        if (index > 0) {\\r\\n            uint256 lastIndex = _roleMembers[role].length;\\r\\n            address lastMember = _roleMembers[role][lastIndex - 1];\\r\\n\\r\\n            // Move last member to the position of the removed member\\r\\n            _roleMembers[role][index - 1] = lastMember;\\r\\n            _roleMemberIndex[role][lastMember] = index;\\r\\n\\r\\n            // Remove last element\\r\\n            _roleMembers[role].pop();\\r\\n            delete _roleMemberIndex[role][account];\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0fa63b562a209458f5838960171dc2a40198e14208332f6a742a7f399f4e7769\",\"license\":\"MIT\"},\"contracts/MooveNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./MooveAccessControl.sol\\\";\\n\\n/**\\n * @title MooveNFT\\n * @dev NFT contract for customizable stickers - OPTIMIZED for size reduction\\n * @notice These NFTs represent customizable stickers created by admins for auction system\\n */\\ncontract MooveNFT is\\n    ERC721,\\n    ERC721URIStorage,\\n    ERC721Royalty,\\n    ReentrancyGuard,\\n    Pausable\\n{\\n    // ============= STATE VARIABLES =============\\n\\n    /// @dev Reference to access control contract\\n    MooveAccessControl public immutable accessControl;\\n\\n    /// @dev Counter for token IDs\\n    uint256 private _tokenIdCounter;\\n\\n    /// @dev Mapping from token ID to sticker details\\n    mapping(uint256 => StickerNFT) public stickers;\\n\\n    /// @dev Mapping from token ID to customization history\\n    mapping(uint256 => CustomizationHistory[]) public customizationHistory;\\n\\n    /// @dev Mapping to track if sticker is customizable\\n    mapping(uint256 => bool) public isCustomizable;\\n\\n    /// @dev Mapping from creator to their created stickers\\n    mapping(address => uint256[]) public creatorStickers;\\n\\n    /// @dev Default royalty percentage (500 = 5%) - OPTIMIZED: removed separate variable\\n    uint256 private constant DEFAULT_ROYALTY = 500;\\n\\n    // ============= STRUCTS =============\\n\\n    struct StickerNFT {\\n        string name;\\n        string description;\\n        StickerCategory category;\\n        StickerRarity rarity;\\n        address creator;\\n        uint32 creationDate; // Packed: reduced from uint256\\n        bool isLimitedEdition;\\n        uint32 editionSize; // Packed: reduced from uint256\\n        uint32 editionNumber; // Packed: reduced from uint256\\n        CustomizationOptions customization;\\n    }\\n\\n    struct CustomizationOptions {\\n        bool allowColorChange;\\n        bool allowTextChange;\\n        bool allowSizeChange;\\n        bool allowEffectsChange;\\n        string[] availableColors;\\n        uint256 maxTextLength;\\n    }\\n\\n    struct CustomizationHistory {\\n        address customizer;\\n        uint32 timestamp; // Packed: reduced from uint256\\n        string changeDescription;\\n        string previousState;\\n        string newState;\\n    }\\n\\n    enum StickerCategory {\\n        VEHICLE_DECORATION,\\n        BRAND_LOGO,\\n        ARTISTIC,\\n        COMMEMORATIVE,\\n        SPECIAL_EVENT,\\n        COMMUNITY_BADGE\\n    }\\n\\n    enum StickerRarity {\\n        COMMON,\\n        UNCOMMON,\\n        RARE,\\n        EPIC,\\n        LEGENDARY,\\n        MYTHIC\\n    }\\n\\n    // ============= EVENTS =============\\n\\n    event StickerMinted(\\n        uint256 indexed tokenId,\\n        address indexed creator,\\n        address indexed owner,\\n        string name,\\n        StickerCategory category,\\n        StickerRarity rarity,\\n        bool isLimitedEdition\\n    );\\n\\n    event StickerCustomized(\\n        uint256 indexed tokenId,\\n        address indexed customizer,\\n        string changeDescription,\\n        string newState\\n    );\\n\\n    event CustomizationOptionsUpdated(\\n        uint256 indexed tokenId,\\n        CustomizationOptions newOptions\\n    );\\n\\n    event RoyaltyUpdated(\\n        uint256 indexed tokenId,\\n        address indexed recipient,\\n        uint96 feeNumerator\\n    );\\n\\n    event NFTMinted(\\n        uint256 indexed tokenId,\\n        address indexed creator,\\n        address indexed owner\\n    );\\n\\n    // ============= MODIFIERS =============\\n\\n    modifier onlyAccessControlRole(bytes32 role) {\\n        require(accessControl.hasRole(role, msg.sender), \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    modifier onlyValidToken(uint256 tokenId) {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check if token exists\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    modifier onlyOwnerOrApproved(uint256 tokenId) {\\n        require(\\n            ownerOf(tokenId) == msg.sender ||\\n                getApproved(tokenId) == msg.sender ||\\n                isApprovedForAll(ownerOf(tokenId), msg.sender),\\n            \\\"Not owner or approved\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCustomizable(uint256 tokenId) {\\n        require(isCustomizable[tokenId], \\\"Sticker not customizable\\\");\\n        _;\\n    }\\n\\n    // ============= CONSTRUCTOR =============\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        address _accessControl\\n    ) ERC721(tokenName, tokenSymbol) {\\n        require(_accessControl != address(0), \\\"Invalid access control address\\\");\\n        accessControl = MooveAccessControl(_accessControl);\\n\\n        // Set default royalty to contract creator initially\\n        _setDefaultRoyalty(msg.sender, uint96(DEFAULT_ROYALTY));\\n    }\\n\\n    // ============= MINTING FUNCTIONS =============\\n\\n    /**\\n     * @dev Mint a new sticker NFT - OPTIMIZED for size\\n     */\\n    function mintStickerNFT(\\n        address to,\\n        string calldata stickerName,\\n        string calldata metadataURI,\\n        StickerCategory category,\\n        StickerRarity rarity,\\n        bool isLimitedEdition,\\n        uint256 editionSize,\\n        CustomizationOptions calldata customizationOptions,\\n        string calldata editionName,\\n        address royaltyRecipient,\\n        uint96 royaltyPercentage\\n    ) external onlyAccessControlRole(keccak256(\\\"CUSTOMIZATION_ADMIN_ROLE\\\")) {\\n        _mintStickerInternal(\\n            to,\\n            stickerName,\\n            metadataURI,\\n            category,\\n            rarity,\\n            isLimitedEdition,\\n            editionSize,\\n            customizationOptions,\\n            editionName,\\n            royaltyRecipient,\\n            royaltyPercentage\\n        );\\n    }\\n\\n    /**\\n     * @dev Mint a basic NFT - OPTIMIZED: simplified\\n     */\\n    function mintNFT(\\n        address to,\\n        string calldata metadataURI // OPTIMIZED: changed to calldata\\n    ) external onlyAccessControlRole(keccak256(\\\"MINTER_ROLE\\\")) returns (uint256 tokenId) {\\n        tokenId = _tokenIdCounter++;\\n        _safeMint(to, tokenId);\\n        _setTokenURI(tokenId, metadataURI);\\n        emit NFTMinted(tokenId, msg.sender, to);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev Batch mint stickers for limited editions - OPTIMIZED\\n     */\\n    function batchMintLimitedEdition(\\n        address[] calldata recipients,\\n        string calldata editionName,\\n        string calldata editionDescription,\\n        StickerCategory category,\\n        StickerRarity rarity,\\n        uint256 editionSize,\\n        CustomizationOptions calldata customizationOptions,\\n        string[] calldata tokenURIs,\\n        address royaltyRecipient,\\n        uint96 royaltyPercentage\\n    )\\n        external\\n        onlyAccessControlRole(keccak256(\\\"CUSTOMIZATION_ADMIN_ROLE\\\"))\\n        nonReentrant\\n    {\\n        require(recipients.length == tokenURIs.length, \\\"Array length mismatch\\\");\\n        require(recipients.length <= editionSize, \\\"Exceeds edition size\\\");\\n\\n        uint256 length = recipients.length;\\n        for (uint256 i = 0; i < length;) {\\n            _mintStickerInternal(\\n                recipients[i],\\n                editionName,\\n                editionDescription,\\n                category,\\n                rarity,\\n                true,\\n                editionSize,\\n                customizationOptions,\\n                tokenURIs[i],\\n                royaltyRecipient,\\n                royaltyPercentage\\n            );\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal mint function - OPTIMIZED for size reduction\\n     */\\n    function _mintStickerInternal(\\n        address to,\\n        string calldata stickerName,\\n        string calldata stickerDescription,\\n        StickerCategory category,\\n        StickerRarity rarity,\\n        bool isLimitedEdition,\\n        uint256 editionSize,\\n        CustomizationOptions calldata customizationOptions,\\n        string calldata _tokenURI,\\n        address royaltyRecipient,\\n        uint96 royaltyPercentage\\n    ) internal {\\n        require(to != address(0), \\\"Invalid recipient address\\\");\\n        require(bytes(stickerName).length > 0, \\\"Name required\\\");\\n        require(bytes(_tokenURI).length > 0, \\\"Token URI required\\\");\\n\\n        uint256 tokenId = _tokenIdCounter++;\\n\\n        // OPTIMIZED: Batch storage operations\\n        stickers[tokenId] = StickerNFT({\\n            name: stickerName,\\n            description: stickerDescription,\\n            category: category,\\n            rarity: rarity,\\n            creator: msg.sender,\\n            creationDate: uint32(block.timestamp),\\n            isLimitedEdition: isLimitedEdition,\\n            editionSize: uint32(editionSize),\\n            editionNumber: uint32(isLimitedEdition ? _getNextEditionNumber(msg.sender, stickerName, editionSize) : 0),\\n            customization: customizationOptions\\n        });\\n\\n        // OPTIMIZED: Batch boolean and array operations\\n        isCustomizable[tokenId] = _hasCustomizationOptions(customizationOptions);\\n        creatorStickers[msg.sender].push(tokenId);\\n\\n        // OPTIMIZED: Conditional royalty setting\\n        if (royaltyRecipient != address(0) && royaltyPercentage > 0) {\\n            _setTokenRoyalty(tokenId, royaltyRecipient, royaltyPercentage);\\n        }\\n\\n        // OPTIMIZED: Batch mint operations\\n        _safeMint(to, tokenId);\\n        _setTokenURI(tokenId, _tokenURI);\\n\\n        emit StickerMinted(tokenId, msg.sender, to, stickerName, category, rarity, isLimitedEdition);\\n    }\\n\\n    // ============= CUSTOMIZATION FUNCTIONS =============\\n\\n    /**\\n     * @dev Customize a sticker - OPTIMIZED\\n     */\\n    function customizeSticker(\\n        uint256 tokenId,\\n        string calldata changeDescription,\\n        string calldata newState,\\n        string calldata newTokenURI\\n    ) external onlyValidToken(tokenId) onlyOwnerOrApproved(tokenId) onlyCustomizable(tokenId) nonReentrant {\\n        // OPTIMIZED: Batch storage operations\\n        customizationHistory[tokenId].push(CustomizationHistory({\\n            customizer: msg.sender,\\n            timestamp: uint32(block.timestamp),\\n            changeDescription: changeDescription,\\n            previousState: \\\"\\\",\\n            newState: newState\\n        }));\\n\\n        _setTokenURI(tokenId, newTokenURI);\\n\\n        emit StickerCustomized(tokenId, msg.sender, changeDescription, newState);\\n    }\\n\\n    /**\\n     * @dev Update customization options - OPTIMIZED\\n     */\\n    function updateCustomizationOptions(\\n        uint256 tokenId,\\n        CustomizationOptions calldata newOptions\\n    ) external onlyValidToken(tokenId) onlyAccessControlRole(keccak256(\\\"CUSTOMIZATION_ADMIN_ROLE\\\")) {\\n        stickers[tokenId].customization = newOptions;\\n        isCustomizable[tokenId] = _hasCustomizationOptions(newOptions);\\n        emit CustomizationOptionsUpdated(tokenId, newOptions);\\n    }\\n\\n    // ============= ROYALTY FUNCTIONS =============\\n\\n    /**\\n     * @dev Update token royalty - OPTIMIZED\\n     */\\n    function updateTokenRoyalty(\\n        uint256 tokenId,\\n        address recipient,\\n        uint96 feeNumerator\\n    ) external onlyValidToken(tokenId) {\\n        require(\\n            msg.sender == stickers[tokenId].creator || accessControl.hasRole(keccak256(\\\"CUSTOMIZATION_ADMIN_ROLE\\\"), msg.sender),\\n            \\\"Not creator or admin\\\"\\n        );\\n        _setTokenRoyalty(tokenId, recipient, feeNumerator);\\n        emit RoyaltyUpdated(tokenId, recipient, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Get royalty info - OPTIMIZED: simplified\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view override returns (address, uint256) {\\n        (address recipient, uint256 royaltyAmount) = super.royaltyInfo(tokenId, salePrice);\\n        \\n        // OPTIMIZED: Use default royalty if no specific royalty set\\n        if (recipient == address(0)) {\\n            return (msg.sender, (salePrice * DEFAULT_ROYALTY) / 10000);\\n        }\\n        \\n        return (recipient, royaltyAmount);\\n    }\\n\\n    // ============= ADMIN FUNCTIONS =============\\n\\n    /**\\n     * @dev Pause contract - OPTIMIZED\\n     */\\n    function pause() external onlyAccessControlRole(keccak256(\\\"PAUSER_ROLE\\\")) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause contract - OPTIMIZED\\n     */\\n    function unpause() external onlyAccessControlRole(keccak256(\\\"PAUSER_ROLE\\\")) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Burn token - OPTIMIZED\\n     */\\n    function burn(uint256 tokenId) external onlyValidToken(tokenId) onlyOwnerOrApproved(tokenId) {\\n        _burn(tokenId);\\n    }\\n\\n    // ============= QUERY FUNCTIONS =============\\n\\n    /**\\n     * @dev Get sticker details - OPTIMIZED\\n     */\\n    function getSticker(uint256 tokenId) external view onlyValidToken(tokenId) returns (StickerNFT memory) {\\n        return stickers[tokenId];\\n    }\\n\\n    /**\\n     * @dev Get customization history - OPTIMIZED\\n     */\\n    function getCustomizationHistory(uint256 tokenId) external view onlyValidToken(tokenId) returns (CustomizationHistory[] memory) {\\n        return customizationHistory[tokenId];\\n    }\\n\\n    /**\\n     * @dev Get creator stickers - OPTIMIZED\\n     */\\n    function getCreatorStickers(address creator) external view returns (uint256[] memory) {\\n        return creatorStickers[creator];\\n    }\\n\\n    /**\\n     * @dev Check if sticker is customizable - OPTIMIZED\\n     */\\n    function isStickerCustomizable(uint256 tokenId) external view onlyValidToken(tokenId) returns (bool) {\\n        return isCustomizable[tokenId];\\n    }\\n\\n    // ============= INTERNAL FUNCTIONS =============\\n\\n    /**\\n     * @dev Check if customization options exist - OPTIMIZED\\n     */\\n    function _hasCustomizationOptions(CustomizationOptions memory options) internal pure returns (bool) {\\n        return options.allowColorChange || options.allowTextChange || options.allowSizeChange || options.allowEffectsChange;\\n    }\\n\\n    /**\\n     * @dev Get next edition number - OPTIMIZED\\n     */\\n    function _getNextEditionNumber(address creator, string memory stickerName, uint256 editionSize) internal view returns (uint256) {\\n        uint256 count = 0;\\n        uint256[] storage creatorTokens = creatorStickers[creator];\\n        \\n        for (uint256 i = 0; i < creatorTokens.length;) {\\n            StickerNFT storage sticker = stickers[creatorTokens[i]];\\n            if (sticker.isLimitedEdition && \\n                keccak256(bytes(sticker.name)) == keccak256(bytes(stickerName)) &&\\n                sticker.editionSize == editionSize) {\\n                count++;\\n            }\\n            unchecked { i++; }\\n        }\\n        \\n        return count + 1;\\n    }\\n\\n    // ============= OVERRIDE FUNCTIONS =============\\n\\n    /**\\n     * @dev Required override for ERC721URIStorage\\n     */\\n    function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Required override for ERC721Royalty\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721URIStorage, ERC721Royalty) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xcbed27a84a0c08a77598c6dc09c040d8a0d89f16309b8c0aac82d48bbe8d369b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x604060a0815234620003fb57620046eb803803806200001e8162000400565b9283398101606082820312620003fb5781516001600160401b039290838111620003fb57826200005091830162000426565b60209283830151858111620003fb5786916200006e91850162000426565b9201516001600160a01b0381169290839003620003fb57815190858211620001c557600254916001938484811c94168015620003f0575b8785101462000302578190601f9485811162000399575b5087908583116001146200032f5760009262000323575b5050600019600383901b1c191690841b176002555b805190868211620001c5576003928354918583811c9316801562000318575b8884101462000302578282859411620002aa575b5087918311600114620002435760009262000237575b505060001982841b1c191690831b1790555b6009558015620001f3576080523315620001db57825180840192831181841017620001c5576101f49284523381520152607d60a21b331760005551614252908162000499823960805181818161047a0152818161062901528181610dbe0152818161222a015281816122d10152818161255101528181612e340152612f580152f35b634e487b7160e01b600052604160045260246000fd5b8251635b6cc80560e11b815260006004820152602490fd5b835162461bcd60e51b815260048101839052601e60248201527f496e76616c69642061636365737320636f6e74726f6c206164647265737300006044820152606490fd5b01519050388062000131565b90859350601f1983169185600052886000209260005b8a8282106200029357505084116200027a575b505050811b01905562000143565b015160001983861b60f8161c191690553880806200026c565b838501518655899790950194938401930162000259565b9091925084600052876000208380860160051c8201928a8710620002f8575b91869589929594930160051c01915b828110620002e85750506200011b565b60008155869550889101620002d8565b92508192620002c9565b634e487b7160e01b600052602260045260246000fd5b92607f169262000107565b015190503880620000d3565b90869350601f198316916002600052896000209260005b8b82821062000382575050841162000368575b505050811b01600255620000e8565b015160001960f88460031b161c1916905538808062000359565b8385015186558a9790950194938401930162000346565b9091506002600052876000208580850160051c8201928a8610620003e6575b918891869594930160051c01915b828110620003d6575050620000bc565b60008155859450889101620003c6565b92508192620003b8565b93607f1693620000a5565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620001c557604052565b919080601f84011215620003fb5782516001600160401b038111620001c5576020906200045c601f8201601f1916830162000400565b92818452828287010111620003fb5760005b8181106200048457508260009394955001015290565b85810183015184820184015282016200046e56fe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146131395750806306fdde031461308c578063081812fc1461306e578063095ea7b314612f8757806313007d5514612f4257806323b872dd14612f2b5780632a55205a14612ef75780633db93fa014612ec65780633f4ba83a14612de257806342842e0e14612db457806342966c6814612c795780635c975abb14612c565780636352211e14612c26578063676c6d1d1461243557806370a08231146123dc57806373394de5146123845780638456cb591461227f57806386e228d5146121025780638f965d8014611ff457806390a7733514611a5757806391a048ce14611a0457806395d89b4114611922578063a22cb46514611874578063b513ed83146116bd578063b547ba3e14610c9d578063b88d4fde14610c30578063c87b56dd14610bcd578063cb4ecf6614610aff578063d9e5539314610a4b578063e70dbc6a146105a5578063e985e9c51461054f578063eacabe14146103f55763feb6ce691461018a57600080fd5b346103f05760203660031901126103f0576004356040516101aa816133cb565b6060815260606020820152600060408201526000606082015260006080820152600060a0820152600060c0820152600060e08201526000610100820152610120604051916101f7836133e7565b6000835260006020840152600060408401526000606084015260606080840152600060a0840152015261024761024282600052600460205260018060a01b0360406000205416151590565b614077565b600052600c6020526103ec604060002061031e600460405192610269846133cb565b6040516102818161027a818561331b565b038261341d565b84526040516102978161027a816001860161331b565b602085015263ffffffff60028201546102b260ff821661350a565b60ff8116604087015260ff8160081c166102cb8161350a565b6060870152601081901c6001600160a01b0316608087015260b081901c821660a087015260d081901c60ff16151560c087015260d81c1660e0850152600381015463ffffffff1661010085015201613455565b6101208201526040519182916020835261012061036261034c835161014060208801526101608701906131d8565b6020840151868203601f190160408801526131d8565b9160408101516103718161350a565b606086015260608101516103848161350a565b608086015260018060a01b0360808201511660a086015263ffffffff60a08201511660c086015260c0810151151560e086015263ffffffff60e08201511661010086015263ffffffff61010082015116828601520151601f198483030161014085015261352a565b0390f35b600080fd5b346103f05760403660031901126103f05761040e613218565b6024356001600160401b0381116103f05761042d90369060040161328f565b604051632474521560e21b81527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660048201523360248201529192916001600160a01b03906020816044817f000000000000000000000000000000000000000000000000000000000000000086165afa8015610543576020956104bf6104e0926104e694600091610516575b506139b4565b600b54946104cc866139f0565b600b556104d986886139ff565b3691613611565b83613c84565b604051921633827f331d023184405eeb32d693804ea42e04df180882b4d7345e4e5f5e8cbaf4c5b3600080a48152f35b6105369150893d811161053c575b61052e818361341d565b81019061399c565b896104b9565b503d610524565b6040513d6000823e3d90fd5b346103f05760403660031901126103f057610568613218565b61057061322e565b9060018060a01b03809116600052600760205260406000209116600052602052602060ff604060002054166040519015158152f35b346103f0576003196040368201126103f0576001600160401b03602435116103f05760c06024353603918201126103f0576105fa610242600435600052600460205260018060a01b0360406000205416151590565b604051632474521560e21b81526000805160206141fd83398151915260048201523360248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa80156105435761066a91600091610a2c57506139b4565b600435600052600c60205260406000209061071c600483016106a56106936024356004016140fe565b829060ff801983541691151516179055565b6106cb6106b560248035016140fe565b825461ff00191690151560081b61ff0016178255565b6106f46106dc6044602435016140fe565b825462ff0000191690151560101b62ff000016178255565b6107026064602435016140fe565b815463ff000000191690151560181b63ff00000016179055565b602219016024356084013512156103f0576024356084810135016001600160401b036004820135116103f057600481013560051b360360248201136103f05761076c600482013560058401613f0e565b6024810190600583016000526020600020916000905b600483013582106109245784600660a460243501359101556107d56107b46107af36602435600401613e08565b6141b8565b600435600052600e60205260406000209060ff801983541691151516179055565b6040516020815260e081016107ee6024356004016132bc565b1515602083015261080260248035016132bc565b151560408301526108176044602435016132bc565b1515606083015261082c6064602435016132bc565b15156080830152602435608460243501350191600483013560248401926001600160401b0382116103f0578160051b9081360385136103f05760c060a0850152829052610100808401959184010193919060009036819003604219015b8383106108c75760243560a4013560c08701526004357f27c61ecf1d8d5a93292a2d647ec3c86de6fb24b436daf18279cbb5c907bba3fe87890388a2005b909192939560ff198682030188528635828112156103f057830190604460248301359201916001600160401b0381116103f05780360383136103f0576109136020928392600195613f9e565b980198019301919096939296610889565b6109318160248501613db3565b906001600160401b038211610a16576109548261094e88546132e1565b88613c3d565b600090601f83116001146109a7579261098d8360019594602094879660009261099c575b50508160011b916000199060031b1c19161790565b87555b01940191019092610782565b013590508b80610978565b8660005260206000209160005b601f19851681106109fe57509260209260019592869583601f198116106109e4575b505050831b83018755610990565b0135600019600384901b60f8161c191690558980806109d6565b909260206001819286860135815501940191016109b4565b634e487b7160e01b600052604160045260246000fd5b610a45915060203d60201161053c5761052e818361341d565b836104b9565b346103f0576020806003193601126103f0576001600160a01b03610a6d613218565b16600052600f8152604060002060405190818382549182815201908192600052846000209060005b86828210610aeb578686610aab8288038361341d565b604051928392818401908285525180915260408401929160005b828110610ad457505050500390f35b835185528695509381019392810192600101610ac5565b835485529093019260019283019201610a95565b346103f057610b0d36613279565b90600052600d602052604060002080548210156103f05763ffffffff91610b3391613648565b506103ec6003610bbf835493610bb1604051610b568161027a816001870161331b565b610b8560405193610b7585610b6e816002850161331b565b038661341d565b610b6e604051809881930161331b565b604080516001600160a01b038916815260a098891c90991660208a0152880187905287968701906131d8565b9085820360608701526131d8565b9083820360808501526131d8565b346103f05760203660031901126103f057600435610bea8161382b565b5060005260086020526103ec61027a610c0d60406000206040519283809261331b565b6000604051610c1b81613402565b526040519182916020835260208301906131d8565b346103f05760803660031901126103f057610c49613218565b610c5161322e565b90604435606435926001600160401b0384116103f057366023850112156103f057610c89610c9b943690602481600401359101613611565b92610c95838383613689565b3361384e565b005b346103f057600319610140368201126103f0576004356001600160401b0381116103f057610ccf9036906004016135c6565b906024356001600160401b0381116103f057610cef90369060040161328f565b9190936044356001600160401b0381116103f057610d1190369060040161328f565b91600660643510156103f057600660843510156103f05760c435906001600160401b0382116103f05760c09082360301126103f05760e4356001600160401b0381116103f057610d659036906004016135c6565b610104356001600160a01b03811690036103f0576001600160601b03610124351661012435036103f057604051632474521560e21b81526000805160206141fd83398151915260048201523360248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa801561054357610dff9160009161169e57506139b4565b610e07613de5565b8088036116615760a43588116116255760005b888110610e28576001600955005b600581901b8701356001600160a01b03811690036103f0578181101561160f57610e578160051b840184613db3565b9190600582901b8901356001600160a01b0316156115ca57891561159557821561155b57600b90815491610e8a836139f0565b9055610e97368c8f613611565b60009033600052600f6020526040600020906000918054925b8381106114c057505050506001810181116114aa5763ffffffff60018f92610eef8f948e610ee68f92604051986104d98a6133cb565b87523691613611565b6020850152610eff60643561350a565b6064356040850152610f1260843561350a565b608435606085015233608085015282421660a08501528160c08501528260a4351660e08501520116610100820152610f4d3689600401613e08565b61012082015282600052600c60205260406000209080518051906001600160401b038211610a1657610f8982610f8386546132e1565b86613c3d565b602090601f831160011461143e57610fb99291600091836113515750508160011b916000199060031b1c19161790565b82555b60208101518051906001600160401b038211610a1657610fec82610fe360018701546132e1565b60018701613c3d565b602090601f83116001146113cc5761101c9291600091836113515750508160011b916000199060031b1c19161790565b60018301555b6002820160408201516110348161350a565b61103d8161350a565b8154606084015161104d8161350a565b6110568161350a565b62010000600160b01b03608086015160101b1663ffffffff60b01b60a087015160b01b169161ff0060ff60d01b60c0890151151560d01b169460ff63ffffffff60d81b60e08b015160d81b1697169060ff60f81b16179160081b16171717171790556003820163ffffffff6101008301511663ffffffff1982541617905561114e61012060048401920151916110fb83511515829060ff801983541691151516179055565b6020830151815461ff00191690151560081b61ff00161781556040830151815462ff0000191690151560101b62ff0000161781556060830151815463ff000000191690151560181b63ff00000016179055565b60058201608082015160208151916111668385613f0e565b019160005260206000206000925b8284106112e9575050505060a060069101519101556111bb61119c6107af368a600401613e08565b83600052600e60205260406000209060ff801983541691151516179055565b33600052600f6020526040600020805491600160401b831015610a16576001956104d9858e611212826111f989611238998e61123e9c0181556132c9565b90919082549060031b91821b91600019901b1916179055565b6101043560a08b901b8b900316801515906112d4575b6112be575b8860051b01356139ff565b82613c84565b60405190608082526112558d8c6080850191613f9e565b9061126160643561350a565b606435602084015261127460843561350a565b60843560408401528460608401527f082c734a2e40d67c6b11dfd884b515a63e994959939a1de369876f22e296da03858060a01b038560051b8d013516938033940390a401610e1a565b6112cf610124356101043584613fbf565b61122d565b506001600160601b0361012435161515611228565b80518051906001600160401b038211610a165761130a82610f8386546132e1565b602090601f831160011461135c5792611342836001959460209487966000926113515750508160011b916000199060031b1c19161790565b85555b01920193019290611174565b015190503880610978565b908460005260206000209160005b601f19851681106113b4575083602093600196938796938794601f1981161061139b575b505050811b018555611345565b015160001960f88460031b161c1916905538808061138e565b9192602060018192868501518155019401920161136a565b9190600185016000526020600020906000935b601f1984168510611423576001945083601f1981161061140a575b505050811b016001830155611022565b015160001960f88460031b161c191690553880806113fa565b818101518355602094850194600190930192909101906113df565b9190846000526020600020906000935b601f198416851061148f576001945083601f19811610611476575b505050811b018255610fbc565b015160001960f88460031b161c19169055388080611469565b8181015183556020948501946001909301929091019061144e565b634e487b7160e01b600052601160045260246000fd5b6114ca81836132c9565b90549060031b1c600052600c6020526040600020600281015460ff8160d01c16918261152f575b508161151a575b50611506575b600101610eb0565b936115126001916139f0565b9490506114fe565b60d81c63ffffffff1660a435149050386114f8565b61027a919250611545906040519283809261331b565b60208151910120845160208601201490386114f1565b60405162461bcd60e51b8152602060048201526012602482015271151bdad95b88155492481c995c5d5a5c995960721b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c13985b59481c995c5d5a5c9959609a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f496e76616c696420726563697069656e742061646472657373000000000000006044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b8152602060048201526014602482015273457863656564732065646974696f6e2073697a6560601b6044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606490fd5b6116b7915060203d60201161053c5761052e818361341d565b8b6104b9565b346103f0576020806003193601126103f0576004356116f461024282600052600460205260018060a01b0360406000205416151590565b600052600d815260406000209081549161170d8361343e565b9261171b604051948561341d565b8084528284018092600052836000206000915b8383106117eb5750505050604051918083019381845251809452604083019360408160051b85010192916000955b8287106117695785850386f35b9091929382806117db600193603f198a820301865288516117c86117b560a0888060a01b03845116855263ffffffff8785015116878601526040840151908060408701528501906131d8565b60608084015190858303908601526131d8565b91608080920151918184039101526131d8565b960192019601959291909261175c565b600486600192604099989951611800816133b0565b63ffffffff8654868060a01b038116835260a01c168382015260405161182c8161027a81898b0161331b565b60408201526040516118458161027a8160028b0161331b565b606082015260405161185e8161027a8160038b0161331b565b608082015281520192019201919095949561172e565b346103f05760403660031901126103f05761188d613218565b60243590811515908183036103f0576001600160a01b0316918215611909576118db9033600052600760205260406000208460005260205260406000209060ff801983541691151516179055565b6040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b604051630b61174360e31b815260048101849052602490fd5b346103f05760003660031901126103f057604051600354600082611945836132e1565b918282526020936001908582821691826000146119e4575050600114611987575b506119739250038361341d565b6103ec6040519282849384528301906131d8565b84915060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b906000915b8583106119cc575050611973935082010185611966565b805483890185015287945086939092019181016119b5565b60ff19168582015261197395151560051b85010192508791506119669050565b346103f05760203660031901126103f057600435611a3a61024282600052600460205260018060a01b0360406000205416151590565b600052600e602052602060ff604060002054166040519015158152f35b346103f05760803660031901126103f0576024356001600160401b0381116103f057611a8790369060040161328f565b906044356001600160401b0381116103f057611aa790369060040161328f565b916064356001600160401b0381116103f057611ac790369060040161328f565b9490611aed610242600435600052600460205260018060a01b0360406000205416151590565b611af860043561382b565b6001600160a01b031633148015611fd8575b8015611f93575b611b1a906140ba565b600435600052600e60205260ff6040600020541615611f4e57611b3b613de5565b600435600052600d60205260406000209560405196611b59886133b0565b33885263ffffffff42166020890152611b73368587613611565b6040890152604051611b8481613402565b600081526060890152611b98368888613611565b60808901528054600160401b811015610a1657611bba91600182018155613648565b979097611f385780518854602083015163ffffffff60a01b60a09190911b166001600160a01b039092166001600160c01b03199091161717885560408101518051906001600160401b038211610a1657611c2482611c1b60018d01546132e1565b60018d01613c3d565b602090601f8311600114611ec657611c54929160009183611ebb5750508160011b916000199060031b1c19161790565b60018901555b60608101518051906001600160401b038211610a1657611c8a82611c8160028d01546132e1565b60028d01613c3d565b602090601f8311600114611e48579180611cbe9260809594600092611e3d5750508160011b916000199060031b1c19161790565b60028a01555b01519687516001600160401b038111610a1657611cf181611ce860038501546132e1565b60038501613c3d565b6020601f8211600114611da357916003611d4f83611d599694611d6198967fab73a4d1a16ddb7b5e9a1cdf21f3fced6fce2061955c38656d7f7c96090ab2219c9d9e600092611d985750508160011b916000199060031b1c19161790565b9101553691613611565b600435613c84565b611d8e611d7b604051938493604085526040850191613f9e565b8281036020840152339660043596613f9e565b0390a36001600955005b015190508e80610978565b6003830160005260206000209960005b601f1984168110611e2557506001837fab73a4d1a16ddb7b5e9a1cdf21f3fced6fce2061955c38656d7f7c96090ab2219a9b9c611d61989694600394611d599997601f19811610611e0d575b505050811b019101556104d9565b015160001983861b60f8161c191690558d8080611dff565b828201518c556001909b019a60209283019201611db3565b015190508c80610978565b9060028b0160005260206000209160005b601f1985168110611ea3575091839160019360809695601f19811610611e8a575b505050811b0160028a0155611cc4565b015160001960f88460031b161c191690558b8080611e7a565b91926020600181928685015181550194019201611e59565b015190508b80610978565b919060018b016000526020600020906000935b601f1984168510611f1d576001945083601f19811610611f04575b505050811b016001890155611c5a565b015160001960f88460031b161c191690558a8080611ef4565b81810151835560209485019460019093019290910190611ed9565b634e487b7160e01b600052600060045260246000fd5b60405162461bcd60e51b815260206004820152601860248201527f537469636b6572206e6f7420637573746f6d697a61626c6500000000000000006044820152606490fd5b50611b1a611fd133611fa660043561382b565b60018060a01b0380911660005260076020526040600020911660005260205260ff6040600020541690565b9050611b11565b50336001600160a01b03611fed600435613664565b1614611b0a565b346103f05760203660031901126103f057600435600052600c60205261208c60406000206103ec604051916120348361202d818461331b565b038461341d565b6040516120488161027a816001860161331b565b60028201549160ff83169260ff8160081c169063ffffffff9161209a6120776004856003880154169601613455565b956040519a8b9a610140808d528c01906131d8565b908a820360208c01526131d8565b956120a48161350a565b60408901526120b28161350a565b6060880152601081901c6001600160a01b0316608088015260b081901c821660a088015260d081901c60ff16151560c088015260d81c1660e086015261010085015283820361012085015261352a565b346103f05760603660031901126103f05760043561211e61322e565b604435916001600160601b038316918284036103f057600082815260046020526040902054612157906001600160a01b03161515614077565b81600052602090600c825260018060a01b03908160026040600020015460101c16331480156121fb575b156121bf576121b4849596827f19dc52c4a51cd356464f1965b7872ac6388fb669cee13a05e1ded99b903127a396613fbf565b6040519586521693a3005b60405162461bcd60e51b81526004810184905260146024820152732737ba1031b932b0ba37b91037b91030b236b4b760611b6044820152606490fd5b50604051632474521560e21b81526000805160206141fd833981519152600482015233602482015283816044817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561054357600091612262575b50612181565b6122799150843d861161053c5761052e818361341d565b8761225c565b346103f05760003660031901126103f057604051632474521560e21b81527f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a60048201523360248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610543576123129160009161236657506139b4565b600a5460ff81166123545760019060ff191617600a557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b60405163d93c066560e01b8152600490fd5b61237e915060203d811161053c5761052e818361341d565b826104b9565b346103f05760403660031901126103f05761239d613218565b6001600160a01b03166000908152600f60205260409020805460243591908210156103f0576020916123ce916132c9565b90546040519160031b1c8152f35b346103f05760203660031901126103f0576001600160a01b036123fd613218565b16801561241c5760005260056020526020604060002054604051908152f35b6040516322718ad960e21b815260006004820152602490fd5b346103f057600319610160368201126103f057612450613218565b6024356001600160401b0381116103f05761246f90369060040161328f565b926044356001600160401b0381116103f05761248f90369060040161328f565b919092600660643510156103f057600660843510156103f05760a435151560a435036103f05760e435916001600160401b0383116103f05760c09083360301126103f057610104356001600160401b0381116103f0576124f390369060040161328f565b9093909290610124356001600160a01b03811690036103f0576001600160601b03610144351661014435036103f057604051632474521560e21b81526000805160206141fd83398151915260048201523360248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa80156105435761259291600091612c0757506139b4565b6001600160a01b038716156115ca57871561159557831561155b57600b54956125ba876139f0565b600b5560a43515612bf6576125d0368a86613611565b9060009133600052600f6020526040600020906000918054925b838110612b5b57505050506001820182116114aa5761262e600163ffffffff9301915b6040519461261a866133cb565b612625368e8a613611565b86523691613611565b602084015261263e60643561350a565b606435604084015261265160843561350a565b608435606084015233608084015281421660a084015260a435151560c08401528160c4351660e08401521661010082015261268f3683600401613e08565b61012082015285600052600c60205260406000209080518051906001600160401b038211610a16576126c582610f8386546132e1565b602090601f8311600114612aef576126f5929160009183611e3d5750508160011b916000199060031b1c19161790565b82555b60208101518051906001600160401b038211610a165761271f82610fe360018701546132e1565b602090601f8311600114612a7d5761274f929160009183611e3d5750508160011b916000199060031b1c19161790565b60018301555b6002820160408201516127678161350a565b6127708161350a565b815460608401516127808161350a565b6127898161350a565b62010000600160b01b03608086015160101b1663ffffffff60b01b60a087015160b01b169161ff0060ff60d01b60c0890151151560d01b169460ff63ffffffff60d81b60e08b015160d81b1697169060ff60f81b16179160081b16171717171790556003820163ffffffff6101008301511663ffffffff1982541617905561282e61012060048401920151916110fb83511515829060ff801983541691151516179055565b60058201608082015160208151916128468385613f0e565b01916000526020600020916000905b8282106129a5575050505061289e9261287f92600660a06107af9401519101553690600401613e08565b85600052600e60205260406000209060ff801983541691151516179055565b33600052600f60205260406000208054600160401b811015610a16577f082c734a2e40d67c6b11dfd884b515a63e994959939a1de369876f22e296da0394612936946128fa886111f98561292497600161291e980181556132c9565b610124356001600160a01b0316151580612990575b61297a575b6104d9888a6139ff565b85613c84565b60405195608087526080870191613f9e565b9261294260643561350a565b606435602086015261295560843561350a565b608435604086015260a435151560608601526001600160a01b031693339381900390a4005b61298b61014435610124358a613fbf565b612914565b506001600160601b036101443516151561290f565b80518051906001600160401b038211610a16576129c68261094e88546132e1565b602090601f8311600114612a0d57926129fe836001959460209487966000926113515750508160011b916000199060031b1c19161790565b87555b01940191019092612855565b908660005260206000209160005b601f1985168110612a65575083602093600196938796938794601f19811610612a4c575b505050811b018755612a01565b015160001960f88460031b161c19169055388080612a3f565b91926020600181928685015181550194019201612a1b565b9190600185016000526020600020906000935b601f1984168510612ad4576001945083601f19811610612abb575b505050811b016001830155612755565b015160001960f88460031b161c191690558b8080612aab565b81810151835560209485019460019093019290910190612a90565b9190846000526020600020906000935b601f1984168510612b40576001945083601f19811610612b27575b505050811b0182556126f8565b015160001960f88460031b161c191690558b8080612b1a565b81810151835560209485019460019093019290910190612aff565b612b6581836132c9565b90549060031b1c600052600c6020526040600020600281015460ff8160d01c169182612bca575b5081612bb5575b50612ba1575b6001016125ea565b94612bad6001916139f0565b959050612b99565b60d81c63ffffffff1660c4351490508f612b93565b61027a919250612be0906040519283809261331b565b6020815191012084516020860120149038612b8c565b63ffffffff9061262e60009161260d565b612c20915060203d60201161053c5761052e818361341d565b8a6104b9565b346103f05760203660031901126103f0576020612c4460043561382b565b6040516001600160a01b039091168152f35b346103f05760003660031901126103f057602060ff600a54166040519015158152f35b346103f05760203660031901126103f057600435612caf61024282600052600460205260018060a01b0360406000205416151590565b612cb88161382b565b6001600160a01b0390811633148015612da1575b8015612d89575b612cdc906140ba565b816000526004602052604060002054168160008215928315612d55575b82825260046020526040822080546001600160a01b03191690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a4612d3d57005b60249060405190637e27328960e01b82526004820152fd5b600083815260066020526040902080546001600160a01b031916905580825260056020526040822082198154019055612cf9565b50612cdc612d9a33611fa68561382b565b9050612cd3565b503381612dad84613664565b1614612ccc565b346103f057610c9b612dc536613244565b9060405192612dd384613402565b60008452610c95838383613689565b346103f05760003660031901126103f057604051632474521560e21b81527f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a60048201523360248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa801561054357612e759160009161236657506139b4565b600a5460ff811615612eb45760ff1916600a557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b604051638dfc202b60e01b8152600490fd5b346103f05760203660031901126103f057600435600052600e602052602060ff604060002054166040519015158152f35b346103f057612f0e612f0836613279565b9061410b565b604080516001600160a01b03939093168352602083019190915290f35b346103f057610c9b612f3c36613244565b91613689565b346103f05760003660031901126103f0576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346103f05760403660031901126103f057612fa0613218565b602435612fac8161382b565b3315158061305b575b8061302e575b613016576001600160a01b039283169282918491167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4600090815260066020526040902080546001600160a01b0319169091179055005b60405163a9fbf51f60e01b8152336004820152602490fd5b5060018060a01b038116600052600760205260406000203360005260205260ff6040600020541615612fbb565b506001600160a01b038116331415612fb5565b346103f05760203660031901126103f0576020612c44600435613664565b346103f05760003660031901126103f0576040516002546000826130af836132e1565b918282526020936001908582821691826000146119e45750506001146130dc57506119739250038361341d565b84915060026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace906000915b858310613121575050611973935082010185611966565b8054838901850152879450869390920191810161310a565b346103f05760203660031901126103f0576004359063ffffffff60e01b82168092036103f057602091632483248360e11b811490811561317b575b5015158152f35b6380ac58cd60e01b8114915081156131c7575b811561319c575b5083613174565b63152a902d60e11b8114915081156131b6575b5083613195565b6301ffc9a760e01b149050836131af565b635b5e139f60e01b8114915061318e565b919082519283825260005b848110613204575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016131e3565b600435906001600160a01b03821682036103f057565b602435906001600160a01b03821682036103f057565b60609060031901126103f0576001600160a01b039060043582811681036103f0579160243590811681036103f0579060443590565b60409060031901126103f0576004359060243590565b9181601f840112156103f0578235916001600160401b0383116103f057602083818601950101116103f057565b359081151582036103f057565b805482101561160f5760005260206000200190600090565b90600182811c92168015613311575b60208310146132fb57565b634e487b7160e01b600052602260045260246000fd5b91607f16916132f0565b80546000939261332a826132e1565b9182825260209360019182811690816000146133915750600114613350575b5050505050565b90939495506000929192528360002092846000945b83861061337d57505050500101903880808080613349565b805485870183015294019385908201613365565b60ff19168685015250505090151560051b010191503880808080613349565b60a081019081106001600160401b03821117610a1657604052565b61014081019081106001600160401b03821117610a1657604052565b60c081019081106001600160401b03821117610a1657604052565b602081019081106001600160401b03821117610a1657604052565b90601f801991011681019081106001600160401b03821117610a1657604052565b6001600160401b038111610a165760051b60200190565b90604091825190613465826133e7565b8193815460ff81161515845260ff602091818160081c16151583870152818160101c1615158487015260181c16151560608501526001908184018054916134ab8361343e565b946134b88151968761341d565b8386526000928352818320908287015b8585106134e8575050505050505060a09160029160808501520154910152565b8684819284516134fc8161027a818a61331b565b8152019301940193916134c8565b6006111561351457565b634e487b7160e01b600052602160045260246000fd5b9060c081019180511515825260208082015115158184015260408201511515604084015260608201511515606084015260808201519360c06080850152845180915260e08401918060e08360051b8701019601926000905b83821061359a57505050505060a08091015191015290565b909192939683806135b760019360df198b82030186528b516131d8565b99019201920190939291613582565b9181601f840112156103f0578235916001600160401b0383116103f0576020808501948460051b0101116103f057565b6001600160401b038111610a1657601f01601f191660200190565b92919261361d826135f6565b9161362b604051938461341d565b8294818452818301116103f0578281602093846000960137010152565b805482101561160f5760005260206000209060021b0190600090565b61366d8161382b565b506000908152600660205260409020546001600160a01b031690565b6001600160a01b03918216929091831561381257600092828452826020956004875260409684888820541696879133151580613779575b509060047fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9284613746575b858352600581528b8320805460010190558683525289812080546001600160a01b0319168517905580a416928383036137255750505050565b6064945051926364283d7b60e01b8452600484015260248301526044820152fd5b600087815260066020526040902080546001600160a01b0319169055848352600581528b832080546000190190556136ec565b919394509150806137d1575b15613795578592918791386136c0565b8786886137b2576024915190637e27328960e01b82526004820152fd5b905163177e802f60e01b81523360048201526024810191909152604490fd5b5033871480156137f6575b806137855750858252600681523385898420541614613785565b5086825260078152878220338352815260ff88832054166137dc565b604051633250574960e11b815260006004820152602490fd5b6000818152600460205260409020546001600160a01b0316908115612d3d575090565b909192833b61385e575050505050565b604051630a85bd0160e11b8082526001600160a01b0393841660048301529383166024820152604481019190915260806064820152602095919093169390919083906138ae9060848301906131d8565b039285816000958187895af1849181613958575b50613922575050503d60001461391a573d6138dc816135f6565b906138ea604051928361341d565b81528091843d92013e5b8051928361391557604051633250574960e11b815260048101849052602490fd5b019050fd5b5060606138f4565b919450915063ffffffff60e01b160361394057503880808080613349565b60249060405190633250574960e11b82526004820152fd5b9091508681813d8311613995575b613970818361341d565b8101031261399157516001600160e01b0319811681036139915790386138c2565b8480fd5b503d613966565b908160209103126103f0575180151581036103f05790565b156139bb57565b60405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606490fd5b60001981146114aa5760010190565b6040805190613a0d82613402565b60008083526001600160a01b0394848616938415613c0e57818352600495602097878952858520541683878215159283613bdb575b81885260058c52888820805460010190558288528a8c5288882080546001600160a01b031916831790557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8880a4613bc4573b613aa3575b50505050505050565b86613ae191859697989994955180938192630a85bd0160e11b96878452338d85015289602485015260448401526080606484015260848301906131d8565b0381878a5af1849181613b84575b50613b4d575050503d600014613b45573d613b09816135f6565b90613b168451928361341d565b81528091863d92013e5b80519485613b3f57505051633250574960e11b81529182015260249150fd5b85925001fd5b506060613b20565b919650915063ffffffff60e01b1603613b6f5750505038808080808080613a9a565b51633250574960e11b81529182015260249150fd5b9091508881813d8311613bbd575b613b9c818361341d565b8101031261399157516001600160e01b031981168103613991579038613aef565b503d613b92565b84516339e3563760e11b8152808801859052602490fd5b600083815260066020526040902080546001600160a01b031916905580885260058c528888208054600019019055613a42565b8351633250574960e11b815260048101849052602490fd5b818110613c31575050565b60008155600101613c26565b9190601f8111613c4c57505050565b613c78926000526020600020906020601f840160051c83019310613c7a575b601f0160051c0190613c26565b565b9091508190613c6b565b9190916000908082526020916008835260408120908551956001600160401b038711613d9f57613cbe87613cb885546132e1565b85613c3d565b8491601f8811600114613d1b5796613d0f9281927ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79899926113515750508160011b916000199060031b1c19161790565b90555b604051908152a1565b9190601f198816848452868420935b818110613d8857509160019391897ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7999a9410613d6f575b505050811b019055613d12565b015160001960f88460031b161c19169055388080613d62565b929387600181928786015181550195019301613d2a565b634e487b7160e01b82526041600452602482fd5b903590601e19813603018212156103f057018035906001600160401b0382116103f0576020019181360383136103f057565b600260095414613df6576002600955565b604051633ee5aeb560e01b8152600490fd5b919060c0838203126103f057604092835191613e23836133e7565b8294613e2e836132bc565b8452602090613e3e8285016132bc565b82860152613e4d8185016132bc565b81860152613e5d606085016132bc565b60608601526001600160401b039260808501358481116103f05785019181601f840112156103f057823590613e918261343e565b95613e9e8251978861341d565b828752858088019360051b860101948486116103f057868101935b868510613ed957505050505050505060a091829160808501520135910152565b84358381116103f057820186603f820112156103f0578891613f0388838886809601359101613611565b815201940193613eb9565b600160401b8211610a1657805491808255828110613f2b57505050565b600091825260209081832093840193015b838110613f495750505050565b8083613f57600193546132e1565b80613f65575b505001613f3c565b601f8082118514613f7c57505081555b8338613f5d565b613f9590848452868420920160051c8201858301613c26565b81835555613f75565b908060209392818452848401376000828201840152601f01601f1916010190565b916001600160601b03169061271080831161405357506001600160a01b039081169283156140345760405193604085018581106001600160401b03821117610a165760405284526020840192835260005260016020526040600020925116906001600160601b0360a01b905160a01b16179055565b60449060405190634b4f842960e11b8252600482015260006024820152fd5b83606491846040519263dfd1fc1b60e01b8452600484015260248301526044820152fd5b1561407e57565b60405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b156140c157565b60405162461bcd60e51b8152602060048201526015602482015274139bdd081bdddb995c881bdc88185c1c1c9bdd9959605a1b6044820152606490fd5b3580151581036103f05790565b6000908152600160205260408120549092916001600160a01b0391828116919060a01c82156141a8575b6001600160601b0316948582029582159083880414811715614194576127109484161561416457505050920490565b91955091506101f4808602958604141715614180575033920490565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b82526011600452602482fd5b508454838116925060a01c614135565b805115908115916141ee575b81156141e0575b81156141d5575090565b606091500151151590565b6040810151151591506141cb565b6020810151151591506141c456fe368a0a902ce0a8be883cdf3d5cbaaae7bbbf3f9f0aa7ad2c137c77c3a72ca6b6a2646970667358221220fbf7def8f3254fc4e66fbca784a5396727c330ed3bb222dd584127dd1172c87f64736f6c63430008150033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146131395750806306fdde031461308c578063081812fc1461306e578063095ea7b314612f8757806313007d5514612f4257806323b872dd14612f2b5780632a55205a14612ef75780633db93fa014612ec65780633f4ba83a14612de257806342842e0e14612db457806342966c6814612c795780635c975abb14612c565780636352211e14612c26578063676c6d1d1461243557806370a08231146123dc57806373394de5146123845780638456cb591461227f57806386e228d5146121025780638f965d8014611ff457806390a7733514611a5757806391a048ce14611a0457806395d89b4114611922578063a22cb46514611874578063b513ed83146116bd578063b547ba3e14610c9d578063b88d4fde14610c30578063c87b56dd14610bcd578063cb4ecf6614610aff578063d9e5539314610a4b578063e70dbc6a146105a5578063e985e9c51461054f578063eacabe14146103f55763feb6ce691461018a57600080fd5b346103f05760203660031901126103f0576004356040516101aa816133cb565b6060815260606020820152600060408201526000606082015260006080820152600060a0820152600060c0820152600060e08201526000610100820152610120604051916101f7836133e7565b6000835260006020840152600060408401526000606084015260606080840152600060a0840152015261024761024282600052600460205260018060a01b0360406000205416151590565b614077565b600052600c6020526103ec604060002061031e600460405192610269846133cb565b6040516102818161027a818561331b565b038261341d565b84526040516102978161027a816001860161331b565b602085015263ffffffff60028201546102b260ff821661350a565b60ff8116604087015260ff8160081c166102cb8161350a565b6060870152601081901c6001600160a01b0316608087015260b081901c821660a087015260d081901c60ff16151560c087015260d81c1660e0850152600381015463ffffffff1661010085015201613455565b6101208201526040519182916020835261012061036261034c835161014060208801526101608701906131d8565b6020840151868203601f190160408801526131d8565b9160408101516103718161350a565b606086015260608101516103848161350a565b608086015260018060a01b0360808201511660a086015263ffffffff60a08201511660c086015260c0810151151560e086015263ffffffff60e08201511661010086015263ffffffff61010082015116828601520151601f198483030161014085015261352a565b0390f35b600080fd5b346103f05760403660031901126103f05761040e613218565b6024356001600160401b0381116103f05761042d90369060040161328f565b604051632474521560e21b81527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660048201523360248201529192916001600160a01b03906020816044817f000000000000000000000000000000000000000000000000000000000000000086165afa8015610543576020956104bf6104e0926104e694600091610516575b506139b4565b600b54946104cc866139f0565b600b556104d986886139ff565b3691613611565b83613c84565b604051921633827f331d023184405eeb32d693804ea42e04df180882b4d7345e4e5f5e8cbaf4c5b3600080a48152f35b6105369150893d811161053c575b61052e818361341d565b81019061399c565b896104b9565b503d610524565b6040513d6000823e3d90fd5b346103f05760403660031901126103f057610568613218565b61057061322e565b9060018060a01b03809116600052600760205260406000209116600052602052602060ff604060002054166040519015158152f35b346103f0576003196040368201126103f0576001600160401b03602435116103f05760c06024353603918201126103f0576105fa610242600435600052600460205260018060a01b0360406000205416151590565b604051632474521560e21b81526000805160206141fd83398151915260048201523360248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa80156105435761066a91600091610a2c57506139b4565b600435600052600c60205260406000209061071c600483016106a56106936024356004016140fe565b829060ff801983541691151516179055565b6106cb6106b560248035016140fe565b825461ff00191690151560081b61ff0016178255565b6106f46106dc6044602435016140fe565b825462ff0000191690151560101b62ff000016178255565b6107026064602435016140fe565b815463ff000000191690151560181b63ff00000016179055565b602219016024356084013512156103f0576024356084810135016001600160401b036004820135116103f057600481013560051b360360248201136103f05761076c600482013560058401613f0e565b6024810190600583016000526020600020916000905b600483013582106109245784600660a460243501359101556107d56107b46107af36602435600401613e08565b6141b8565b600435600052600e60205260406000209060ff801983541691151516179055565b6040516020815260e081016107ee6024356004016132bc565b1515602083015261080260248035016132bc565b151560408301526108176044602435016132bc565b1515606083015261082c6064602435016132bc565b15156080830152602435608460243501350191600483013560248401926001600160401b0382116103f0578160051b9081360385136103f05760c060a0850152829052610100808401959184010193919060009036819003604219015b8383106108c75760243560a4013560c08701526004357f27c61ecf1d8d5a93292a2d647ec3c86de6fb24b436daf18279cbb5c907bba3fe87890388a2005b909192939560ff198682030188528635828112156103f057830190604460248301359201916001600160401b0381116103f05780360383136103f0576109136020928392600195613f9e565b980198019301919096939296610889565b6109318160248501613db3565b906001600160401b038211610a16576109548261094e88546132e1565b88613c3d565b600090601f83116001146109a7579261098d8360019594602094879660009261099c575b50508160011b916000199060031b1c19161790565b87555b01940191019092610782565b013590508b80610978565b8660005260206000209160005b601f19851681106109fe57509260209260019592869583601f198116106109e4575b505050831b83018755610990565b0135600019600384901b60f8161c191690558980806109d6565b909260206001819286860135815501940191016109b4565b634e487b7160e01b600052604160045260246000fd5b610a45915060203d60201161053c5761052e818361341d565b836104b9565b346103f0576020806003193601126103f0576001600160a01b03610a6d613218565b16600052600f8152604060002060405190818382549182815201908192600052846000209060005b86828210610aeb578686610aab8288038361341d565b604051928392818401908285525180915260408401929160005b828110610ad457505050500390f35b835185528695509381019392810192600101610ac5565b835485529093019260019283019201610a95565b346103f057610b0d36613279565b90600052600d602052604060002080548210156103f05763ffffffff91610b3391613648565b506103ec6003610bbf835493610bb1604051610b568161027a816001870161331b565b610b8560405193610b7585610b6e816002850161331b565b038661341d565b610b6e604051809881930161331b565b604080516001600160a01b038916815260a098891c90991660208a0152880187905287968701906131d8565b9085820360608701526131d8565b9083820360808501526131d8565b346103f05760203660031901126103f057600435610bea8161382b565b5060005260086020526103ec61027a610c0d60406000206040519283809261331b565b6000604051610c1b81613402565b526040519182916020835260208301906131d8565b346103f05760803660031901126103f057610c49613218565b610c5161322e565b90604435606435926001600160401b0384116103f057366023850112156103f057610c89610c9b943690602481600401359101613611565b92610c95838383613689565b3361384e565b005b346103f057600319610140368201126103f0576004356001600160401b0381116103f057610ccf9036906004016135c6565b906024356001600160401b0381116103f057610cef90369060040161328f565b9190936044356001600160401b0381116103f057610d1190369060040161328f565b91600660643510156103f057600660843510156103f05760c435906001600160401b0382116103f05760c09082360301126103f05760e4356001600160401b0381116103f057610d659036906004016135c6565b610104356001600160a01b03811690036103f0576001600160601b03610124351661012435036103f057604051632474521560e21b81526000805160206141fd83398151915260048201523360248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa801561054357610dff9160009161169e57506139b4565b610e07613de5565b8088036116615760a43588116116255760005b888110610e28576001600955005b600581901b8701356001600160a01b03811690036103f0578181101561160f57610e578160051b840184613db3565b9190600582901b8901356001600160a01b0316156115ca57891561159557821561155b57600b90815491610e8a836139f0565b9055610e97368c8f613611565b60009033600052600f6020526040600020906000918054925b8381106114c057505050506001810181116114aa5763ffffffff60018f92610eef8f948e610ee68f92604051986104d98a6133cb565b87523691613611565b6020850152610eff60643561350a565b6064356040850152610f1260843561350a565b608435606085015233608085015282421660a08501528160c08501528260a4351660e08501520116610100820152610f4d3689600401613e08565b61012082015282600052600c60205260406000209080518051906001600160401b038211610a1657610f8982610f8386546132e1565b86613c3d565b602090601f831160011461143e57610fb99291600091836113515750508160011b916000199060031b1c19161790565b82555b60208101518051906001600160401b038211610a1657610fec82610fe360018701546132e1565b60018701613c3d565b602090601f83116001146113cc5761101c9291600091836113515750508160011b916000199060031b1c19161790565b60018301555b6002820160408201516110348161350a565b61103d8161350a565b8154606084015161104d8161350a565b6110568161350a565b62010000600160b01b03608086015160101b1663ffffffff60b01b60a087015160b01b169161ff0060ff60d01b60c0890151151560d01b169460ff63ffffffff60d81b60e08b015160d81b1697169060ff60f81b16179160081b16171717171790556003820163ffffffff6101008301511663ffffffff1982541617905561114e61012060048401920151916110fb83511515829060ff801983541691151516179055565b6020830151815461ff00191690151560081b61ff00161781556040830151815462ff0000191690151560101b62ff0000161781556060830151815463ff000000191690151560181b63ff00000016179055565b60058201608082015160208151916111668385613f0e565b019160005260206000206000925b8284106112e9575050505060a060069101519101556111bb61119c6107af368a600401613e08565b83600052600e60205260406000209060ff801983541691151516179055565b33600052600f6020526040600020805491600160401b831015610a16576001956104d9858e611212826111f989611238998e61123e9c0181556132c9565b90919082549060031b91821b91600019901b1916179055565b6101043560a08b901b8b900316801515906112d4575b6112be575b8860051b01356139ff565b82613c84565b60405190608082526112558d8c6080850191613f9e565b9061126160643561350a565b606435602084015261127460843561350a565b60843560408401528460608401527f082c734a2e40d67c6b11dfd884b515a63e994959939a1de369876f22e296da03858060a01b038560051b8d013516938033940390a401610e1a565b6112cf610124356101043584613fbf565b61122d565b506001600160601b0361012435161515611228565b80518051906001600160401b038211610a165761130a82610f8386546132e1565b602090601f831160011461135c5792611342836001959460209487966000926113515750508160011b916000199060031b1c19161790565b85555b01920193019290611174565b015190503880610978565b908460005260206000209160005b601f19851681106113b4575083602093600196938796938794601f1981161061139b575b505050811b018555611345565b015160001960f88460031b161c1916905538808061138e565b9192602060018192868501518155019401920161136a565b9190600185016000526020600020906000935b601f1984168510611423576001945083601f1981161061140a575b505050811b016001830155611022565b015160001960f88460031b161c191690553880806113fa565b818101518355602094850194600190930192909101906113df565b9190846000526020600020906000935b601f198416851061148f576001945083601f19811610611476575b505050811b018255610fbc565b015160001960f88460031b161c19169055388080611469565b8181015183556020948501946001909301929091019061144e565b634e487b7160e01b600052601160045260246000fd5b6114ca81836132c9565b90549060031b1c600052600c6020526040600020600281015460ff8160d01c16918261152f575b508161151a575b50611506575b600101610eb0565b936115126001916139f0565b9490506114fe565b60d81c63ffffffff1660a435149050386114f8565b61027a919250611545906040519283809261331b565b60208151910120845160208601201490386114f1565b60405162461bcd60e51b8152602060048201526012602482015271151bdad95b88155492481c995c5d5a5c995960721b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c13985b59481c995c5d5a5c9959609a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f496e76616c696420726563697069656e742061646472657373000000000000006044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b8152602060048201526014602482015273457863656564732065646974696f6e2073697a6560601b6044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606490fd5b6116b7915060203d60201161053c5761052e818361341d565b8b6104b9565b346103f0576020806003193601126103f0576004356116f461024282600052600460205260018060a01b0360406000205416151590565b600052600d815260406000209081549161170d8361343e565b9261171b604051948561341d565b8084528284018092600052836000206000915b8383106117eb5750505050604051918083019381845251809452604083019360408160051b85010192916000955b8287106117695785850386f35b9091929382806117db600193603f198a820301865288516117c86117b560a0888060a01b03845116855263ffffffff8785015116878601526040840151908060408701528501906131d8565b60608084015190858303908601526131d8565b91608080920151918184039101526131d8565b960192019601959291909261175c565b600486600192604099989951611800816133b0565b63ffffffff8654868060a01b038116835260a01c168382015260405161182c8161027a81898b0161331b565b60408201526040516118458161027a8160028b0161331b565b606082015260405161185e8161027a8160038b0161331b565b608082015281520192019201919095949561172e565b346103f05760403660031901126103f05761188d613218565b60243590811515908183036103f0576001600160a01b0316918215611909576118db9033600052600760205260406000208460005260205260406000209060ff801983541691151516179055565b6040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b604051630b61174360e31b815260048101849052602490fd5b346103f05760003660031901126103f057604051600354600082611945836132e1565b918282526020936001908582821691826000146119e4575050600114611987575b506119739250038361341d565b6103ec6040519282849384528301906131d8565b84915060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b906000915b8583106119cc575050611973935082010185611966565b805483890185015287945086939092019181016119b5565b60ff19168582015261197395151560051b85010192508791506119669050565b346103f05760203660031901126103f057600435611a3a61024282600052600460205260018060a01b0360406000205416151590565b600052600e602052602060ff604060002054166040519015158152f35b346103f05760803660031901126103f0576024356001600160401b0381116103f057611a8790369060040161328f565b906044356001600160401b0381116103f057611aa790369060040161328f565b916064356001600160401b0381116103f057611ac790369060040161328f565b9490611aed610242600435600052600460205260018060a01b0360406000205416151590565b611af860043561382b565b6001600160a01b031633148015611fd8575b8015611f93575b611b1a906140ba565b600435600052600e60205260ff6040600020541615611f4e57611b3b613de5565b600435600052600d60205260406000209560405196611b59886133b0565b33885263ffffffff42166020890152611b73368587613611565b6040890152604051611b8481613402565b600081526060890152611b98368888613611565b60808901528054600160401b811015610a1657611bba91600182018155613648565b979097611f385780518854602083015163ffffffff60a01b60a09190911b166001600160a01b039092166001600160c01b03199091161717885560408101518051906001600160401b038211610a1657611c2482611c1b60018d01546132e1565b60018d01613c3d565b602090601f8311600114611ec657611c54929160009183611ebb5750508160011b916000199060031b1c19161790565b60018901555b60608101518051906001600160401b038211610a1657611c8a82611c8160028d01546132e1565b60028d01613c3d565b602090601f8311600114611e48579180611cbe9260809594600092611e3d5750508160011b916000199060031b1c19161790565b60028a01555b01519687516001600160401b038111610a1657611cf181611ce860038501546132e1565b60038501613c3d565b6020601f8211600114611da357916003611d4f83611d599694611d6198967fab73a4d1a16ddb7b5e9a1cdf21f3fced6fce2061955c38656d7f7c96090ab2219c9d9e600092611d985750508160011b916000199060031b1c19161790565b9101553691613611565b600435613c84565b611d8e611d7b604051938493604085526040850191613f9e565b8281036020840152339660043596613f9e565b0390a36001600955005b015190508e80610978565b6003830160005260206000209960005b601f1984168110611e2557506001837fab73a4d1a16ddb7b5e9a1cdf21f3fced6fce2061955c38656d7f7c96090ab2219a9b9c611d61989694600394611d599997601f19811610611e0d575b505050811b019101556104d9565b015160001983861b60f8161c191690558d8080611dff565b828201518c556001909b019a60209283019201611db3565b015190508c80610978565b9060028b0160005260206000209160005b601f1985168110611ea3575091839160019360809695601f19811610611e8a575b505050811b0160028a0155611cc4565b015160001960f88460031b161c191690558b8080611e7a565b91926020600181928685015181550194019201611e59565b015190508b80610978565b919060018b016000526020600020906000935b601f1984168510611f1d576001945083601f19811610611f04575b505050811b016001890155611c5a565b015160001960f88460031b161c191690558a8080611ef4565b81810151835560209485019460019093019290910190611ed9565b634e487b7160e01b600052600060045260246000fd5b60405162461bcd60e51b815260206004820152601860248201527f537469636b6572206e6f7420637573746f6d697a61626c6500000000000000006044820152606490fd5b50611b1a611fd133611fa660043561382b565b60018060a01b0380911660005260076020526040600020911660005260205260ff6040600020541690565b9050611b11565b50336001600160a01b03611fed600435613664565b1614611b0a565b346103f05760203660031901126103f057600435600052600c60205261208c60406000206103ec604051916120348361202d818461331b565b038461341d565b6040516120488161027a816001860161331b565b60028201549160ff83169260ff8160081c169063ffffffff9161209a6120776004856003880154169601613455565b956040519a8b9a610140808d528c01906131d8565b908a820360208c01526131d8565b956120a48161350a565b60408901526120b28161350a565b6060880152601081901c6001600160a01b0316608088015260b081901c821660a088015260d081901c60ff16151560c088015260d81c1660e086015261010085015283820361012085015261352a565b346103f05760603660031901126103f05760043561211e61322e565b604435916001600160601b038316918284036103f057600082815260046020526040902054612157906001600160a01b03161515614077565b81600052602090600c825260018060a01b03908160026040600020015460101c16331480156121fb575b156121bf576121b4849596827f19dc52c4a51cd356464f1965b7872ac6388fb669cee13a05e1ded99b903127a396613fbf565b6040519586521693a3005b60405162461bcd60e51b81526004810184905260146024820152732737ba1031b932b0ba37b91037b91030b236b4b760611b6044820152606490fd5b50604051632474521560e21b81526000805160206141fd833981519152600482015233602482015283816044817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561054357600091612262575b50612181565b6122799150843d861161053c5761052e818361341d565b8761225c565b346103f05760003660031901126103f057604051632474521560e21b81527f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a60048201523360248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610543576123129160009161236657506139b4565b600a5460ff81166123545760019060ff191617600a557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b60405163d93c066560e01b8152600490fd5b61237e915060203d811161053c5761052e818361341d565b826104b9565b346103f05760403660031901126103f05761239d613218565b6001600160a01b03166000908152600f60205260409020805460243591908210156103f0576020916123ce916132c9565b90546040519160031b1c8152f35b346103f05760203660031901126103f0576001600160a01b036123fd613218565b16801561241c5760005260056020526020604060002054604051908152f35b6040516322718ad960e21b815260006004820152602490fd5b346103f057600319610160368201126103f057612450613218565b6024356001600160401b0381116103f05761246f90369060040161328f565b926044356001600160401b0381116103f05761248f90369060040161328f565b919092600660643510156103f057600660843510156103f05760a435151560a435036103f05760e435916001600160401b0383116103f05760c09083360301126103f057610104356001600160401b0381116103f0576124f390369060040161328f565b9093909290610124356001600160a01b03811690036103f0576001600160601b03610144351661014435036103f057604051632474521560e21b81526000805160206141fd83398151915260048201523360248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa80156105435761259291600091612c0757506139b4565b6001600160a01b038716156115ca57871561159557831561155b57600b54956125ba876139f0565b600b5560a43515612bf6576125d0368a86613611565b9060009133600052600f6020526040600020906000918054925b838110612b5b57505050506001820182116114aa5761262e600163ffffffff9301915b6040519461261a866133cb565b612625368e8a613611565b86523691613611565b602084015261263e60643561350a565b606435604084015261265160843561350a565b608435606084015233608084015281421660a084015260a435151560c08401528160c4351660e08401521661010082015261268f3683600401613e08565b61012082015285600052600c60205260406000209080518051906001600160401b038211610a16576126c582610f8386546132e1565b602090601f8311600114612aef576126f5929160009183611e3d5750508160011b916000199060031b1c19161790565b82555b60208101518051906001600160401b038211610a165761271f82610fe360018701546132e1565b602090601f8311600114612a7d5761274f929160009183611e3d5750508160011b916000199060031b1c19161790565b60018301555b6002820160408201516127678161350a565b6127708161350a565b815460608401516127808161350a565b6127898161350a565b62010000600160b01b03608086015160101b1663ffffffff60b01b60a087015160b01b169161ff0060ff60d01b60c0890151151560d01b169460ff63ffffffff60d81b60e08b015160d81b1697169060ff60f81b16179160081b16171717171790556003820163ffffffff6101008301511663ffffffff1982541617905561282e61012060048401920151916110fb83511515829060ff801983541691151516179055565b60058201608082015160208151916128468385613f0e565b01916000526020600020916000905b8282106129a5575050505061289e9261287f92600660a06107af9401519101553690600401613e08565b85600052600e60205260406000209060ff801983541691151516179055565b33600052600f60205260406000208054600160401b811015610a16577f082c734a2e40d67c6b11dfd884b515a63e994959939a1de369876f22e296da0394612936946128fa886111f98561292497600161291e980181556132c9565b610124356001600160a01b0316151580612990575b61297a575b6104d9888a6139ff565b85613c84565b60405195608087526080870191613f9e565b9261294260643561350a565b606435602086015261295560843561350a565b608435604086015260a435151560608601526001600160a01b031693339381900390a4005b61298b61014435610124358a613fbf565b612914565b506001600160601b036101443516151561290f565b80518051906001600160401b038211610a16576129c68261094e88546132e1565b602090601f8311600114612a0d57926129fe836001959460209487966000926113515750508160011b916000199060031b1c19161790565b87555b01940191019092612855565b908660005260206000209160005b601f1985168110612a65575083602093600196938796938794601f19811610612a4c575b505050811b018755612a01565b015160001960f88460031b161c19169055388080612a3f565b91926020600181928685015181550194019201612a1b565b9190600185016000526020600020906000935b601f1984168510612ad4576001945083601f19811610612abb575b505050811b016001830155612755565b015160001960f88460031b161c191690558b8080612aab565b81810151835560209485019460019093019290910190612a90565b9190846000526020600020906000935b601f1984168510612b40576001945083601f19811610612b27575b505050811b0182556126f8565b015160001960f88460031b161c191690558b8080612b1a565b81810151835560209485019460019093019290910190612aff565b612b6581836132c9565b90549060031b1c600052600c6020526040600020600281015460ff8160d01c169182612bca575b5081612bb5575b50612ba1575b6001016125ea565b94612bad6001916139f0565b959050612b99565b60d81c63ffffffff1660c4351490508f612b93565b61027a919250612be0906040519283809261331b565b6020815191012084516020860120149038612b8c565b63ffffffff9061262e60009161260d565b612c20915060203d60201161053c5761052e818361341d565b8a6104b9565b346103f05760203660031901126103f0576020612c4460043561382b565b6040516001600160a01b039091168152f35b346103f05760003660031901126103f057602060ff600a54166040519015158152f35b346103f05760203660031901126103f057600435612caf61024282600052600460205260018060a01b0360406000205416151590565b612cb88161382b565b6001600160a01b0390811633148015612da1575b8015612d89575b612cdc906140ba565b816000526004602052604060002054168160008215928315612d55575b82825260046020526040822080546001600160a01b03191690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a4612d3d57005b60249060405190637e27328960e01b82526004820152fd5b600083815260066020526040902080546001600160a01b031916905580825260056020526040822082198154019055612cf9565b50612cdc612d9a33611fa68561382b565b9050612cd3565b503381612dad84613664565b1614612ccc565b346103f057610c9b612dc536613244565b9060405192612dd384613402565b60008452610c95838383613689565b346103f05760003660031901126103f057604051632474521560e21b81527f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a60048201523360248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa801561054357612e759160009161236657506139b4565b600a5460ff811615612eb45760ff1916600a557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b604051638dfc202b60e01b8152600490fd5b346103f05760203660031901126103f057600435600052600e602052602060ff604060002054166040519015158152f35b346103f057612f0e612f0836613279565b9061410b565b604080516001600160a01b03939093168352602083019190915290f35b346103f057610c9b612f3c36613244565b91613689565b346103f05760003660031901126103f0576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346103f05760403660031901126103f057612fa0613218565b602435612fac8161382b565b3315158061305b575b8061302e575b613016576001600160a01b039283169282918491167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4600090815260066020526040902080546001600160a01b0319169091179055005b60405163a9fbf51f60e01b8152336004820152602490fd5b5060018060a01b038116600052600760205260406000203360005260205260ff6040600020541615612fbb565b506001600160a01b038116331415612fb5565b346103f05760203660031901126103f0576020612c44600435613664565b346103f05760003660031901126103f0576040516002546000826130af836132e1565b918282526020936001908582821691826000146119e45750506001146130dc57506119739250038361341d565b84915060026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace906000915b858310613121575050611973935082010185611966565b8054838901850152879450869390920191810161310a565b346103f05760203660031901126103f0576004359063ffffffff60e01b82168092036103f057602091632483248360e11b811490811561317b575b5015158152f35b6380ac58cd60e01b8114915081156131c7575b811561319c575b5083613174565b63152a902d60e11b8114915081156131b6575b5083613195565b6301ffc9a760e01b149050836131af565b635b5e139f60e01b8114915061318e565b919082519283825260005b848110613204575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016131e3565b600435906001600160a01b03821682036103f057565b602435906001600160a01b03821682036103f057565b60609060031901126103f0576001600160a01b039060043582811681036103f0579160243590811681036103f0579060443590565b60409060031901126103f0576004359060243590565b9181601f840112156103f0578235916001600160401b0383116103f057602083818601950101116103f057565b359081151582036103f057565b805482101561160f5760005260206000200190600090565b90600182811c92168015613311575b60208310146132fb57565b634e487b7160e01b600052602260045260246000fd5b91607f16916132f0565b80546000939261332a826132e1565b9182825260209360019182811690816000146133915750600114613350575b5050505050565b90939495506000929192528360002092846000945b83861061337d57505050500101903880808080613349565b805485870183015294019385908201613365565b60ff19168685015250505090151560051b010191503880808080613349565b60a081019081106001600160401b03821117610a1657604052565b61014081019081106001600160401b03821117610a1657604052565b60c081019081106001600160401b03821117610a1657604052565b602081019081106001600160401b03821117610a1657604052565b90601f801991011681019081106001600160401b03821117610a1657604052565b6001600160401b038111610a165760051b60200190565b90604091825190613465826133e7565b8193815460ff81161515845260ff602091818160081c16151583870152818160101c1615158487015260181c16151560608501526001908184018054916134ab8361343e565b946134b88151968761341d565b8386526000928352818320908287015b8585106134e8575050505050505060a09160029160808501520154910152565b8684819284516134fc8161027a818a61331b565b8152019301940193916134c8565b6006111561351457565b634e487b7160e01b600052602160045260246000fd5b9060c081019180511515825260208082015115158184015260408201511515604084015260608201511515606084015260808201519360c06080850152845180915260e08401918060e08360051b8701019601926000905b83821061359a57505050505060a08091015191015290565b909192939683806135b760019360df198b82030186528b516131d8565b99019201920190939291613582565b9181601f840112156103f0578235916001600160401b0383116103f0576020808501948460051b0101116103f057565b6001600160401b038111610a1657601f01601f191660200190565b92919261361d826135f6565b9161362b604051938461341d565b8294818452818301116103f0578281602093846000960137010152565b805482101561160f5760005260206000209060021b0190600090565b61366d8161382b565b506000908152600660205260409020546001600160a01b031690565b6001600160a01b03918216929091831561381257600092828452826020956004875260409684888820541696879133151580613779575b509060047fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9284613746575b858352600581528b8320805460010190558683525289812080546001600160a01b0319168517905580a416928383036137255750505050565b6064945051926364283d7b60e01b8452600484015260248301526044820152fd5b600087815260066020526040902080546001600160a01b0319169055848352600581528b832080546000190190556136ec565b919394509150806137d1575b15613795578592918791386136c0565b8786886137b2576024915190637e27328960e01b82526004820152fd5b905163177e802f60e01b81523360048201526024810191909152604490fd5b5033871480156137f6575b806137855750858252600681523385898420541614613785565b5086825260078152878220338352815260ff88832054166137dc565b604051633250574960e11b815260006004820152602490fd5b6000818152600460205260409020546001600160a01b0316908115612d3d575090565b909192833b61385e575050505050565b604051630a85bd0160e11b8082526001600160a01b0393841660048301529383166024820152604481019190915260806064820152602095919093169390919083906138ae9060848301906131d8565b039285816000958187895af1849181613958575b50613922575050503d60001461391a573d6138dc816135f6565b906138ea604051928361341d565b81528091843d92013e5b8051928361391557604051633250574960e11b815260048101849052602490fd5b019050fd5b5060606138f4565b919450915063ffffffff60e01b160361394057503880808080613349565b60249060405190633250574960e11b82526004820152fd5b9091508681813d8311613995575b613970818361341d565b8101031261399157516001600160e01b0319811681036139915790386138c2565b8480fd5b503d613966565b908160209103126103f0575180151581036103f05790565b156139bb57565b60405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606490fd5b60001981146114aa5760010190565b6040805190613a0d82613402565b60008083526001600160a01b0394848616938415613c0e57818352600495602097878952858520541683878215159283613bdb575b81885260058c52888820805460010190558288528a8c5288882080546001600160a01b031916831790557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8880a4613bc4573b613aa3575b50505050505050565b86613ae191859697989994955180938192630a85bd0160e11b96878452338d85015289602485015260448401526080606484015260848301906131d8565b0381878a5af1849181613b84575b50613b4d575050503d600014613b45573d613b09816135f6565b90613b168451928361341d565b81528091863d92013e5b80519485613b3f57505051633250574960e11b81529182015260249150fd5b85925001fd5b506060613b20565b919650915063ffffffff60e01b1603613b6f5750505038808080808080613a9a565b51633250574960e11b81529182015260249150fd5b9091508881813d8311613bbd575b613b9c818361341d565b8101031261399157516001600160e01b031981168103613991579038613aef565b503d613b92565b84516339e3563760e11b8152808801859052602490fd5b600083815260066020526040902080546001600160a01b031916905580885260058c528888208054600019019055613a42565b8351633250574960e11b815260048101849052602490fd5b818110613c31575050565b60008155600101613c26565b9190601f8111613c4c57505050565b613c78926000526020600020906020601f840160051c83019310613c7a575b601f0160051c0190613c26565b565b9091508190613c6b565b9190916000908082526020916008835260408120908551956001600160401b038711613d9f57613cbe87613cb885546132e1565b85613c3d565b8491601f8811600114613d1b5796613d0f9281927ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79899926113515750508160011b916000199060031b1c19161790565b90555b604051908152a1565b9190601f198816848452868420935b818110613d8857509160019391897ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7999a9410613d6f575b505050811b019055613d12565b015160001960f88460031b161c19169055388080613d62565b929387600181928786015181550195019301613d2a565b634e487b7160e01b82526041600452602482fd5b903590601e19813603018212156103f057018035906001600160401b0382116103f0576020019181360383136103f057565b600260095414613df6576002600955565b604051633ee5aeb560e01b8152600490fd5b919060c0838203126103f057604092835191613e23836133e7565b8294613e2e836132bc565b8452602090613e3e8285016132bc565b82860152613e4d8185016132bc565b81860152613e5d606085016132bc565b60608601526001600160401b039260808501358481116103f05785019181601f840112156103f057823590613e918261343e565b95613e9e8251978861341d565b828752858088019360051b860101948486116103f057868101935b868510613ed957505050505050505060a091829160808501520135910152565b84358381116103f057820186603f820112156103f0578891613f0388838886809601359101613611565b815201940193613eb9565b600160401b8211610a1657805491808255828110613f2b57505050565b600091825260209081832093840193015b838110613f495750505050565b8083613f57600193546132e1565b80613f65575b505001613f3c565b601f8082118514613f7c57505081555b8338613f5d565b613f9590848452868420920160051c8201858301613c26565b81835555613f75565b908060209392818452848401376000828201840152601f01601f1916010190565b916001600160601b03169061271080831161405357506001600160a01b039081169283156140345760405193604085018581106001600160401b03821117610a165760405284526020840192835260005260016020526040600020925116906001600160601b0360a01b905160a01b16179055565b60449060405190634b4f842960e11b8252600482015260006024820152fd5b83606491846040519263dfd1fc1b60e01b8452600484015260248301526044820152fd5b1561407e57565b60405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b156140c157565b60405162461bcd60e51b8152602060048201526015602482015274139bdd081bdddb995c881bdc88185c1c1c9bdd9959605a1b6044820152606490fd5b3580151581036103f05790565b6000908152600160205260408120549092916001600160a01b0391828116919060a01c82156141a8575b6001600160601b0316948582029582159083880414811715614194576127109484161561416457505050920490565b91955091506101f4808602958604141715614180575033920490565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b82526011600452602482fd5b508454838116925060a01c614135565b805115908115916141ee575b81156141e0575b81156141d5575090565b606091500151151590565b6040810151151591506141cb565b6020810151151591506141c456fe368a0a902ce0a8be883cdf3d5cbaaae7bbbf3f9f0aa7ad2c137c77c3a72ca6b6a2646970667358221220fbf7def8f3254fc4e66fbca784a5396727c330ed3bb222dd584127dd1172c87f64736f6c63430008150033",
  "devdoc": {
    "details": "NFT contract for customizable stickers - OPTIMIZED for size reduction",
    "errors": {
      "ERC2981InvalidDefaultRoyalty(uint256,uint256)": [
        {
          "details": "The default royalty set is invalid (eg. (numerator / denominator) >= 1)."
        }
      ],
      "ERC2981InvalidDefaultRoyaltyReceiver(address)": [
        {
          "details": "The default royalty receiver is invalid."
        }
      ],
      "ERC2981InvalidTokenRoyalty(uint256,uint256,uint256)": [
        {
          "details": "The royalty set for a specific `tokenId` is invalid (eg. (numerator / denominator) >= 1)."
        }
      ],
      "ERC2981InvalidTokenRoyaltyReceiver(uint256,address)": [
        {
          "details": "The royalty receiver for `tokenId` is invalid."
        }
      ],
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "batchMintLimitedEdition(address[],string,string,uint8,uint8,uint256,(bool,bool,bool,bool,string[],uint256),string[],address,uint96)": {
        "details": "Batch mint stickers for limited editions - OPTIMIZED"
      },
      "burn(uint256)": {
        "details": "Burn token - OPTIMIZED"
      },
      "customizeSticker(uint256,string,string,string)": {
        "details": "Customize a sticker - OPTIMIZED"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getCreatorStickers(address)": {
        "details": "Get creator stickers - OPTIMIZED"
      },
      "getCustomizationHistory(uint256)": {
        "details": "Get customization history - OPTIMIZED"
      },
      "getSticker(uint256)": {
        "details": "Get sticker details - OPTIMIZED"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isStickerCustomizable(uint256)": {
        "details": "Check if sticker is customizable - OPTIMIZED"
      },
      "mintNFT(address,string)": {
        "details": "Mint a basic NFT - OPTIMIZED: simplified"
      },
      "mintStickerNFT(address,string,string,uint8,uint8,bool,uint256,(bool,bool,bool,bool,string[],uint256),string,address,uint96)": {
        "details": "Mint a new sticker NFT - OPTIMIZED for size"
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pause()": {
        "details": "Pause contract - OPTIMIZED"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Get royalty info - OPTIMIZED: simplified"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "Required override for ERC721Royalty"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "Required override for ERC721URIStorage"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "unpause()": {
        "details": "Unpause contract - OPTIMIZED"
      },
      "updateCustomizationOptions(uint256,(bool,bool,bool,bool,string[],uint256))": {
        "details": "Update customization options - OPTIMIZED"
      },
      "updateTokenRoyalty(uint256,address,uint96)": {
        "details": "Update token royalty - OPTIMIZED"
      }
    },
    "stateVariables": {
      "DEFAULT_ROYALTY": {
        "details": "Default royalty percentage (500 = 5%) - OPTIMIZED: removed separate variable"
      },
      "_tokenIdCounter": {
        "details": "Counter for token IDs"
      },
      "accessControl": {
        "details": "Reference to access control contract"
      },
      "creatorStickers": {
        "details": "Mapping from creator to their created stickers"
      },
      "customizationHistory": {
        "details": "Mapping from token ID to customization history"
      },
      "isCustomizable": {
        "details": "Mapping to track if sticker is customizable"
      },
      "stickers": {
        "details": "Mapping from token ID to sticker details"
      }
    },
    "title": "MooveNFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "These NFTs represent customizable stickers created by admins for auction system",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1939,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)1936_storage"
      },
      {
        "astId": 1944,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1936_storage)"
      },
      {
        "astId": 600,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 602,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 606,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 610,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 614,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 620,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1716,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2387,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2277,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "_paused",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 13217,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 13223,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "stickers",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(StickerNFT)13269_storage)"
      },
      {
        "astId": 13230,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "customizationHistory",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_array(t_struct(CustomizationHistory)13294_storage)dyn_storage)"
      },
      {
        "astId": 13235,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "isCustomizable",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 13241,
        "contract": "contracts/MooveNFT.sol:MooveNFT",
        "label": "creatorStickers",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(CustomizationHistory)13294_storage)dyn_storage": {
        "base": "t_struct(CustomizationHistory)13294_storage",
        "encoding": "dynamic_array",
        "label": "struct MooveNFT.CustomizationHistory[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(StickerCategory)13301": {
        "encoding": "inplace",
        "label": "enum MooveNFT.StickerCategory",
        "numberOfBytes": "1"
      },
      "t_enum(StickerRarity)13308": {
        "encoding": "inplace",
        "label": "enum MooveNFT.StickerRarity",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(CustomizationHistory)13294_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MooveNFT.CustomizationHistory[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(CustomizationHistory)13294_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1936_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1936_storage"
      },
      "t_mapping(t_uint256,t_struct(StickerNFT)13269_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MooveNFT.StickerNFT)",
        "numberOfBytes": "32",
        "value": "t_struct(StickerNFT)13269_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CustomizationHistory)13294_storage": {
        "encoding": "inplace",
        "label": "struct MooveNFT.CustomizationHistory",
        "members": [
          {
            "astId": 13285,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "customizer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13287,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "timestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 13289,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "changeDescription",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 13291,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "previousState",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 13293,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "newState",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(CustomizationOptions)13283_storage": {
        "encoding": "inplace",
        "label": "struct MooveNFT.CustomizationOptions",
        "members": [
          {
            "astId": 13271,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "allowColorChange",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13273,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "allowTextChange",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13275,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "allowSizeChange",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13277,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "allowEffectsChange",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13280,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "availableColors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 13282,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "maxTextLength",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoyaltyInfo)1936_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 1933,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1935,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StickerNFT)13269_storage": {
        "encoding": "inplace",
        "label": "struct MooveNFT.StickerNFT",
        "members": [
          {
            "astId": 13247,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 13249,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 13252,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "category",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(StickerCategory)13301"
          },
          {
            "astId": 13255,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "rarity",
            "offset": 1,
            "slot": "2",
            "type": "t_enum(StickerRarity)13308"
          },
          {
            "astId": 13257,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "creator",
            "offset": 2,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 13259,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "creationDate",
            "offset": 22,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 13261,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "isLimitedEdition",
            "offset": 26,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 13263,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "editionSize",
            "offset": 27,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 13265,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "editionNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 13268,
            "contract": "contracts/MooveNFT.sol:MooveNFT",
            "label": "customization",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(CustomizationOptions)13283_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}