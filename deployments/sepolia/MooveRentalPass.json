{
  "address": "0x74aAb47A0439B728A5956A1d7faAc6716F1F18Df",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControl",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "accessCode",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "AccessCodeUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "accessCode",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "PassDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "accessCode",
          "type": "string"
        }
      ],
      "name": "PassExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum MooveRentalPass.VehicleType",
          "name": "vehicleType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "accessCode",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "RentalPassMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "accessCodeToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControl",
      "outputs": [
        {
          "internalType": "contract MooveAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "enum MooveRentalPass.VehicleType[]",
          "name": "vehicleTypes",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "accessCodes",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "locations",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "tokenURIs",
          "type": "string[]"
        }
      ],
      "name": "batchMintRentalPasses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burnRentalPass",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "cleanupExpiredPasses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "deactivatePass",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPassesExpiringSoon",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "expiringPasses",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRentalPass",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum MooveRentalPass.VehicleType",
              "name": "vehicleType",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "accessCode",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "expirationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchasePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "originalOwner",
              "type": "address"
            }
          ],
          "internalType": "struct MooveRentalPass.RentalPass",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accessCode",
          "type": "string"
        }
      ],
      "name": "getTokenByAccessCode",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserActivePasses",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserActivePassesWithDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum MooveRentalPass.VehicleType",
              "name": "vehicleType",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "accessCode",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "expirationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchasePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "originalOwner",
              "type": "address"
            }
          ],
          "internalType": "struct MooveRentalPass.RentalPass[]",
          "name": "activePasses",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accessCode",
          "type": "string"
        }
      ],
      "name": "isAccessCodeValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPassActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isPassExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "enum MooveRentalPass.VehicleType",
          "name": "vehicleType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "passName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "passDescription",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "mintRentalPass",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rentalPasses",
      "outputs": [
        {
          "internalType": "enum MooveRentalPass.VehicleType",
          "name": "vehicleType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "accessCode",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchasePrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "originalOwner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userActivePasses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accessCode",
          "type": "string"
        }
      ],
      "name": "validateAndUseAccessCode",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "enum MooveRentalPass.VehicleType",
          "name": "vehicleType",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x87e3e0906caf04aa80b84ff262c9fb2950daebcd78686e90499b64c54de2f1b5",
  "receipt": {
    "to": null,
    "from": "0x777382955f33Bb8540602E914D9b650C962EF6Cc",
    "contractAddress": "0x74aAb47A0439B728A5956A1d7faAc6716F1F18Df",
    "transactionIndex": 5,
    "gasUsed": "2961430",
    "logsBloom": "0x
    "blockHash": "0x346387403c4b314339ec8ab5785d41ab71dbd00ba5751c94f48c8e97e82cc1d7",
    "transactionHash": "0x87e3e0906caf04aa80b84ff262c9fb2950daebcd78686e90499b64c54de2f1b5",
    "logs": [],
    "blockNumber": 8924738,
    "cumulativeGasUsed": "3066430",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x005672EcC14b09A958742B960Ebb76eBE52Be44A"
  ],
  "numDeployments": 1,
  "solcInputHash": "cf9183c5756e95f1fc92655ea94dc824",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"accessCode\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AccessCodeUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"accessCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PassDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"accessCode\",\"type\":\"string\"}],\"name\":\"PassExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum MooveRentalPass.VehicleType\",\"name\":\"vehicleType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"accessCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"RentalPassMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"accessCodeToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControl\",\"outputs\":[{\"internalType\":\"contract MooveAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"enum MooveRentalPass.VehicleType[]\",\"name\":\"vehicleTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"accessCodes\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"locations\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"}],\"name\":\"batchMintRentalPasses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnRentalPass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"cleanupExpiredPasses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"deactivatePass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPassesExpiringSoon\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"expiringPasses\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRentalPass\",\"outputs\":[{\"components\":[{\"internalType\":\"enum MooveRentalPass.VehicleType\",\"name\":\"vehicleType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"accessCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"originalOwner\",\"type\":\"address\"}],\"internalType\":\"struct MooveRentalPass.RentalPass\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accessCode\",\"type\":\"string\"}],\"name\":\"getTokenByAccessCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserActivePasses\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserActivePassesWithDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"enum MooveRentalPass.VehicleType\",\"name\":\"vehicleType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"accessCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"originalOwner\",\"type\":\"address\"}],\"internalType\":\"struct MooveRentalPass.RentalPass[]\",\"name\":\"activePasses\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accessCode\",\"type\":\"string\"}],\"name\":\"isAccessCodeValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPassActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isPassExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"enum MooveRentalPass.VehicleType\",\"name\":\"vehicleType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"passName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"passDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"mintRentalPass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rentalPasses\",\"outputs\":[{\"internalType\":\"enum MooveRentalPass.VehicleType\",\"name\":\"vehicleType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"accessCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"originalOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userActivePasses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accessCode\",\"type\":\"string\"}],\"name\":\"validateAndUseAccessCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum MooveRentalPass.VehicleType\",\"name\":\"vehicleType\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"NFT contract for 30-day vehicle access passes - NON-TRANSFERABLE\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"batchMintRentalPasses(address[],uint8[],string[],string[],uint256[],string[])\":{\"details\":\"Batch mint rental passes for efficiency\"},\"burnRentalPass(uint256)\":{\"details\":\"Burn a rental pass and cleanup associated data\",\"params\":{\"tokenId\":\"Token ID to burn\"}},\"cleanupExpiredPasses(uint256[])\":{\"details\":\"Cleanup expired passes (can be called by anyone to maintain state)\"},\"deactivatePass(uint256,string)\":{\"details\":\"Deactivate a rental pass (admin function)\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getPassesExpiringSoon(address)\":{\"details\":\"Get passes expiring soon (within next 24 hours)\"},\"getRentalPass(uint256)\":{\"details\":\"Get rental pass details\"},\"getTokenByAccessCode(string)\":{\"details\":\"Get token ID by access code\"},\"getUserActivePasses(address)\":{\"details\":\"Get user's active passes\"},\"getUserActivePassesWithDetails(address)\":{\"details\":\"Get user's active passes with details\"},\"isAccessCodeValid(string)\":{\"details\":\"Check if access code is valid without using it\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isPassExpired(uint256)\":{\"details\":\"Check if pass is expired\"},\"mintRentalPass(address,uint8,string,string,uint256,string)\":{\"details\":\"Mint a rental pass\",\"params\":{\"duration\":\"Duration in seconds\",\"metadataURI\":\"URI for the token metadata\",\"passDescription\":\"Description of the pass\",\"passName\":\"Name of the pass\",\"to\":\"Address to mint to\",\"vehicleType\":\"Type of vehicle\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"Emergency pause contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"Override supportsInterface\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"Override tokenURI\"},\"totalSupply()\":{\"details\":\"Get total supply of rental passes\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"unpause()\":{\"details\":\"Unpause contract\"},\"validateAndUseAccessCode(string)\":{\"details\":\"Validate access code and mark as used\"}},\"stateVariables\":{\"_tokenIdCounter\":{\"details\":\"Counter for token IDs\"},\"accessCodeToToken\":{\"details\":\"Mapping from access code to token ID (for validation)\"},\"accessControl\":{\"details\":\"Reference to access control contract\"},\"isPassActive\":{\"details\":\"Mapping to track if pass is active\"},\"rentalPasses\":{\"details\":\"Mapping from token ID to rental pass details\"},\"userActivePasses\":{\"details\":\"Mapping from user to active passes (for UI display)\"}},\"title\":\"MooveRentalPass\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"These NFTs provide access codes for vehicles and cannot be traded\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MooveRentalPass.sol\":\"MooveRentalPass\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title ERC-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x1b8691e244f6e11d987459993671db0af33e6a29f7805eac6a9925cc6b601957\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"./utils/ERC721Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0x39ed367e54765186281efcfe83e47cf0ad62cc879f10e191360712507125f29a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC-721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {IERC4906-MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x2b27b58570ff2456c7e65022a356c7e4f205bfabf95d0e870855a86587bb1356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721Receiver-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xddab643169f47a2c5291afafcbfdca045d9e6835553307d090bc048b6dabd0ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\\n        (1 << 0x08) | // backspace\\n            (1 << 0x09) | // tab\\n            (1 << 0x0a) | // newline\\n            (1 << 0x0c) | // form feed\\n            (1 << 0x0d) | // carriage return\\n            (1 << 0x22) | // double quote\\n            (1 << 0x5c); // backslash\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress-string} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\\n     *\\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\\n     *\\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\\n     * characters that are not in this range, but other tooling may provide different results.\\n     */\\n    function escapeJSON(string memory input) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(input);\\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\\n        uint256 outputLength = 0;\\n\\n        for (uint256 i; i < buffer.length; ++i) {\\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\\n                output[outputLength++] = \\\"\\\\\\\\\\\";\\n                if (char == 0x08) output[outputLength++] = \\\"b\\\";\\n                else if (char == 0x09) output[outputLength++] = \\\"t\\\";\\n                else if (char == 0x0a) output[outputLength++] = \\\"n\\\";\\n                else if (char == 0x0c) output[outputLength++] = \\\"f\\\";\\n                else if (char == 0x0d) output[outputLength++] = \\\"r\\\";\\n                else if (char == 0x5c) output[outputLength++] = \\\"\\\\\\\\\\\";\\n                else if (char == 0x22) {\\n                    // solhint-disable-next-line quotes\\n                    output[outputLength++] = '\\\"';\\n                }\\n            } else {\\n                output[outputLength++] = char;\\n            }\\n        }\\n        // write the actual length and deallocate unused memory\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(output, outputLength)\\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\\n        }\\n\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81c274a60a7ae232ae3dc9ff3a4011b4849a853c13b0832cd3351bb1bb2f0dae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/MooveAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MooveAccessControl\\r\\n * @dev Centralized access control system for the Moove ecosystem\\r\\n * @notice Manages roles, permissions, and security features across all Moove contracts\\r\\n */\\r\\ncontract MooveAccessControl is AccessControl, Pausable, ReentrancyGuard {\\r\\n    // ============= ROLE DEFINITIONS =============\\r\\n\\r\\n    /// @dev Master admin role - can grant/revoke all other roles\\r\\n    bytes32 public constant MASTER_ADMIN_ROLE = keccak256(\\\"MASTER_ADMIN_ROLE\\\");\\r\\n\\r\\n    /// @dev NFT minting permissions\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n\\r\\n    /// @dev Auction and marketplace management\\r\\n    bytes32 public constant AUCTION_MANAGER_ROLE =\\r\\n        keccak256(\\\"AUCTION_MANAGER_ROLE\\\");\\r\\n\\r\\n    /// @dev Vehicle customization management\\r\\n    bytes32 public constant CUSTOMIZATION_ADMIN_ROLE =\\r\\n        keccak256(\\\"CUSTOMIZATION_ADMIN_ROLE\\\");\\r\\n\\r\\n    /// @dev Price and fee management\\r\\n    bytes32 public constant PRICE_MANAGER_ROLE =\\r\\n        keccak256(\\\"PRICE_MANAGER_ROLE\\\");\\r\\n\\r\\n    /// @dev Emergency pause permissions\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\r\\n\\r\\n    /// @dev Fund withdrawal permissions\\r\\n    bytes32 public constant WITHDRAWER_ROLE = keccak256(\\\"WITHDRAWER_ROLE\\\");\\r\\n\\r\\n    /// @dev Contract upgrade permissions\\r\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\r\\n\\r\\n    /// @dev Metadata management permissions\\r\\n    bytes32 public constant METADATA_MANAGER_ROLE =\\r\\n        keccak256(\\\"METADATA_MANAGER_ROLE\\\");\\r\\n\\r\\n    bytes32 public constant TRADER_ROLE = keccak256(\\\"TRADER_ROLE\\\");\\r\\n    bytes32 public constant MARKETPLACE_MANAGER_ROLE =\\r\\n        keccak256(\\\"MARKETPLACE_MANAGER_ROLE\\\");\\r\\n\\r\\n    // ============= STATE VARIABLES =============\\r\\n\\r\\n    /// @dev Mapping to track authorized contract addresses\\r\\n    mapping(address => bool) public authorizedContracts;\\r\\n\\r\\n    /// @dev Mapping to track emergency contacts\\r\\n    mapping(address => bool) public emergencyContacts;\\r\\n\\r\\n    /// @dev Time lock duration for critical operations (in seconds)\\r\\n    uint256 public timeLockDuration = 24 hours;\\r\\n\\r\\n    /// @dev Mapping to track time-locked operations\\r\\n    mapping(bytes32 => uint256) public timelockExecutions;\\r\\n\\r\\n    /// @dev Mapping to track role members for enumeration (if needed)\\r\\n    mapping(bytes32 => address[]) private _roleMembers;\\r\\n    mapping(bytes32 => mapping(address => uint256)) private _roleMemberIndex;\\r\\n\\r\\n    /// @dev Global pause state that affects all contracts\\r\\n    bool public globalPause = false;\\r\\n\\r\\n    /// @dev Maximum number of admins allowed\\r\\n    uint256 public constant MAX_ADMINS = 10;\\r\\n\\r\\n    /// @dev Current number of master admins\\r\\n    uint256 public masterAdminCount = 0;\\r\\n\\r\\n    // ============= EVENTS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a contract is authorized or deauthorized\\r\\n     */\\r\\n    event ContractAuthorizationChanged(\\r\\n        address indexed contractAddress,\\r\\n        bool authorized\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when an emergency contact is added or removed\\r\\n     */\\r\\n    event EmergencyContactChanged(address indexed contact, bool added);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when timelock duration is updated\\r\\n     */\\r\\n    event TimeLockDurationUpdated(uint256 oldDuration, uint256 newDuration);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a time-locked operation is scheduled\\r\\n     */\\r\\n    event TimeLockOperationScheduled(\\r\\n        bytes32 indexed operationId,\\r\\n        uint256 executeAfter\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a time-locked operation is executed\\r\\n     */\\r\\n    event TimeLockOperationExecuted(bytes32 indexed operationId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when global pause state changes\\r\\n     */\\r\\n    event GlobalPauseStateChanged(bool paused);\\r\\n\\r\\n    // ============= MODIFIERS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if caller is an authorized contract\\r\\n     */\\r\\n    modifier onlyAuthorizedContract() {\\r\\n        require(authorizedContracts[msg.sender], \\\"Not authorized contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if caller is emergency contact\\r\\n     */\\r\\n    modifier onlyEmergencyContact() {\\r\\n        require(\\r\\n            emergencyContacts[msg.sender] ||\\r\\n                hasRole(MASTER_ADMIN_ROLE, msg.sender),\\r\\n            \\\"Not emergency contact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to ensure global pause is not active\\r\\n     */\\r\\n    modifier whenNotGloballyPaused() {\\r\\n        require(!globalPause, \\\"Globally paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier for time-locked operations\\r\\n     */\\r\\n    modifier onlyAfterTimelock(bytes32 operationId) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] != 0 &&\\r\\n                block.timestamp >= timelockExecutions[operationId],\\r\\n            \\\"Operation not ready or not scheduled\\\"\\r\\n        );\\r\\n        _;\\r\\n        delete timelockExecutions[operationId];\\r\\n    }\\r\\n\\r\\n    // ============= CONSTRUCTOR =============\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor sets up initial roles and admin\\r\\n     * @param initialAdmin Address to be granted master admin role\\r\\n     */\\r\\n    constructor(address initialAdmin) {\\r\\n        require(initialAdmin != address(0), \\\"Invalid admin address\\\");\\r\\n\\r\\n        // Grant master admin role to initial admin\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialAdmin);\\r\\n        _grantRole(MASTER_ADMIN_ROLE, initialAdmin);\\r\\n\\r\\n        // Set master admin as role admin for all roles\\r\\n        _setRoleAdmin(MINTER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(AUCTION_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(CUSTOMIZATION_ADMIN_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(PRICE_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(PAUSER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(WITHDRAWER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(UPGRADER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(METADATA_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(TRADER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(MARKETPLACE_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n\\r\\n        // Add initial admin as emergency contact\\r\\n        emergencyContacts[initialAdmin] = true;\\r\\n        masterAdminCount = 1;\\r\\n\\r\\n        emit EmergencyContactChanged(initialAdmin, true);\\r\\n    }\\r\\n\\r\\n    // ============= ROLE MANAGEMENT =============\\r\\n\\r\\n    /**\\r\\n     * @dev Grant master admin role with safety checks\\r\\n     * @param account Address to grant master admin role\\r\\n     */\\r\\n    function grantMasterAdmin(\\r\\n        address account\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(account != address(0), \\\"Invalid address\\\");\\r\\n        require(masterAdminCount < MAX_ADMINS, \\\"Too many admins\\\");\\r\\n        require(!hasRole(MASTER_ADMIN_ROLE, account), \\\"Already master admin\\\");\\r\\n\\r\\n        _grantRole(MASTER_ADMIN_ROLE, account);\\r\\n        emergencyContacts[account] = true;\\r\\n        masterAdminCount++;\\r\\n\\r\\n        emit EmergencyContactChanged(account, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revoke master admin role with safety checks\\r\\n     * @param account Address to revoke master admin role from\\r\\n     */\\r\\n    function revokeMasterAdmin(\\r\\n        address account\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(account != msg.sender, \\\"Cannot revoke own admin\\\");\\r\\n        require(masterAdminCount > 1, \\\"Cannot remove last admin\\\");\\r\\n        require(hasRole(MASTER_ADMIN_ROLE, account), \\\"Not master admin\\\");\\r\\n\\r\\n        _revokeRole(MASTER_ADMIN_ROLE, account);\\r\\n        emergencyContacts[account] = false;\\r\\n        masterAdminCount--;\\r\\n\\r\\n        emit EmergencyContactChanged(account, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch grant roles to multiple addresses\\r\\n     * @param role The role to grant\\r\\n     * @param accounts Array of addresses to grant the role to\\r\\n     */\\r\\n    function batchGrantRole(\\r\\n        bytes32 role,\\r\\n        address[] calldata accounts\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            if (!hasRole(role, accounts[i])) {\\r\\n                _grantRole(role, accounts[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch revoke roles from multiple addresses\\r\\n     * @param role The role to revoke\\r\\n     * @param accounts Array of addresses to revoke the role from\\r\\n     */\\r\\n    function batchRevokeRole(\\r\\n        bytes32 role,\\r\\n        address[] calldata accounts\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            if (hasRole(role, accounts[i])) {\\r\\n                _revokeRole(role, accounts[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============= CONTRACT AUTHORIZATION =============\\r\\n\\r\\n    /**\\r\\n     * @dev Authorize a contract to interact with the system\\r\\n     * @param contractAddress Address of the contract to authorize\\r\\n     */\\r\\n    function authorizeContract(\\r\\n        address contractAddress\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(contractAddress != address(0), \\\"Invalid contract address\\\");\\r\\n        require(contractAddress.code.length > 0, \\\"Not a contract\\\");\\r\\n\\r\\n        authorizedContracts[contractAddress] = true;\\r\\n        emit ContractAuthorizationChanged(contractAddress, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deauthorize a contract\\r\\n     * @param contractAddress Address of the contract to deauthorize\\r\\n     */\\r\\n    function deauthorizeContract(\\r\\n        address contractAddress\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        authorizedContracts[contractAddress] = false;\\r\\n        emit ContractAuthorizationChanged(contractAddress, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch authorize multiple contracts\\r\\n     * @param contractAddresses Array of contract addresses to authorize\\r\\n     */\\r\\n    function batchAuthorizeContracts(\\r\\n        address[] calldata contractAddresses\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < contractAddresses.length; i++) {\\r\\n            if (\\r\\n                contractAddresses[i] != address(0) &&\\r\\n                contractAddresses[i].code.length > 0\\r\\n            ) {\\r\\n                authorizedContracts[contractAddresses[i]] = true;\\r\\n                emit ContractAuthorizationChanged(contractAddresses[i], true);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if user is able to trade\\r\\n     * @param account Account check\\r\\n     */\\r\\n\\r\\n    function canTrade(\\r\\n        address account\\r\\n    ) external view returns (bool hasTraderRole) {\\r\\n        return\\r\\n            hasRole(TRADER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if user is able to use Marketplace\\r\\n     * @param account Account check\\r\\n     */\\r\\n\\r\\n    function canManageMarketplace(\\r\\n        address account\\r\\n    ) external view returns (bool hasMarketplaceRole) {\\r\\n        return\\r\\n            hasRole(MARKETPLACE_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    // ============= EMERGENCY MANAGEMENT =============\\r\\n\\r\\n    /**\\r\\n     * @dev Add emergency contact\\r\\n     * @param contact Address to add as emergency contact\\r\\n     */\\r\\n    function addEmergencyContact(\\r\\n        address contact\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(contact != address(0), \\\"Invalid contact address\\\");\\r\\n\\r\\n        emergencyContacts[contact] = true;\\r\\n        emit EmergencyContactChanged(contact, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove emergency contact\\r\\n     * @param contact Address to remove as emergency contact\\r\\n     */\\r\\n    function removeEmergencyContact(\\r\\n        address contact\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        emergencyContacts[contact] = false;\\r\\n        emit EmergencyContactChanged(contact, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency pause - can be called by emergency contacts\\r\\n     */\\r\\n    function emergencyPause() external onlyEmergencyContact {\\r\\n        globalPause = true;\\r\\n        _pause();\\r\\n        emit GlobalPauseStateChanged(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency unpause - requires master admin\\r\\n     */\\r\\n    function emergencyUnpause() external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        globalPause = false;\\r\\n        _unpause();\\r\\n        emit GlobalPauseStateChanged(false);\\r\\n    }\\r\\n\\r\\n    // ============= TIME LOCK OPERATIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Schedule a time-locked operation\\r\\n     * @param operationId Unique identifier for the operation\\r\\n     */\\r\\n    function scheduleTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] == 0,\\r\\n            \\\"Operation already scheduled\\\"\\r\\n        );\\r\\n\\r\\n        uint256 executeAfter = block.timestamp + timeLockDuration;\\r\\n        timelockExecutions[operationId] = executeAfter;\\r\\n\\r\\n        emit TimeLockOperationScheduled(operationId, executeAfter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Cancel a time-locked operation\\r\\n     * @param operationId Unique identifier for the operation\\r\\n     */\\r\\n    function cancelTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] != 0,\\r\\n            \\\"Operation not scheduled\\\"\\r\\n        );\\r\\n\\r\\n        delete timelockExecutions[operationId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update timelock duration\\r\\n     * @param newDuration New duration in seconds\\r\\n     */\\r\\n    function updateTimeLockDuration(\\r\\n        uint256 newDuration\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            newDuration >= 1 hours && newDuration <= 7 days,\\r\\n            \\\"Invalid duration\\\"\\r\\n        );\\r\\n\\r\\n        uint256 oldDuration = timeLockDuration;\\r\\n        timeLockDuration = newDuration;\\r\\n\\r\\n        emit TimeLockDurationUpdated(oldDuration, newDuration);\\r\\n    }\\r\\n\\r\\n    // ============= QUERY FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address has minting permissions\\r\\n     * @param account Address to check\\r\\n     * @return hasMinterRole True if address can mint\\r\\n     */\\r\\n    function canMint(\\r\\n        address account\\r\\n    ) external view returns (bool hasMinterRole) {\\r\\n        return\\r\\n            hasRole(MINTER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage auctions\\r\\n     * @param account Address to check\\r\\n     * @return hasAuctionRole True if address can manage auctions\\r\\n     */\\r\\n    function canManageAuctions(\\r\\n        address account\\r\\n    ) external view returns (bool hasAuctionRole) {\\r\\n        return\\r\\n            hasRole(AUCTION_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage customizations\\r\\n     * @param account Address to check\\r\\n     * @return hasCustomizationRole True if address can manage customizations\\r\\n     */\\r\\n    function canManageCustomizations(\\r\\n        address account\\r\\n    ) external view returns (bool hasCustomizationRole) {\\r\\n        return\\r\\n            hasRole(CUSTOMIZATION_ADMIN_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage prices\\r\\n     * @param account Address to check\\r\\n     * @return hasPriceRole True if address can manage prices\\r\\n     */\\r\\n    function canManagePrices(\\r\\n        address account\\r\\n    ) external view returns (bool hasPriceRole) {\\r\\n        return\\r\\n            hasRole(PRICE_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can pause contracts\\r\\n     * @param account Address to check\\r\\n     * @return hasPauserRole True if address can pause\\r\\n     */\\r\\n    function canPause(\\r\\n        address account\\r\\n    ) external view returns (bool hasPauserRole) {\\r\\n        return\\r\\n            hasRole(PAUSER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account) ||\\r\\n            emergencyContacts[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can withdraw funds\\r\\n     * @param account Address to check\\r\\n     * @return hasWithdrawRole True if address can withdraw\\r\\n     */\\r\\n    function canWithdraw(\\r\\n        address account\\r\\n    ) external view returns (bool hasWithdrawRole) {\\r\\n        return\\r\\n            hasRole(WITHDRAWER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get all role members for a specific role\\r\\n     * @param role The role to query\\r\\n     * @return members Array of addresses with the role\\r\\n     */\\r\\n    function getRoleMembers(\\r\\n        bytes32 role\\r\\n    ) external view returns (address[] memory members) {\\r\\n        return _roleMembers[role];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get number of members for a specific role\\r\\n     * @param role The role to query\\r\\n     * @return count Number of addresses with the role\\r\\n     */\\r\\n    function getRoleMemberCount(\\r\\n        bytes32 role\\r\\n    ) external view returns (uint256 count) {\\r\\n        return _roleMembers[role].length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Execute time-locked operation validation\\r\\n     * @param operationId The operation ID to validate\\r\\n     */\\r\\n    function executeTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) onlyAfterTimelock(operationId) {\\r\\n        emit TimeLockOperationExecuted(operationId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if the system is in global pause state\\r\\n     * @return isPaused True if globally paused\\r\\n     */\\r\\n    function isGloballyPaused() external view returns (bool isPaused) {\\r\\n        return globalPause;\\r\\n    }\\r\\n\\r\\n    // ============= EXTERNAL VALIDATION FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Validate that caller has required role (called by other contracts)\\r\\n     * @param role The role to check\\r\\n     * @param account The account to validate\\r\\n     */\\r\\n    function validateRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) external view onlyAuthorizedContract {\\r\\n        require(\\r\\n            hasRole(role, account) || hasRole(MASTER_ADMIN_ROLE, account),\\r\\n            \\\"Access denied\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validate that system is not paused (called by other contracts)\\r\\n     */\\r\\n    function validateNotPaused() external view onlyAuthorizedContract {\\r\\n        require(!globalPause && !paused(), \\\"System paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override _grantRole to track role members\\r\\n     */\\r\\n    function _grantRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) internal override returns (bool) {\\r\\n        super._grantRole(role, account);\\r\\n\\r\\n        // Track role member for enumeration\\r\\n        if (_roleMemberIndex[role][account] == 0) {\\r\\n            _roleMembers[role].push(account);\\r\\n            _roleMemberIndex[role][account] = _roleMembers[role].length;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override _revokeRole to untrack role members\\r\\n     */\\r\\n    function _revokeRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) internal override returns (bool) {\\r\\n        super._revokeRole(role, account);\\r\\n\\r\\n        // Remove from role member tracking\\r\\n        uint256 index = _roleMemberIndex[role][account];\\r\\n        if (index > 0) {\\r\\n            uint256 lastIndex = _roleMembers[role].length;\\r\\n            address lastMember = _roleMembers[role][lastIndex - 1];\\r\\n\\r\\n            // Move last member to the position of the removed member\\r\\n            _roleMembers[role][index - 1] = lastMember;\\r\\n            _roleMemberIndex[role][lastMember] = index;\\r\\n\\r\\n            // Remove last element\\r\\n            _roleMembers[role].pop();\\r\\n            delete _roleMemberIndex[role][account];\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0fa63b562a209458f5838960171dc2a40198e14208332f6a742a7f399f4e7769\",\"license\":\"MIT\"},\"contracts/MooveRentalPass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"./MooveAccessControl.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MooveRentalPass\\r\\n * @dev NFT contract for 30-day vehicle access passes - NON-TRANSFERABLE\\r\\n * @notice These NFTs provide access codes for vehicles and cannot be traded\\r\\n */\\r\\ncontract MooveRentalPass is\\r\\n    ERC721,\\r\\n    ERC721URIStorage,\\r\\n    ReentrancyGuard,\\r\\n    Pausable\\r\\n{\\r\\n    // ============= STATE VARIABLES =============\\r\\n\\r\\n    /// @dev Reference to access control contract\\r\\n    MooveAccessControl public immutable accessControl;\\r\\n\\r\\n    /// @dev Counter for token IDs\\r\\n    uint256 private _tokenIdCounter = 1;\\r\\n\\r\\n    /// @dev Mapping from token ID to rental pass details\\r\\n    mapping(uint256 => RentalPass) public rentalPasses;\\r\\n\\r\\n    /// @dev Mapping from access code to token ID (for validation)\\r\\n    mapping(string => uint256) public accessCodeToToken;\\r\\n\\r\\n    /// @dev Mapping from user to active passes (for UI display)\\r\\n    mapping(address => uint256[]) public userActivePasses;\\r\\n\\r\\n    /// @dev Mapping to track if pass is active\\r\\n    mapping(uint256 => bool) public isPassActive;\\r\\n\\r\\n    // ============= STRUCTS =============\\r\\n\\r\\n    struct RentalPass {\\r\\n        VehicleType vehicleType;\\r\\n        string accessCode;\\r\\n        uint256 expirationDate;\\r\\n        uint256 purchasePrice;\\r\\n        string location;\\r\\n        bool isActive;\\r\\n        address originalOwner;\\r\\n    }\\r\\n\\r\\n    enum VehicleType {\\r\\n        BIKE,\\r\\n        SCOOTER,\\r\\n        MONOPATTINO\\r\\n    }\\r\\n\\r\\n    // ============= EVENTS =============\\r\\n\\r\\n    event RentalPassMinted(\\r\\n        uint256 indexed tokenId,\\r\\n        address indexed to,\\r\\n        VehicleType vehicleType,\\r\\n        string accessCode,\\r\\n        string location, // Fixed: string instead of uint256\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    event AccessCodeUsed(\\r\\n        uint256 indexed tokenId,\\r\\n        string accessCode,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    event PassExpired(uint256 indexed tokenId, string accessCode);\\r\\n\\r\\n    event PassDeactivated(\\r\\n        uint256 indexed tokenId,\\r\\n        string accessCode,\\r\\n        string reason\\r\\n    );\\r\\n\\r\\n    // ============= MODIFIERS =============\\r\\n\\r\\n    modifier onlyAccessControlRole(bytes32 role) {\\r\\n        accessControl.validateRole(role, msg.sender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyValidToken(uint256 tokenId) {\\r\\n        require(_ownerOf(tokenId) != address(0), \\\"Token does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyNonExpired(uint256 tokenId) {\\r\\n        require(\\r\\n            block.timestamp < rentalPasses[tokenId].expirationDate,\\r\\n            \\\"Pass expired\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============= CONSTRUCTOR =============\\r\\n\\r\\n    constructor(address _accessControl) ERC721(\\\"Moove Rental Pass\\\", \\\"MRP\\\") {\\r\\n        require(_accessControl != address(0), \\\"Invalid access control address\\\");\\r\\n        accessControl = MooveAccessControl(_accessControl);\\r\\n    }\\r\\n\\r\\n    // ============= MINTING FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to mint a new rental pass NFT\\r\\n     */\\r\\n    function _mintRentalPass(\\r\\n        address to,\\r\\n        VehicleType vehicleType,\\r\\n        string memory accessCode,\\r\\n        string memory location,\\r\\n        uint256 price,\\r\\n        string memory _tokenURI\\r\\n    ) internal {\\r\\n        require(to != address(0), \\\"Invalid recipient address\\\");\\r\\n        require(bytes(accessCode).length > 0, \\\"Access code required\\\");\\r\\n        require(\\r\\n            accessCodeToToken[accessCode] == 0,\\r\\n            \\\"Access code already exists\\\"\\r\\n        );\\r\\n        require(bytes(location).length > 0, \\\"Location required\\\");\\r\\n\\r\\n        uint256 tokenId = _tokenIdCounter++;\\r\\n        uint256 expirationDate = block.timestamp + 30 days;\\r\\n\\r\\n        // Create rental pass struct\\r\\n        rentalPasses[tokenId] = RentalPass({\\r\\n            vehicleType: vehicleType,\\r\\n            accessCode: accessCode,\\r\\n            expirationDate: expirationDate,\\r\\n            purchasePrice: price,\\r\\n            location: location,\\r\\n            isActive: true,\\r\\n            originalOwner: to\\r\\n        });\\r\\n\\r\\n        // Map access code to token ID\\r\\n        accessCodeToToken[accessCode] = tokenId;\\r\\n        isPassActive[tokenId] = true;\\r\\n\\r\\n        // Add to user's active passes\\r\\n        userActivePasses[to].push(tokenId);\\r\\n\\r\\n        // Mint the NFT\\r\\n        _mint(to, tokenId);\\r\\n\\r\\n        // Set token URI\\r\\n        _setTokenURI(tokenId, _tokenURI);\\r\\n\\r\\n        // Emit event\\r\\n        emit RentalPassMinted(\\r\\n            tokenId,\\r\\n            to,\\r\\n            vehicleType,\\r\\n            accessCode,\\r\\n            location,\\r\\n            price\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mint a rental pass\\r\\n     * @param to Address to mint to\\r\\n     * @param vehicleType Type of vehicle\\r\\n     * @param passName Name of the pass\\r\\n     * @param passDescription Description of the pass\\r\\n     * @param duration Duration in seconds\\r\\n     * @param metadataURI URI for the token metadata\\r\\n     */\\r\\n    function mintRentalPass(\\r\\n        address to,\\r\\n        VehicleType vehicleType,\\r\\n        string memory passName,\\r\\n        string memory passDescription,\\r\\n        uint256 duration,\\r\\n        string memory metadataURI\\r\\n    ) external onlyAccessControlRole(accessControl.MINTER_ROLE()) nonReentrant {\\r\\n        _mintRentalPass(\\r\\n            to,\\r\\n            vehicleType,\\r\\n            passName,\\r\\n            passDescription,\\r\\n            duration,\\r\\n            metadataURI\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch mint rental passes for efficiency\\r\\n     */\\r\\n    function batchMintRentalPasses(\\r\\n        address[] calldata recipients,\\r\\n        VehicleType[] calldata vehicleTypes,\\r\\n        string[] calldata accessCodes,\\r\\n        string[] calldata locations,\\r\\n        uint256[] calldata prices,\\r\\n        string[] calldata tokenURIs\\r\\n    ) external onlyAccessControlRole(accessControl.MINTER_ROLE()) nonReentrant {\\r\\n        require(\\r\\n            recipients.length == vehicleTypes.length,\\r\\n            \\\"Array length mismatch\\\"\\r\\n        );\\r\\n        require(\\r\\n            recipients.length == accessCodes.length,\\r\\n            \\\"Array length mismatch\\\"\\r\\n        );\\r\\n        require(recipients.length == locations.length, \\\"Array length mismatch\\\");\\r\\n        require(recipients.length == prices.length, \\\"Array length mismatch\\\");\\r\\n        require(recipients.length == tokenURIs.length, \\\"Array length mismatch\\\");\\r\\n        require(recipients.length <= 50, \\\"Batch size too large\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < recipients.length; i++) {\\r\\n            _mintRentalPass(\\r\\n                recipients[i],\\r\\n                vehicleTypes[i],\\r\\n                accessCodes[i],\\r\\n                locations[i],\\r\\n                prices[i],\\r\\n                tokenURIs[i]\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============= ACCESS VALIDATION =============\\r\\n\\r\\n    /**\\r\\n     * @dev Validate access code and mark as used\\r\\n     */\\r\\n    function validateAndUseAccessCode(\\r\\n        string memory accessCode\\r\\n    )\\r\\n        external\\r\\n        onlyAccessControlRole(accessControl.MINTER_ROLE())\\r\\n        returns (uint256 tokenId, address owner, VehicleType vehicleType)\\r\\n    {\\r\\n        tokenId = accessCodeToToken[accessCode];\\r\\n        require(tokenId != 0, \\\"Invalid access code\\\");\\r\\n\\r\\n        RentalPass storage pass = rentalPasses[tokenId];\\r\\n        require(pass.isActive, \\\"Pass is not active\\\");\\r\\n        require(block.timestamp < pass.expirationDate, \\\"Pass expired\\\");\\r\\n\\r\\n        owner = _ownerOf(tokenId);\\r\\n        vehicleType = pass.vehicleType;\\r\\n\\r\\n        emit AccessCodeUsed(tokenId, accessCode, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if access code is valid without using it\\r\\n     */\\r\\n    function isAccessCodeValid(\\r\\n        string memory accessCode\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool valid, uint256 tokenId, uint256 expirationDate)\\r\\n    {\\r\\n        tokenId = accessCodeToToken[accessCode];\\r\\n        if (tokenId == 0) return (false, 0, 0);\\r\\n\\r\\n        RentalPass memory pass = rentalPasses[tokenId];\\r\\n        valid = pass.isActive && block.timestamp < pass.expirationDate;\\r\\n        expirationDate = pass.expirationDate;\\r\\n    }\\r\\n\\r\\n    // ============= PASS MANAGEMENT =============\\r\\n\\r\\n    /**\\r\\n     * @dev Deactivate a rental pass (admin function)\\r\\n     */\\r\\n    function deactivatePass(\\r\\n        uint256 tokenId,\\r\\n        string memory reason\\r\\n    )\\r\\n        external\\r\\n        onlyAccessControlRole(accessControl.MASTER_ADMIN_ROLE())\\r\\n        onlyValidToken(tokenId)\\r\\n    {\\r\\n        RentalPass storage pass = rentalPasses[tokenId];\\r\\n        require(pass.isActive, \\\"Pass already inactive\\\");\\r\\n\\r\\n        pass.isActive = false;\\r\\n        isPassActive[tokenId] = false;\\r\\n\\r\\n        // Remove from user's active passes\\r\\n        _removeFromActivePasses(_ownerOf(tokenId), tokenId);\\r\\n\\r\\n        emit PassDeactivated(tokenId, pass.accessCode, reason);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Cleanup expired passes (can be called by anyone to maintain state)\\r\\n     */\\r\\n    function cleanupExpiredPasses(uint256[] calldata tokenIds) external {\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            uint256 tokenId = tokenIds[i];\\r\\n            if (_ownerOf(tokenId) != address(0)) {\\r\\n                RentalPass storage pass = rentalPasses[tokenId];\\r\\n                if (pass.isActive && block.timestamp >= pass.expirationDate) {\\r\\n                    pass.isActive = false;\\r\\n                    isPassActive[tokenId] = false;\\r\\n\\r\\n                    // Remove from user's active passes\\r\\n                    _removeFromActivePasses(_ownerOf(tokenId), tokenId);\\r\\n\\r\\n                    emit PassExpired(tokenId, pass.accessCode);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============= VIEW FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Get rental pass details\\r\\n     */\\r\\n    function getRentalPass(\\r\\n        uint256 tokenId\\r\\n    ) external view onlyValidToken(tokenId) returns (RentalPass memory) {\\r\\n        return rentalPasses[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get user's active passes\\r\\n     */\\r\\n    function getUserActivePasses(\\r\\n        address user\\r\\n    ) external view returns (uint256[] memory) {\\r\\n        return userActivePasses[user];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get user's active passes with details\\r\\n     */\\r\\n    function getUserActivePassesWithDetails(\\r\\n        address user\\r\\n    ) external view returns (RentalPass[] memory activePasses) {\\r\\n        uint256[] memory tokenIds = userActivePasses[user];\\r\\n        activePasses = new RentalPass[](tokenIds.length);\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            activePasses[i] = rentalPasses[tokenIds[i]];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get total supply of rental passes\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return _tokenIdCounter - 1; // Subtract 1 because counter starts at 1\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if pass is expired\\r\\n     */\\r\\n    function isPassExpired(\\r\\n        uint256 tokenId\\r\\n    ) external view onlyValidToken(tokenId) returns (bool) {\\r\\n        return block.timestamp >= rentalPasses[tokenId].expirationDate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get token ID by access code\\r\\n     */\\r\\n    function getTokenByAccessCode(\\r\\n        string memory accessCode\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 tokenId = accessCodeToToken[accessCode];\\r\\n        require(tokenId != 0, \\\"Access code not found\\\");\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get passes expiring soon (within next 24 hours)\\r\\n     */\\r\\n    function getPassesExpiringSoon(\\r\\n        address user\\r\\n    ) external view returns (uint256[] memory expiringPasses) {\\r\\n        uint256[] memory userPasses = userActivePasses[user];\\r\\n        uint256 count = 0;\\r\\n\\r\\n        // Count expiring passes\\r\\n        for (uint256 i = 0; i < userPasses.length; i++) {\\r\\n            if (\\r\\n                rentalPasses[userPasses[i]].expirationDate <=\\r\\n                block.timestamp + 24 hours\\r\\n            ) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Fill array\\r\\n        expiringPasses = new uint256[](count);\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i < userPasses.length; i++) {\\r\\n            if (\\r\\n                rentalPasses[userPasses[i]].expirationDate <=\\r\\n                block.timestamp + 24 hours\\r\\n            ) {\\r\\n                expiringPasses[index++] = userPasses[i];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============= INTERNAL FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Remove token from user's active passes array\\r\\n     */\\r\\n    function _removeFromActivePasses(address user, uint256 tokenId) internal {\\r\\n        uint256[] storage passes = userActivePasses[user];\\r\\n        for (uint256 i = 0; i < passes.length; i++) {\\r\\n            if (passes[i] == tokenId) {\\r\\n                // Move last element to current position and remove last element\\r\\n                passes[i] = passes[passes.length - 1];\\r\\n                passes.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============= OVERRIDE FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Override _update to prevent transfers but allow minting (OpenZeppelin v5.x)\\r\\n     */\\r\\n    function _update(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        address auth\\r\\n    ) internal override returns (address) {\\r\\n        address from = _ownerOf(tokenId);\\r\\n\\r\\n        // Allow minting (from == address(0)) but block all transfers\\r\\n        if (from != address(0)) {\\r\\n            revert(\\\"Rental passes are non-transferable\\\");\\r\\n        }\\r\\n\\r\\n        return super._update(to, tokenId, auth);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override tokenURI\\r\\n     */\\r\\n    function tokenURI(\\r\\n        uint256 tokenId\\r\\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override supportsInterface\\r\\n     */\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view override(ERC721, ERC721URIStorage) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    // ============= BURN FUNCTIONALITY =============\\r\\n\\r\\n    /**\\r\\n     * @dev Burn a rental pass and cleanup associated data\\r\\n     * @param tokenId Token ID to burn\\r\\n     */\\r\\n    function burnRentalPass(uint256 tokenId) external {\\r\\n        require(_ownerOf(tokenId) != address(0), \\\"Token does not exist\\\");\\r\\n        require(\\r\\n            ownerOf(tokenId) == msg.sender ||\\r\\n                accessControl.hasRole(\\r\\n                    accessControl.MASTER_ADMIN_ROLE(),\\r\\n                    msg.sender\\r\\n                ),\\r\\n            \\\"Not authorized to burn\\\"\\r\\n        );\\r\\n\\r\\n        // Get pass data before burning (needed for cleanup)\\r\\n        RentalPass storage pass = rentalPasses[tokenId];\\r\\n        address owner = ownerOf(tokenId);\\r\\n\\r\\n        // Remove from user's active passes\\r\\n        _removeFromActivePasses(owner, tokenId);\\r\\n\\r\\n        // Cleanup mapping data\\r\\n        delete accessCodeToToken[pass.accessCode];\\r\\n        delete rentalPasses[tokenId];\\r\\n        delete isPassActive[tokenId];\\r\\n\\r\\n        // Call parent _burn function (this will work in v5)\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    // ============= EMERGENCY FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency pause contract\\r\\n     */\\r\\n    function pause()\\r\\n        external\\r\\n        onlyAccessControlRole(accessControl.PAUSER_ROLE())\\r\\n    {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unpause contract\\r\\n     */\\r\\n    function unpause()\\r\\n        external\\r\\n        onlyAccessControlRole(accessControl.MASTER_ADMIN_ROLE())\\r\\n    {\\r\\n        _unpause();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe02743adfb8267a5e6165bbee0f8597fcb983f332b4773faaf483049257e0975\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a034620003d557601f19906001600160401b0390601f620036b0388190038281018616840185811185821017620003bf57849282916040528339602093849181010312620003d557516001600160a01b0381169390849003620003d55762000067620003da565b9160118352704d6f6f76652052656e74616c205061737360781b848401526200008f620003da565b600381526204d52560ec1b858201528351838111620003bf576000908154956001968781811c91168015620003b4575b89821014620003a0579081868493116200034d575b508890868311600114620002ec578492620002e0575b5050600019600383901b1c191690861b1781555b8151938411620002cc5784548581811c91168015620002c1575b87821014620002ad5783811162000265575b5085928411600114620002045783949596975092620001f8575b5050600019600383901b1c191690821b1781555b806007556009558115620001b457506080526040516132b59081620003fb823960805181818161022f015281816106e10152818161105a0152818161141a015281816115a60152818161199401528181611b870152611d020152f35b6064906040519062461bcd60e51b82526004820152601e60248201527f496e76616c69642061636365737320636f6e74726f6c206164647265737300006044820152fd5b01519050388062000144565b919096831696848352858320925b8881106200024f575083859697981062000235575b505050811b01815562000158565b015160001960f88460031b161c1916905538808062000227565b8183015184559285019291860191860162000212565b8582528682208480870160051c820192898810620002a3575b0160051c019086905b828110620002975750506200012a565b83815501869062000287565b925081926200027e565b634e487b7160e01b82526022600452602482fd5b90607f169062000118565b634e487b7160e01b81526041600452602490fd5b015190503880620000ea565b908b899416918580528a862092865b8c8282106200033657505084116200031c575b505050811b018155620000fe565b015160001960f88460031b161c191690553880806200030e565b8385015186558c97909501949384019301620002fb565b9091508380528884208680850160051c8201928b861062000396575b918a91869594930160051c01915b82811062000387575050620000d4565b8681558594508a910162000377565b9250819262000369565b634e487b7160e01b84526022600452602484fd5b90607f1690620000bf565b634e487b7160e01b600052604160045260246000fd5b600080fd5b60408051919082016001600160401b03811183821017620003bf5760405256fe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a714611f745750806303bdccf014611f1e57806306fdde0314611e51578063081812fc14611e14578063095ea7b314611d3157806313007d5514611cec57806318160ddd14611cac57806323b872dd14611c945780633f4ba83a14611b6757806342842e0e14611b3f5780634532bf441461194357806349e240781461186b5780635c975abb146118485780636352211e1461181757806370a08231146117bf578063715a6a651461155a578063718e4e571461150e5780637dab1516146111775780638456cb591461103857806385f2095c14610f695780638bef7de614610dcb578063907a9f0d14610d7b57806392580f0014610cfc57806395d89b4114610c1e57806396f8a39114610a3f57806398baf18114610a10578063a22cb46514610962578063b88d4fde146108fb578063bda1933d14610615578063c7894670146105cb578063c87b56dd1461055c578063cbc6ae5c146104ba578063e1384d991461038e578063e985e9c51461033a5763f9770942146101a257600080fd5b346103375760c0366003190112610337576101bb611ffb565b6024359060038210156102e9576001600160401b0390604435828111610333576101e99036906004016121a4565b916064358181116102da576102029036906004016121a4565b9060a4359081116102da5761021b9036906004016121a4565b60405163d539139360e01b815290939086907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa9182156103285783926102ed575b50803b156102e95760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa80156102de576102c6575b50506102be946102b5612700565b6084359361276b565b600160075580f35b6102cf906120d2565b6102da5785386102a7565b8580fd5b6040513d84823e3d90fd5b8280fd5b925090506020823d8211610320575b8161030960209383612131565b8101031261031b57879151903861026e565b600080fd5b3d91506102fc565b6040513d85823e3d90fd5b8480fd5b80fd5b503461033757604036600319011261033757610354611ffb565b604061035e612011565b9260018060a01b0380931681526005602052209116600052602052602060ff604060002054166040519015158152f35b5034610337576020806003193601126104b6576004356001600160401b0381116102e9576103c090369060040161235e565b839291925b8181106103d0578480f35b806103df610408928487612fa9565b358087526002808652604088205486906001600160a01b0390811661040d575b50505050612723565b6103c5565b600a8252896040812091600583019081549560ff8716806104a9575b610437575b505050506103ff565b7f92a9bd5f39abc46ef4ba3a4a67807d122775af1bd832c049c0ca5c29abb9d18b96604061048495600d610499998c9760ff19809616905552209081541690558b5260408d20541661317c565b60405191829189835260018a8401910161228e565b0390a2388085818981808061042e565b5080850154421015610429565b5080fd5b503461033757602036600319011261033757600435906001600160401b0382116103375761050360206104f036600486016121a4565b8160405193828580945193849201612055565b8101600b81520301902054801561051f57602090604051908152f35b60405162461bcd60e51b81526020600482015260156024820152741058d8d95cdcc818dbd919481b9bdd08199bdd5b99605a1b6044820152606490fd5b50346103375760203660031901126103375760043561057a816126dd565b5060005260066020526105c761059d6105a460406000206040519283809261228e565b0382612131565b60006040516105b281612116565b52604051918291602083526020830190612078565b0390f35b503461033757602036600319011261033757600435906001600160401b038211610337576020610602816104f036600487016121a4565b8101600b81520301902054604051908152f35b50346103375760c0366003190112610337576001600160401b036004358181116102e95761064790369060040161235e565b6024929192358281116103335761066290369060040161235e565b90926044358181116108f75761067c90369060040161235e565b916064358181116108f35761069590369060040161235e565b9190946084358281116108ef576106b090369060040161235e565b95909260a4359081116108eb576106cb90369060040161235e565b60405163d539139360e01b815291999093918d907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa9182156103285783926108b5575b50803b156102e95760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa80156102de5761089d575b5050610763612700565b61076e828214612f65565b610779838214612f65565b610784868214612f65565b61078f888214612f65565b61079a848214612f65565b60328111610861578c5b8181106107b4578d600160075580f35b6107bf81838f612fa9565b35906001600160a01b038216820361085d576107dc81858f612fa9565b35600381101561085957610854928d8d8d61084f946108498f8f908f8f8f8c6108399261082882610820816108188161082f986108419c612fb9565b9b909f612fb9565b9c9097612fa9565b359b612fb9565b989094369161216d565b95369161216d565b94369161216d565b9461276b565b612723565b6107a4565b8f80fd5b8e80fd5b60405162461bcd60e51b815260206004820152601460248201527342617463682073697a6520746f6f206c6172676560601b6044820152606490fd5b6108a6906120d2565b6108b1578c38610759565b8c80fd5b925090506020823d82116108e3575b816108d160209383612131565b8101031261031b578e91519038610720565b3d91506108c4565b8b80fd5b8a80fd5b8880fd5b8680fd5b503461033757608036600319011261033757610915611ffb565b61091d612011565b606435916001600160401b03831161095e573660238401121561095e5761095161095b93369060248160040135910161216d565b916044359161258e565b80f35b8380fd5b50346103375760403660031901126103375761097c611ffb565b602435908115159081830361095e576001600160a01b03169182156109f7576109c8903385526005602052604085208460005260205260406000209060ff801983541691151516179055565b6040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b604051630b61174360e31b815260048101849052602490fd5b50346103375760203660031901126103375760ff60406020926004358152600d84522054166040519015158152f35b5034610337576020806003193601126104b6576001600160a01b0380610a63611ffb565b168352600c82526040832091604051808483829654938481520190875283872092875b85828210610c0857505050610a9d92500384612131565b825191610ac2610aac84613151565b93610aba6040519586612131565b808552613151565b601f190182865b828110610bf257505050845b8451811015610b915780610aec610b8c9287613168565b518752600a8452604087208360405191610b05836120fb565b600560ff91610b178382541686612748565b604051610b2b8161059d816001860161228e565b898601526002810154604086015260038101546060860152604051610b578161059d816004860161228e565b60808601520154908116151560a084015260081c1660c0820152610b7b8287613168565b52610b868186613168565b50612723565b610ad5565b505092915060405191838301848452825180915260408401948060408360051b870101940192955b828710610bc65785850386f35b909192938280610be2600193603f198a820301865288516121e5565b9601920196019592919092610bb9565b610bfa613118565b828288010152018390610ac9565b8554845260019586019589955093019201610a86565b50346103375780600319360112610337576040516000600182815492610c4384612254565b92838352602094858282169182600014610cdc575050600114610c82575b50610c6e92500383612131565b6105c7604051928284938452830190612078565b6000818152859250907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b858310610cc4575050610c6e935082010185610c61565b80548389018501528794508693909201918101610cad565b60ff191685820152610c6e95151560051b8501019250879150610c619050565b5034610337576020806003193601126104b6576001600160a01b03610d1f611ffb565b168252600c815260408220916040518092808554928381520194835280832092905b828210610d64576105c785610d5881890382612131565b60405191829182612323565b835486529485019460019384019390910190610d41565b503461033757602036600319011261033757600435906001600160401b038211610337576060610db6610db136600486016121a4565b612ffa565b90604051921515835260208301526040820152f35b5034610337576020806003193601126104b6576001600160a01b03610dee611ffb565b168252600c81526040822090604051808383829554938481520190865283862092865b85828210610f5357505050610e2892500383612131565b82908362015180420191824211915b8551811015610e9d57610e4a8187613168565b518752600a8252604087206002015483610e8957841015610e74575b610e6f90612723565b610e37565b93610e81610e6f91612723565b949050610e66565b634e487b7160e01b88526011600452602488fd5b50939190610eaa84613151565b93610eb86040519586612131565b808552610ec7601f1991613151565b01368686013785805b8451811015610f4557610ee38186613168565b518252600a8752604082206002015483610f31579084610f08921115610f0d57612723565b610ed0565b610f178187613168565b51610f2b610f248b612723565b9a89613168565b52612723565b634e487b7160e01b83526011600452602483fd5b604051806105c78882612323565b8554845260019586019588955093019201610e11565b5034610337576020366003190112610337576040610fec916004358152600a6020522060ff8154169061101560405191610fb183610faa816001850161228e565b0384612131565b6002810154906003810154610ffd600560405193610fdd85610fd6816004850161228e565b0386612131565b015495604051988980996121c2565b60e0602089015260e0880190612078565b92604087015260608601528482036080860152612078565b60ff8216151560a084015260089190911c6001600160a01b031660c08301520390f35b503461033757806003193601126103375760405163e63ab1e960e01b815281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa918215610328578392611141575b50803b1561113d5760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa80156102de57611129575b505060085460ff81166111175760019060ff1916176008557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b60405163d93c066560e01b8152600490fd5b611132906120d2565b6103375780386110d2565b5050fd5b925090506020823d821161116f575b8161115d60209383612131565b8101031261031b578291519038611099565b3d9150611150565b5034610337576020806003193601126104b657600435908183526002815260018060a01b036111ad8160408620541615156130d5565b6111b6836126dd565b81163314801561140a575b156113cc57828452600a825283604081206111e4856111df816126dd565b61317c565b6001809101846040519184908054906111fc82612254565b918681169081156113b55750600114611377575b5050600b815282900301902060009055848252600a84526040822082815560059161123c908201613236565b600060028201556000600382015561125660048201613236565b0155828452600d82526040808520805460ff1916905560008481526002845220548116611327576000839182825260028452604082205416600281159485156112f4575b848452526040822080546001600160a01b03191690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a46112dc575080f35b60249060405190637e27328960e01b82526004820152fd5b600085815260046020526040902080546001600160a01b031916905582845260038152604084208419815401905561129a565b60405162461bcd60e51b815260048101839052602260248201527f52656e74616c2070617373657320617265206e6f6e2d7472616e7366657261626044820152616c6560f01b6064820152608490fd5b9150948094939250528580842084905b86821061139f57509394929350909182018183611210565b8054848301528a95508892909101908401611387565b60ff19168652505080151502830190508183611210565b60405162461bcd60e51b81526004810183905260166024820152752737ba1030baba3437b934bd32b2103a3790313ab93760511b6044820152606490fd5b506040516367ef9e2760e11b81527f00000000000000000000000000000000000000000000000000000000000000008216908381600481855afa801561150357849187916114d2575b50604051632474521560e21b815260048101919091523360248201529182908180604481015b03915afa9081156114c7578591611491575b506111c1565b90508281813d83116114c0575b6114a88183612131565b8101031261033357518015158103610333573861148b565b503d61149e565b6040513d87823e3d90fd5b82819392503d83116114fc575b6114e98183612131565b8101031261031b57518390611479611453565b503d6114df565b6040513d88823e3d90fd5b5034610337576020366003190112610337576002604060209260043580825283855261154660018060a01b03848420541615156130d5565b8152600a8452200154421015604051908152f35b50346103375760209081600319360112610337576004356001600160401b0381116104b65761158d9036906004016121a4565b60405163d539139360e01b81526001600160a01b0392907f000000000000000000000000000000000000000000000000000000000000000084168582600481845afa918215610328578392611790575b50803b156102e95760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa80156102de5790829161177c575b50506040518481845161162f8183858901612055565b8101600b8152030190205492831561174157838252600a8552604082209160ff600584015416156117075760028301544210156116d357946116d19392857f2f30ad3cf002ea8274ccb9b111ad3d6b44115ab5146947293e2301631e00ac226116bb60ff9560408b8560609d526002885220541695869454169660405191829187835287830190612078565b0390a360405194855284015260408301906121c2565bf35b60405162461bcd60e51b815260048101879052600c60248201526b14185cdcc8195e1c1a5c995960a21b6044820152606490fd5b60405162461bcd60e51b815260048101879052601260248201527150617373206973206e6f742061637469766560701b6044820152606490fd5b60405162461bcd60e51b8152600481018690526013602482015272496e76616c69642061636365737320636f646560681b6044820152606490fd5b611785906120d2565b610337578038611619565b9091508581813d83116117b8575b6117a88183612131565b8101031261031b575190386115dd565b503d61179e565b5034610337576020366003190112610337576001600160a01b036117e1611ffb565b1680156117fe578160409160209352600383522054604051908152f35b6040516322718ad960e21b815260048101839052602490fd5b50346103375760203660031901126103375760206118366004356126dd565b6040516001600160a01b039091168152f35b5034610337578060031936011261033757602060ff600854166040519015158152f35b5034610337576020806003193601126104b65760406004359261188c613118565b5083815260028352818120546001600160a01b0394906118af90861615156130d5565b8152600a835220916005604051936118c6856120fb565b6118d460ff82541686612748565b6040516118e88161059d816001860161228e565b8486015260028101546040860152600381015460608601526040516119148161059d816004860161228e565b6080860152015460ff8116151560a085015260081c1660c08301526105c76040519282849384528301906121e5565b5034610337576040366003190112610337576004356024356001600160401b0381116102e9576119779036906004016121a4565b6040516367ef9e2760e11b81526001600160a01b039160209185907f000000000000000000000000000000000000000000000000000000000000000085168482600481845afa918215610328578392611b0d575b50803b156102e95760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa80156102de57611af9575b5084905260028252611a1d8360408720541615156130d5565b838552600a825260408520926005840180549060ff821615611abc5792611a9287611ab694611aa997947f1e86927efb2ceb05e033be84dffec1e5e1c55b4639cccb9889345fde9211e7f1999760ff198092169055828c52600d865260408c209081541690556002855260408b20541661317c565b60405194859460408652600160408701910161228e565b9184830390850152612078565b0390a280f35b60405162461bcd60e51b81526004810186905260156024820152745061737320616c726561647920696e61637469766560581b6044820152606490fd5b611b02906120d2565b610333578438611a04565b925090508382813d8111611b38575b611b268183612131565b8101031261031b5786915190386119cb565b503d611b1c565b50346103375761095b611b513661209d565b9060405192611b5f84612116565b85845261258e565b50346103375780600319360112610337576040516367ef9e2760e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908290602081600481865afa9081156102de578291611c63575b50823b156104b65760405163101a2a3160e31b8152600481019190915233602482015291829060449082905afa80156102de57611c54575b5060085460ff811615611c425760ff19166008557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b604051638dfc202b60e01b8152600490fd5b611c5d906120d2565b38611c01565b90506020813d8211611c8c575b81611c7d60209383612131565b810103126104b6575138611bc9565b3d9150611c70565b50346103375761095b611ca63661209d565b9161238e565b5034610337578060031936011261033757600954600019810191908211611cd857602082604051908152f35b634e487b7160e01b81526011600452602490fd5b50346103375780600319360112610337576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461033757604036600319011261033757611d4b611ffb565b602435611d57816126dd565b33151580611e01575b80611dd6575b611dbe576001600160a01b039283169282918491167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258680a4825260046020526040822080546001600160a01b031916909117905580f35b60405163a9fbf51f60e01b8152336004820152602490fd5b506001600160a01b038116845260056020908152604080862033875290915284205460ff1615611d66565b506001600160a01b038116331415611d60565b503461033757602036600319011261033757602090600435611e35816126dd565b50815260048252604060018060a01b0391205416604051908152f35b5034610337578060031936011261033757604051908082825491611e7483612254565b92838352602094600191868382169182600014611efc575050600114611ea3575b5050610c6e92500383612131565b908592508180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b858310611ee4575050610c6e93508201013880611e95565b80548389018501528794508693909201918101611ecc565b9250935050610c6e94915060ff191682840152151560051b8201013880611e95565b503461033757604036600319011261033757611f38611ffb565b6001600160a01b03168152600c6020526040812080546024359290831015610337576020611f668484612027565b90546040519160031b1c8152f35b9050346104b65760203660031901126104b65760043563ffffffff60e01b81168091036102e95760209250632483248360e11b8114908115611fb8575b5015158152f35b6380ac58cd60e01b811491508115611fea575b8115611fd9575b5038611fb1565b6301ffc9a760e01b14905038611fd2565b635b5e139f60e01b81149150611fcb565b600435906001600160a01b038216820361031b57565b602435906001600160a01b038216820361031b57565b805482101561203f5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b60005b8381106120685750506000910152565b8181015183820152602001612058565b9060209161209181518092818552858086019101612055565b601f01601f1916010190565b606090600319011261031b576001600160a01b0390600435828116810361031b5791602435908116810361031b579060443590565b6001600160401b0381116120e557604052565b634e487b7160e01b600052604160045260246000fd5b60e081019081106001600160401b038211176120e557604052565b602081019081106001600160401b038211176120e557604052565b90601f801991011681019081106001600160401b038211176120e557604052565b6001600160401b0381116120e557601f01601f191660200190565b92919261217982612152565b916121876040519384612131565b82948184528183011161031b578281602093846000960137010152565b9080601f8301121561031b578160206121bf9335910161216d565b90565b9060038210156121cf5752565b634e487b7160e01b600052602160045260246000fd5b906121f18183516121c2565b60c061223561220f602085015160e0602086015260e0850190612078565b604085015160408501526060850151606085015260808501518482036080860152612078565b60a080850151151590840152928101516001600160a01b031691015290565b90600182811c92168015612284575b602083101461226e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612263565b80546000939261229d82612254565b91828252602093600191828116908160001461230457506001146122c3575b5050505050565b90939495506000929192528360002092846000945b8386106122f0575050505001019038808080806122bc565b8054858701830152940193859082016122d8565b60ff19168685015250505090151560051b0101915038808080806122bc565b6020908160408183019282815285518094520193019160005b82811061234a575050505090565b83518552938101939281019260010161233c565b9181601f8401121561031b578235916001600160401b03831161031b576020808501948460051b01011161031b57565b6001600160a01b0391821692909183156125755760009282845260209460028652604095838787205416612527579084918287526002815284888820541696879133151580612491575b509060027fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928461245e575b858352600381528b8320805460010190558683525289812080546001600160a01b0319168517905580a4169283830361243d5750505050565b6064945051926364283d7b60e01b8452600484015260248301526044820152fd5b600087815260046020526040902080546001600160a01b0319169055848352600381528b83208054600019019055612404565b919394509150806124e6575b156124ad578592918791386123d8565b8786886124ca576024915190637e27328960e01b82526004820152fd5b604491519063177e802f60e01b82523360048301526024820152fd5b50338714801561250b575b8061249d575085825260048152338589842054161461249d565b5086825260058152878220338352815260ff88832054166124f1565b60849087519062461bcd60e51b82526004820152602260248201527f52656e74616c2070617373657320617265206e6f6e2d7472616e7366657261626044820152616c6560f01b6064820152fd5b604051633250574960e11b815260006004820152602490fd5b61259983838361238e565b813b6125a6575b50505050565b604051630a85bd0160e11b8082523360048301526001600160a01b039283166024830152604482019490945260806064820152602095929091169390929083906125f4906084830190612078565b039285816000958187895af184918161269d575b50612668575050503d600014612660573d61262281612152565b906126306040519283612131565b81528091843d92013e5b8051928361265b57604051633250574960e11b815260048101849052602490fd5b019050fd5b50606061263a565b919450915063ffffffff60e01b16036126855750388080806125a0565b60249060405190633250574960e11b82526004820152fd5b9091508681813d83116126d6575b6126b58183612131565b8101031261033357516001600160e01b031981168103610333579038612608565b503d6126ab565b6000818152600260205260409020546001600160a01b03169081156112dc575090565b600260075414612711576002600755565b604051633ee5aeb560e01b8152600490fd5b60001981146127325760010190565b634e487b7160e01b600052601160045260246000fd5b60038210156121cf5752565b81811061275f575050565b60008155600101612754565b939493909290916001600160a01b03831615612f2057805115612ee457604051602081835161279d8183858801612055565b8101600b81520301902054612e9f57815115612e6657600954946127c086612723565b60095562278d00420180421161273257604051906127dd826120fb565b6127e78783612748565b60208201908482526040830152886060830152846080830152600160a083015260018060a01b03861660c083015287600052600a602052604060002090825160038110156121cf5760ff80198454169116178255518051906001600160401b0382116120e55761285a6001840154612254565b601f8111612e31575b50602090601f8311600114612dbf57612895929160009183612b96575b50508160011b916000199060031b1c19161790565b60018201555b604082015160028201556060820151600382015560808201518051906001600160401b0382116120e5576128d26004840154612254565b601f8111612d8a575b50602090601f8311600114612d15578260059360c0959361291293600092612b965750508160011b916000199060031b1c19161790565b60048201555b019161293660a08201511515849060ff801983541691151516179055565b01518154610100600160a81b03191660089190911b610100600160a81b0316179055604051825187919060209082906129728183898601612055565b8101600b8152030190205585600052600d6020526040600020600160ff1982541617905560018060a01b038416600052600c60205260406000208054680100000000000000008110156120e5576129d3816129ec9360018b94018155612027565b90919082549060031b91821b91600019901b1916179055565b6000868152600260205260409020546001600160a01b0316612cc5576000868152600260205260409020546001600160a01b031680151590879082612c8e575b6001600160a01b0387166000818152600360209081526040808320805460010190558583526002909152812080546001600160a01b031916831790559091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9080a4612c75578560005260066020526040600020908051906001600160401b0382116120e557612abd8354612254565b601f8111612c38575b50602090601f8311600114612ba15793612b7f93612b27847f29f4fe075b7c5ca209fdf38b7e8b31ebfb8c7714ceba939ed792c1192af27ff49a9895612b7195612b609b99600092612b965750508160011b916000199060031b1c19161790565b90555b7ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce760206040518b8152a1604051968780976121c2565b608060208701526080860190612078565b908482036040860152612078565b60608301969096526001600160a01b0316940390a3565b015190503880612880565b90601f198316918460005260206000209260005b818110612c20575084612b7194612b609a9894612b7f98947f29f4fe075b7c5ca209fdf38b7e8b31ebfb8c7714ceba939ed792c1192af27ff49d9b9860019510612c07575b505050811b019055612b2a565b015160001960f88460031b161c19169055388080612bfa565b92936020600181928786015181550195019301612bb5565b612c6590846000526020600020601f850160051c81019160208610612c6b575b601f0160051c0190612754565b38612ac6565b9091508190612c58565b6040516339e3563760e11b815260006004820152602490fd5b600082815260046020526040902080546001600160a01b031916905580600052600360205260406000206000198154019055612a2c565b60405162461bcd60e51b815260206004820152602260248201527f52656e74616c2070617373657320617265206e6f6e2d7472616e7366657261626044820152616c6560f01b6064820152608490fd5b906004840160005260206000209160005b601f1985168110612d7257509260c0949260019260059583601f19811610612d59575b505050811b016004820155612918565b015160001960f88460031b161c19169055388080612d49565b91926020600181928685015181550194019201612d26565b612db990600485016000526020600020601f850160051c81019160208610612c6b57601f0160051c0190612754565b386128db565b9190600184016000526020600020906000935b601f1984168510612e16576001945083601f19811610612dfd575b505050811b01600182015561289b565b015160001960f88460031b161c19169055388080612ded565b81810151835560209485019460019093019290910190612dd2565b612e6090600185016000526020600020601f850160051c81019160208610612c6b57601f0160051c0190612754565b38612863565b60405162461bcd60e51b8152602060048201526011602482015270131bd8d85d1a5bdb881c995c5d5a5c9959607a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f41636365737320636f646520616c7265616479206578697374730000000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260146024820152731058d8d95cdcc818dbd919481c995c5d5a5c995960621b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f496e76616c696420726563697069656e742061646472657373000000000000006044820152606490fd5b15612f6c57565b60405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606490fd5b919081101561203f5760051b0190565b919081101561203f5760051b81013590601e198136030182121561031b5701908135916001600160401b03831161031b57602001823603811361031b579190565b90613015602060409381855193828580945193849201612055565b8101600b815203019020549081156130ca5781600052600a602052826000206005845191613042836120fb565b61305060ff82541684612748565b85516130638161059d816001860161228e565b602084015260028101549580840196875260038201546060850152516130908161059d816004860161228e565b608084015201549060c060ff83161515928360a084015260018060a01b039060081c16910152806130c057925190565b5082514210925190565b600092508291508190565b156130dc57565b60405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b60405190613125826120fb565b600060c08382815260606020820152826040820152826060820152606060808201528260a08201520152565b6001600160401b0381116120e55760051b60200190565b805182101561203f5760209160051b010190565b6001600160a01b03166000908152600c60205260408120909190825b8154808210156122bc5783906131ae8385612027565b929054600393841b1c146131cc5750506131c790612723565b613198565b929350939060001992838101908111610f3157906129d36131f06131fd9387612027565b905490881b1c9186612027565b825490811561322257508101926132148484612027565b81939154921b1b1916905555565b634e487b7160e01b81526031600452602490fd5b6132408154612254565b908161324a575050565b81601f6000931160011461325c575055565b90808391825261327b601f60208420940160051c840160018501612754565b555556fea264697066735822122039015db26ee3a1df36143860b487e0fa5edd7e9ea5ecb51cdedb14d93b3cf33264736f6c63430008150033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a714611f745750806303bdccf014611f1e57806306fdde0314611e51578063081812fc14611e14578063095ea7b314611d3157806313007d5514611cec57806318160ddd14611cac57806323b872dd14611c945780633f4ba83a14611b6757806342842e0e14611b3f5780634532bf441461194357806349e240781461186b5780635c975abb146118485780636352211e1461181757806370a08231146117bf578063715a6a651461155a578063718e4e571461150e5780637dab1516146111775780638456cb591461103857806385f2095c14610f695780638bef7de614610dcb578063907a9f0d14610d7b57806392580f0014610cfc57806395d89b4114610c1e57806396f8a39114610a3f57806398baf18114610a10578063a22cb46514610962578063b88d4fde146108fb578063bda1933d14610615578063c7894670146105cb578063c87b56dd1461055c578063cbc6ae5c146104ba578063e1384d991461038e578063e985e9c51461033a5763f9770942146101a257600080fd5b346103375760c0366003190112610337576101bb611ffb565b6024359060038210156102e9576001600160401b0390604435828111610333576101e99036906004016121a4565b916064358181116102da576102029036906004016121a4565b9060a4359081116102da5761021b9036906004016121a4565b60405163d539139360e01b815290939086907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa9182156103285783926102ed575b50803b156102e95760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa80156102de576102c6575b50506102be946102b5612700565b6084359361276b565b600160075580f35b6102cf906120d2565b6102da5785386102a7565b8580fd5b6040513d84823e3d90fd5b8280fd5b925090506020823d8211610320575b8161030960209383612131565b8101031261031b57879151903861026e565b600080fd5b3d91506102fc565b6040513d85823e3d90fd5b8480fd5b80fd5b503461033757604036600319011261033757610354611ffb565b604061035e612011565b9260018060a01b0380931681526005602052209116600052602052602060ff604060002054166040519015158152f35b5034610337576020806003193601126104b6576004356001600160401b0381116102e9576103c090369060040161235e565b839291925b8181106103d0578480f35b806103df610408928487612fa9565b358087526002808652604088205486906001600160a01b0390811661040d575b50505050612723565b6103c5565b600a8252896040812091600583019081549560ff8716806104a9575b610437575b505050506103ff565b7f92a9bd5f39abc46ef4ba3a4a67807d122775af1bd832c049c0ca5c29abb9d18b96604061048495600d610499998c9760ff19809616905552209081541690558b5260408d20541661317c565b60405191829189835260018a8401910161228e565b0390a2388085818981808061042e565b5080850154421015610429565b5080fd5b503461033757602036600319011261033757600435906001600160401b0382116103375761050360206104f036600486016121a4565b8160405193828580945193849201612055565b8101600b81520301902054801561051f57602090604051908152f35b60405162461bcd60e51b81526020600482015260156024820152741058d8d95cdcc818dbd919481b9bdd08199bdd5b99605a1b6044820152606490fd5b50346103375760203660031901126103375760043561057a816126dd565b5060005260066020526105c761059d6105a460406000206040519283809261228e565b0382612131565b60006040516105b281612116565b52604051918291602083526020830190612078565b0390f35b503461033757602036600319011261033757600435906001600160401b038211610337576020610602816104f036600487016121a4565b8101600b81520301902054604051908152f35b50346103375760c0366003190112610337576001600160401b036004358181116102e95761064790369060040161235e565b6024929192358281116103335761066290369060040161235e565b90926044358181116108f75761067c90369060040161235e565b916064358181116108f35761069590369060040161235e565b9190946084358281116108ef576106b090369060040161235e565b95909260a4359081116108eb576106cb90369060040161235e565b60405163d539139360e01b815291999093918d907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa9182156103285783926108b5575b50803b156102e95760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa80156102de5761089d575b5050610763612700565b61076e828214612f65565b610779838214612f65565b610784868214612f65565b61078f888214612f65565b61079a848214612f65565b60328111610861578c5b8181106107b4578d600160075580f35b6107bf81838f612fa9565b35906001600160a01b038216820361085d576107dc81858f612fa9565b35600381101561085957610854928d8d8d61084f946108498f8f908f8f8f8c6108399261082882610820816108188161082f986108419c612fb9565b9b909f612fb9565b9c9097612fa9565b359b612fb9565b989094369161216d565b95369161216d565b94369161216d565b9461276b565b612723565b6107a4565b8f80fd5b8e80fd5b60405162461bcd60e51b815260206004820152601460248201527342617463682073697a6520746f6f206c6172676560601b6044820152606490fd5b6108a6906120d2565b6108b1578c38610759565b8c80fd5b925090506020823d82116108e3575b816108d160209383612131565b8101031261031b578e91519038610720565b3d91506108c4565b8b80fd5b8a80fd5b8880fd5b8680fd5b503461033757608036600319011261033757610915611ffb565b61091d612011565b606435916001600160401b03831161095e573660238401121561095e5761095161095b93369060248160040135910161216d565b916044359161258e565b80f35b8380fd5b50346103375760403660031901126103375761097c611ffb565b602435908115159081830361095e576001600160a01b03169182156109f7576109c8903385526005602052604085208460005260205260406000209060ff801983541691151516179055565b6040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b604051630b61174360e31b815260048101849052602490fd5b50346103375760203660031901126103375760ff60406020926004358152600d84522054166040519015158152f35b5034610337576020806003193601126104b6576001600160a01b0380610a63611ffb565b168352600c82526040832091604051808483829654938481520190875283872092875b85828210610c0857505050610a9d92500384612131565b825191610ac2610aac84613151565b93610aba6040519586612131565b808552613151565b601f190182865b828110610bf257505050845b8451811015610b915780610aec610b8c9287613168565b518752600a8452604087208360405191610b05836120fb565b600560ff91610b178382541686612748565b604051610b2b8161059d816001860161228e565b898601526002810154604086015260038101546060860152604051610b578161059d816004860161228e565b60808601520154908116151560a084015260081c1660c0820152610b7b8287613168565b52610b868186613168565b50612723565b610ad5565b505092915060405191838301848452825180915260408401948060408360051b870101940192955b828710610bc65785850386f35b909192938280610be2600193603f198a820301865288516121e5565b9601920196019592919092610bb9565b610bfa613118565b828288010152018390610ac9565b8554845260019586019589955093019201610a86565b50346103375780600319360112610337576040516000600182815492610c4384612254565b92838352602094858282169182600014610cdc575050600114610c82575b50610c6e92500383612131565b6105c7604051928284938452830190612078565b6000818152859250907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b858310610cc4575050610c6e935082010185610c61565b80548389018501528794508693909201918101610cad565b60ff191685820152610c6e95151560051b8501019250879150610c619050565b5034610337576020806003193601126104b6576001600160a01b03610d1f611ffb565b168252600c815260408220916040518092808554928381520194835280832092905b828210610d64576105c785610d5881890382612131565b60405191829182612323565b835486529485019460019384019390910190610d41565b503461033757602036600319011261033757600435906001600160401b038211610337576060610db6610db136600486016121a4565b612ffa565b90604051921515835260208301526040820152f35b5034610337576020806003193601126104b6576001600160a01b03610dee611ffb565b168252600c81526040822090604051808383829554938481520190865283862092865b85828210610f5357505050610e2892500383612131565b82908362015180420191824211915b8551811015610e9d57610e4a8187613168565b518752600a8252604087206002015483610e8957841015610e74575b610e6f90612723565b610e37565b93610e81610e6f91612723565b949050610e66565b634e487b7160e01b88526011600452602488fd5b50939190610eaa84613151565b93610eb86040519586612131565b808552610ec7601f1991613151565b01368686013785805b8451811015610f4557610ee38186613168565b518252600a8752604082206002015483610f31579084610f08921115610f0d57612723565b610ed0565b610f178187613168565b51610f2b610f248b612723565b9a89613168565b52612723565b634e487b7160e01b83526011600452602483fd5b604051806105c78882612323565b8554845260019586019588955093019201610e11565b5034610337576020366003190112610337576040610fec916004358152600a6020522060ff8154169061101560405191610fb183610faa816001850161228e565b0384612131565b6002810154906003810154610ffd600560405193610fdd85610fd6816004850161228e565b0386612131565b015495604051988980996121c2565b60e0602089015260e0880190612078565b92604087015260608601528482036080860152612078565b60ff8216151560a084015260089190911c6001600160a01b031660c08301520390f35b503461033757806003193601126103375760405163e63ab1e960e01b815281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa918215610328578392611141575b50803b1561113d5760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa80156102de57611129575b505060085460ff81166111175760019060ff1916176008557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b60405163d93c066560e01b8152600490fd5b611132906120d2565b6103375780386110d2565b5050fd5b925090506020823d821161116f575b8161115d60209383612131565b8101031261031b578291519038611099565b3d9150611150565b5034610337576020806003193601126104b657600435908183526002815260018060a01b036111ad8160408620541615156130d5565b6111b6836126dd565b81163314801561140a575b156113cc57828452600a825283604081206111e4856111df816126dd565b61317c565b6001809101846040519184908054906111fc82612254565b918681169081156113b55750600114611377575b5050600b815282900301902060009055848252600a84526040822082815560059161123c908201613236565b600060028201556000600382015561125660048201613236565b0155828452600d82526040808520805460ff1916905560008481526002845220548116611327576000839182825260028452604082205416600281159485156112f4575b848452526040822080546001600160a01b03191690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a46112dc575080f35b60249060405190637e27328960e01b82526004820152fd5b600085815260046020526040902080546001600160a01b031916905582845260038152604084208419815401905561129a565b60405162461bcd60e51b815260048101839052602260248201527f52656e74616c2070617373657320617265206e6f6e2d7472616e7366657261626044820152616c6560f01b6064820152608490fd5b9150948094939250528580842084905b86821061139f57509394929350909182018183611210565b8054848301528a95508892909101908401611387565b60ff19168652505080151502830190508183611210565b60405162461bcd60e51b81526004810183905260166024820152752737ba1030baba3437b934bd32b2103a3790313ab93760511b6044820152606490fd5b506040516367ef9e2760e11b81527f00000000000000000000000000000000000000000000000000000000000000008216908381600481855afa801561150357849187916114d2575b50604051632474521560e21b815260048101919091523360248201529182908180604481015b03915afa9081156114c7578591611491575b506111c1565b90508281813d83116114c0575b6114a88183612131565b8101031261033357518015158103610333573861148b565b503d61149e565b6040513d87823e3d90fd5b82819392503d83116114fc575b6114e98183612131565b8101031261031b57518390611479611453565b503d6114df565b6040513d88823e3d90fd5b5034610337576020366003190112610337576002604060209260043580825283855261154660018060a01b03848420541615156130d5565b8152600a8452200154421015604051908152f35b50346103375760209081600319360112610337576004356001600160401b0381116104b65761158d9036906004016121a4565b60405163d539139360e01b81526001600160a01b0392907f000000000000000000000000000000000000000000000000000000000000000084168582600481845afa918215610328578392611790575b50803b156102e95760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa80156102de5790829161177c575b50506040518481845161162f8183858901612055565b8101600b8152030190205492831561174157838252600a8552604082209160ff600584015416156117075760028301544210156116d357946116d19392857f2f30ad3cf002ea8274ccb9b111ad3d6b44115ab5146947293e2301631e00ac226116bb60ff9560408b8560609d526002885220541695869454169660405191829187835287830190612078565b0390a360405194855284015260408301906121c2565bf35b60405162461bcd60e51b815260048101879052600c60248201526b14185cdcc8195e1c1a5c995960a21b6044820152606490fd5b60405162461bcd60e51b815260048101879052601260248201527150617373206973206e6f742061637469766560701b6044820152606490fd5b60405162461bcd60e51b8152600481018690526013602482015272496e76616c69642061636365737320636f646560681b6044820152606490fd5b611785906120d2565b610337578038611619565b9091508581813d83116117b8575b6117a88183612131565b8101031261031b575190386115dd565b503d61179e565b5034610337576020366003190112610337576001600160a01b036117e1611ffb565b1680156117fe578160409160209352600383522054604051908152f35b6040516322718ad960e21b815260048101839052602490fd5b50346103375760203660031901126103375760206118366004356126dd565b6040516001600160a01b039091168152f35b5034610337578060031936011261033757602060ff600854166040519015158152f35b5034610337576020806003193601126104b65760406004359261188c613118565b5083815260028352818120546001600160a01b0394906118af90861615156130d5565b8152600a835220916005604051936118c6856120fb565b6118d460ff82541686612748565b6040516118e88161059d816001860161228e565b8486015260028101546040860152600381015460608601526040516119148161059d816004860161228e565b6080860152015460ff8116151560a085015260081c1660c08301526105c76040519282849384528301906121e5565b5034610337576040366003190112610337576004356024356001600160401b0381116102e9576119779036906004016121a4565b6040516367ef9e2760e11b81526001600160a01b039160209185907f000000000000000000000000000000000000000000000000000000000000000085168482600481845afa918215610328578392611b0d575b50803b156102e95760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa80156102de57611af9575b5084905260028252611a1d8360408720541615156130d5565b838552600a825260408520926005840180549060ff821615611abc5792611a9287611ab694611aa997947f1e86927efb2ceb05e033be84dffec1e5e1c55b4639cccb9889345fde9211e7f1999760ff198092169055828c52600d865260408c209081541690556002855260408b20541661317c565b60405194859460408652600160408701910161228e565b9184830390850152612078565b0390a280f35b60405162461bcd60e51b81526004810186905260156024820152745061737320616c726561647920696e61637469766560581b6044820152606490fd5b611b02906120d2565b610333578438611a04565b925090508382813d8111611b38575b611b268183612131565b8101031261031b5786915190386119cb565b503d611b1c565b50346103375761095b611b513661209d565b9060405192611b5f84612116565b85845261258e565b50346103375780600319360112610337576040516367ef9e2760e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908290602081600481865afa9081156102de578291611c63575b50823b156104b65760405163101a2a3160e31b8152600481019190915233602482015291829060449082905afa80156102de57611c54575b5060085460ff811615611c425760ff19166008557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b604051638dfc202b60e01b8152600490fd5b611c5d906120d2565b38611c01565b90506020813d8211611c8c575b81611c7d60209383612131565b810103126104b6575138611bc9565b3d9150611c70565b50346103375761095b611ca63661209d565b9161238e565b5034610337578060031936011261033757600954600019810191908211611cd857602082604051908152f35b634e487b7160e01b81526011600452602490fd5b50346103375780600319360112610337576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461033757604036600319011261033757611d4b611ffb565b602435611d57816126dd565b33151580611e01575b80611dd6575b611dbe576001600160a01b039283169282918491167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258680a4825260046020526040822080546001600160a01b031916909117905580f35b60405163a9fbf51f60e01b8152336004820152602490fd5b506001600160a01b038116845260056020908152604080862033875290915284205460ff1615611d66565b506001600160a01b038116331415611d60565b503461033757602036600319011261033757602090600435611e35816126dd565b50815260048252604060018060a01b0391205416604051908152f35b5034610337578060031936011261033757604051908082825491611e7483612254565b92838352602094600191868382169182600014611efc575050600114611ea3575b5050610c6e92500383612131565b908592508180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b858310611ee4575050610c6e93508201013880611e95565b80548389018501528794508693909201918101611ecc565b9250935050610c6e94915060ff191682840152151560051b8201013880611e95565b503461033757604036600319011261033757611f38611ffb565b6001600160a01b03168152600c6020526040812080546024359290831015610337576020611f668484612027565b90546040519160031b1c8152f35b9050346104b65760203660031901126104b65760043563ffffffff60e01b81168091036102e95760209250632483248360e11b8114908115611fb8575b5015158152f35b6380ac58cd60e01b811491508115611fea575b8115611fd9575b5038611fb1565b6301ffc9a760e01b14905038611fd2565b635b5e139f60e01b81149150611fcb565b600435906001600160a01b038216820361031b57565b602435906001600160a01b038216820361031b57565b805482101561203f5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b60005b8381106120685750506000910152565b8181015183820152602001612058565b9060209161209181518092818552858086019101612055565b601f01601f1916010190565b606090600319011261031b576001600160a01b0390600435828116810361031b5791602435908116810361031b579060443590565b6001600160401b0381116120e557604052565b634e487b7160e01b600052604160045260246000fd5b60e081019081106001600160401b038211176120e557604052565b602081019081106001600160401b038211176120e557604052565b90601f801991011681019081106001600160401b038211176120e557604052565b6001600160401b0381116120e557601f01601f191660200190565b92919261217982612152565b916121876040519384612131565b82948184528183011161031b578281602093846000960137010152565b9080601f8301121561031b578160206121bf9335910161216d565b90565b9060038210156121cf5752565b634e487b7160e01b600052602160045260246000fd5b906121f18183516121c2565b60c061223561220f602085015160e0602086015260e0850190612078565b604085015160408501526060850151606085015260808501518482036080860152612078565b60a080850151151590840152928101516001600160a01b031691015290565b90600182811c92168015612284575b602083101461226e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612263565b80546000939261229d82612254565b91828252602093600191828116908160001461230457506001146122c3575b5050505050565b90939495506000929192528360002092846000945b8386106122f0575050505001019038808080806122bc565b8054858701830152940193859082016122d8565b60ff19168685015250505090151560051b0101915038808080806122bc565b6020908160408183019282815285518094520193019160005b82811061234a575050505090565b83518552938101939281019260010161233c565b9181601f8401121561031b578235916001600160401b03831161031b576020808501948460051b01011161031b57565b6001600160a01b0391821692909183156125755760009282845260209460028652604095838787205416612527579084918287526002815284888820541696879133151580612491575b509060027fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928461245e575b858352600381528b8320805460010190558683525289812080546001600160a01b0319168517905580a4169283830361243d5750505050565b6064945051926364283d7b60e01b8452600484015260248301526044820152fd5b600087815260046020526040902080546001600160a01b0319169055848352600381528b83208054600019019055612404565b919394509150806124e6575b156124ad578592918791386123d8565b8786886124ca576024915190637e27328960e01b82526004820152fd5b604491519063177e802f60e01b82523360048301526024820152fd5b50338714801561250b575b8061249d575085825260048152338589842054161461249d565b5086825260058152878220338352815260ff88832054166124f1565b60849087519062461bcd60e51b82526004820152602260248201527f52656e74616c2070617373657320617265206e6f6e2d7472616e7366657261626044820152616c6560f01b6064820152fd5b604051633250574960e11b815260006004820152602490fd5b61259983838361238e565b813b6125a6575b50505050565b604051630a85bd0160e11b8082523360048301526001600160a01b039283166024830152604482019490945260806064820152602095929091169390929083906125f4906084830190612078565b039285816000958187895af184918161269d575b50612668575050503d600014612660573d61262281612152565b906126306040519283612131565b81528091843d92013e5b8051928361265b57604051633250574960e11b815260048101849052602490fd5b019050fd5b50606061263a565b919450915063ffffffff60e01b16036126855750388080806125a0565b60249060405190633250574960e11b82526004820152fd5b9091508681813d83116126d6575b6126b58183612131565b8101031261033357516001600160e01b031981168103610333579038612608565b503d6126ab565b6000818152600260205260409020546001600160a01b03169081156112dc575090565b600260075414612711576002600755565b604051633ee5aeb560e01b8152600490fd5b60001981146127325760010190565b634e487b7160e01b600052601160045260246000fd5b60038210156121cf5752565b81811061275f575050565b60008155600101612754565b939493909290916001600160a01b03831615612f2057805115612ee457604051602081835161279d8183858801612055565b8101600b81520301902054612e9f57815115612e6657600954946127c086612723565b60095562278d00420180421161273257604051906127dd826120fb565b6127e78783612748565b60208201908482526040830152886060830152846080830152600160a083015260018060a01b03861660c083015287600052600a602052604060002090825160038110156121cf5760ff80198454169116178255518051906001600160401b0382116120e55761285a6001840154612254565b601f8111612e31575b50602090601f8311600114612dbf57612895929160009183612b96575b50508160011b916000199060031b1c19161790565b60018201555b604082015160028201556060820151600382015560808201518051906001600160401b0382116120e5576128d26004840154612254565b601f8111612d8a575b50602090601f8311600114612d15578260059360c0959361291293600092612b965750508160011b916000199060031b1c19161790565b60048201555b019161293660a08201511515849060ff801983541691151516179055565b01518154610100600160a81b03191660089190911b610100600160a81b0316179055604051825187919060209082906129728183898601612055565b8101600b8152030190205585600052600d6020526040600020600160ff1982541617905560018060a01b038416600052600c60205260406000208054680100000000000000008110156120e5576129d3816129ec9360018b94018155612027565b90919082549060031b91821b91600019901b1916179055565b6000868152600260205260409020546001600160a01b0316612cc5576000868152600260205260409020546001600160a01b031680151590879082612c8e575b6001600160a01b0387166000818152600360209081526040808320805460010190558583526002909152812080546001600160a01b031916831790559091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9080a4612c75578560005260066020526040600020908051906001600160401b0382116120e557612abd8354612254565b601f8111612c38575b50602090601f8311600114612ba15793612b7f93612b27847f29f4fe075b7c5ca209fdf38b7e8b31ebfb8c7714ceba939ed792c1192af27ff49a9895612b7195612b609b99600092612b965750508160011b916000199060031b1c19161790565b90555b7ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce760206040518b8152a1604051968780976121c2565b608060208701526080860190612078565b908482036040860152612078565b60608301969096526001600160a01b0316940390a3565b015190503880612880565b90601f198316918460005260206000209260005b818110612c20575084612b7194612b609a9894612b7f98947f29f4fe075b7c5ca209fdf38b7e8b31ebfb8c7714ceba939ed792c1192af27ff49d9b9860019510612c07575b505050811b019055612b2a565b015160001960f88460031b161c19169055388080612bfa565b92936020600181928786015181550195019301612bb5565b612c6590846000526020600020601f850160051c81019160208610612c6b575b601f0160051c0190612754565b38612ac6565b9091508190612c58565b6040516339e3563760e11b815260006004820152602490fd5b600082815260046020526040902080546001600160a01b031916905580600052600360205260406000206000198154019055612a2c565b60405162461bcd60e51b815260206004820152602260248201527f52656e74616c2070617373657320617265206e6f6e2d7472616e7366657261626044820152616c6560f01b6064820152608490fd5b906004840160005260206000209160005b601f1985168110612d7257509260c0949260019260059583601f19811610612d59575b505050811b016004820155612918565b015160001960f88460031b161c19169055388080612d49565b91926020600181928685015181550194019201612d26565b612db990600485016000526020600020601f850160051c81019160208610612c6b57601f0160051c0190612754565b386128db565b9190600184016000526020600020906000935b601f1984168510612e16576001945083601f19811610612dfd575b505050811b01600182015561289b565b015160001960f88460031b161c19169055388080612ded565b81810151835560209485019460019093019290910190612dd2565b612e6090600185016000526020600020601f850160051c81019160208610612c6b57601f0160051c0190612754565b38612863565b60405162461bcd60e51b8152602060048201526011602482015270131bd8d85d1a5bdb881c995c5d5a5c9959607a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f41636365737320636f646520616c7265616479206578697374730000000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260146024820152731058d8d95cdcc818dbd919481c995c5d5a5c995960621b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f496e76616c696420726563697069656e742061646472657373000000000000006044820152606490fd5b15612f6c57565b60405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606490fd5b919081101561203f5760051b0190565b919081101561203f5760051b81013590601e198136030182121561031b5701908135916001600160401b03831161031b57602001823603811361031b579190565b90613015602060409381855193828580945193849201612055565b8101600b815203019020549081156130ca5781600052600a602052826000206005845191613042836120fb565b61305060ff82541684612748565b85516130638161059d816001860161228e565b602084015260028101549580840196875260038201546060850152516130908161059d816004860161228e565b608084015201549060c060ff83161515928360a084015260018060a01b039060081c16910152806130c057925190565b5082514210925190565b600092508291508190565b156130dc57565b60405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b60405190613125826120fb565b600060c08382815260606020820152826040820152826060820152606060808201528260a08201520152565b6001600160401b0381116120e55760051b60200190565b805182101561203f5760209160051b010190565b6001600160a01b03166000908152600c60205260408120909190825b8154808210156122bc5783906131ae8385612027565b929054600393841b1c146131cc5750506131c790612723565b613198565b929350939060001992838101908111610f3157906129d36131f06131fd9387612027565b905490881b1c9186612027565b825490811561322257508101926132148484612027565b81939154921b1b1916905555565b634e487b7160e01b81526031600452602490fd5b6132408154612254565b908161324a575050565b81601f6000931160011461325c575055565b90808391825261327b601f60208420940160051c840160018501612754565b555556fea264697066735822122039015db26ee3a1df36143860b487e0fa5edd7e9ea5ecb51cdedb14d93b3cf33264736f6c63430008150033",
  "devdoc": {
    "details": "NFT contract for 30-day vehicle access passes - NON-TRANSFERABLE",
    "errors": {
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "batchMintRentalPasses(address[],uint8[],string[],string[],uint256[],string[])": {
        "details": "Batch mint rental passes for efficiency"
      },
      "burnRentalPass(uint256)": {
        "details": "Burn a rental pass and cleanup associated data",
        "params": {
          "tokenId": "Token ID to burn"
        }
      },
      "cleanupExpiredPasses(uint256[])": {
        "details": "Cleanup expired passes (can be called by anyone to maintain state)"
      },
      "deactivatePass(uint256,string)": {
        "details": "Deactivate a rental pass (admin function)"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getPassesExpiringSoon(address)": {
        "details": "Get passes expiring soon (within next 24 hours)"
      },
      "getRentalPass(uint256)": {
        "details": "Get rental pass details"
      },
      "getTokenByAccessCode(string)": {
        "details": "Get token ID by access code"
      },
      "getUserActivePasses(address)": {
        "details": "Get user's active passes"
      },
      "getUserActivePassesWithDetails(address)": {
        "details": "Get user's active passes with details"
      },
      "isAccessCodeValid(string)": {
        "details": "Check if access code is valid without using it"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isPassExpired(uint256)": {
        "details": "Check if pass is expired"
      },
      "mintRentalPass(address,uint8,string,string,uint256,string)": {
        "details": "Mint a rental pass",
        "params": {
          "duration": "Duration in seconds",
          "metadataURI": "URI for the token metadata",
          "passDescription": "Description of the pass",
          "passName": "Name of the pass",
          "to": "Address to mint to",
          "vehicleType": "Type of vehicle"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pause()": {
        "details": "Emergency pause contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "Override supportsInterface"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "Override tokenURI"
      },
      "totalSupply()": {
        "details": "Get total supply of rental passes"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "unpause()": {
        "details": "Unpause contract"
      },
      "validateAndUseAccessCode(string)": {
        "details": "Validate access code and mark as used"
      }
    },
    "stateVariables": {
      "_tokenIdCounter": {
        "details": "Counter for token IDs"
      },
      "accessCodeToToken": {
        "details": "Mapping from access code to token ID (for validation)"
      },
      "accessControl": {
        "details": "Reference to access control contract"
      },
      "isPassActive": {
        "details": "Mapping to track if pass is active"
      },
      "rentalPasses": {
        "details": "Mapping from token ID to rental pass details"
      },
      "userActivePasses": {
        "details": "Mapping from user to active passes (for UI display)"
      }
    },
    "title": "MooveRentalPass",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "These NFTs provide access codes for vehicles and cannot be traded",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 600,
        "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 602,
        "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 606,
        "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 610,
        "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 614,
        "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 620,
        "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1716,
        "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2387,
        "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2277,
        "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
        "label": "_paused",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 14281,
        "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 14287,
        "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
        "label": "rentalPasses",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(RentalPass)14319_storage)"
      },
      {
        "astId": 14292,
        "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
        "label": "accessCodeToToken",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 14298,
        "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
        "label": "userActivePasses",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 14303,
        "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
        "label": "isPassActive",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(VehicleType)14323": {
        "encoding": "inplace",
        "label": "enum MooveRentalPass.VehicleType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(RentalPass)14319_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MooveRentalPass.RentalPass)",
        "numberOfBytes": "32",
        "value": "t_struct(RentalPass)14319_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RentalPass)14319_storage": {
        "encoding": "inplace",
        "label": "struct MooveRentalPass.RentalPass",
        "members": [
          {
            "astId": 14306,
            "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
            "label": "vehicleType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VehicleType)14323"
          },
          {
            "astId": 14308,
            "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
            "label": "accessCode",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 14310,
            "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
            "label": "expirationDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14312,
            "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
            "label": "purchasePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14314,
            "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
            "label": "location",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 14316,
            "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
            "label": "isActive",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 14318,
            "contract": "contracts/MooveRentalPass.sol:MooveRentalPass",
            "label": "originalOwner",
            "offset": 1,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}