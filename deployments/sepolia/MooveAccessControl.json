{
  "address": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "ContractAuthorizationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contact",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "added",
          "type": "bool"
        }
      ],
      "name": "EmergencyContactChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "GlobalPauseStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "TimeLockDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "operationId",
          "type": "bytes32"
        }
      ],
      "name": "TimeLockOperationExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "operationId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "executeAfter",
          "type": "uint256"
        }
      ],
      "name": "TimeLockOperationScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUCTION_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CUSTOMIZATION_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARKETPLACE_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MASTER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ADMINS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "METADATA_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contact",
          "type": "address"
        }
      ],
      "name": "addEmergencyContact",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "authorizeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "contractAddresses",
          "type": "address[]"
        }
      ],
      "name": "batchAuthorizeContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "batchGrantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "batchRevokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canManageAuctions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasAuctionRole",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canManageCustomizations",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasCustomizationRole",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canManageMarketplace",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasMarketplaceRole",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canManagePrices",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasPriceRole",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasMinterRole",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canPause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasPauserRole",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canTrade",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasTraderRole",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasWithdrawRole",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operationId",
          "type": "bytes32"
        }
      ],
      "name": "cancelTimeLockOperation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "deauthorizeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "emergencyContacts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyUnpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operationId",
          "type": "bytes32"
        }
      ],
      "name": "executeTimeLockOperation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "members",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalPause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantMasterAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGloballyPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterAdminCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contact",
          "type": "address"
        }
      ],
      "name": "removeEmergencyContact",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeMasterAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operationId",
          "type": "bytes32"
        }
      ],
      "name": "scheduleTimeLockOperation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeLockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "timelockExecutions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "updateTimeLockDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validateNotPaused",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "validateRole",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
  "receipt": {
    "to": null,
    "from": "0x777382955f33Bb8540602E914D9b650C962EF6Cc",
    "contractAddress": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
    "transactionIndex": 3,
    "gasUsed": "2444012",
    "logsBloom": "0x
    "blockHash": "0x3eb565b4a95a0d8b114620c1e9dffd60f12e1e64c7a8f438aad2f6b92c4a8c10",
    "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 8924683,
        "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
        "address": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000777382955f33bb8540602e914d9b650c962ef6cc",
          "0x000000000000000000000000777382955f33bb8540602e914d9b650c962ef6cc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3eb565b4a95a0d8b114620c1e9dffd60f12e1e64c7a8f438aad2f6b92c4a8c10"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8924683,
        "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
        "address": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf83591f6d256ac9a12084d6de9c89a3e1fd09d594aa1184c76eef05bae103fc3",
          "0x000000000000000000000000777382955f33bb8540602e914d9b650c962ef6cc",
          "0x000000000000000000000000777382955f33bb8540602e914d9b650c962ef6cc"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x3eb565b4a95a0d8b114620c1e9dffd60f12e1e64c7a8f438aad2f6b92c4a8c10"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8924683,
        "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
        "address": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xf83591f6d256ac9a12084d6de9c89a3e1fd09d594aa1184c76eef05bae103fc3"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x3eb565b4a95a0d8b114620c1e9dffd60f12e1e64c7a8f438aad2f6b92c4a8c10"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8924683,
        "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
        "address": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xfc15875e223f196de4d28f104664030b8067b4a40d0372ee3095567046e5e0b3",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xf83591f6d256ac9a12084d6de9c89a3e1fd09d594aa1184c76eef05bae103fc3"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x3eb565b4a95a0d8b114620c1e9dffd60f12e1e64c7a8f438aad2f6b92c4a8c10"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8924683,
        "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
        "address": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x368a0a902ce0a8be883cdf3d5cbaaae7bbbf3f9f0aa7ad2c137c77c3a72ca6b6",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xf83591f6d256ac9a12084d6de9c89a3e1fd09d594aa1184c76eef05bae103fc3"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x3eb565b4a95a0d8b114620c1e9dffd60f12e1e64c7a8f438aad2f6b92c4a8c10"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8924683,
        "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
        "address": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x3515f38d031dcbca5f1dac4c5afc1efca2020e42efdd9c5806ae7e963d18435a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xf83591f6d256ac9a12084d6de9c89a3e1fd09d594aa1184c76eef05bae103fc3"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x3eb565b4a95a0d8b114620c1e9dffd60f12e1e64c7a8f438aad2f6b92c4a8c10"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8924683,
        "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
        "address": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xf83591f6d256ac9a12084d6de9c89a3e1fd09d594aa1184c76eef05bae103fc3"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x3eb565b4a95a0d8b114620c1e9dffd60f12e1e64c7a8f438aad2f6b92c4a8c10"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8924683,
        "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
        "address": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e4",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xf83591f6d256ac9a12084d6de9c89a3e1fd09d594aa1184c76eef05bae103fc3"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x3eb565b4a95a0d8b114620c1e9dffd60f12e1e64c7a8f438aad2f6b92c4a8c10"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8924683,
        "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
        "address": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xf83591f6d256ac9a12084d6de9c89a3e1fd09d594aa1184c76eef05bae103fc3"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x3eb565b4a95a0d8b114620c1e9dffd60f12e1e64c7a8f438aad2f6b92c4a8c10"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8924683,
        "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
        "address": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x21e141d29efe528175baa3d6b347407f49288a1a3c0aebcc3160cd2b50b2a9c1",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xf83591f6d256ac9a12084d6de9c89a3e1fd09d594aa1184c76eef05bae103fc3"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x3eb565b4a95a0d8b114620c1e9dffd60f12e1e64c7a8f438aad2f6b92c4a8c10"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8924683,
        "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
        "address": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xfacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b0731941",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xf83591f6d256ac9a12084d6de9c89a3e1fd09d594aa1184c76eef05bae103fc3"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x3eb565b4a95a0d8b114620c1e9dffd60f12e1e64c7a8f438aad2f6b92c4a8c10"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8924683,
        "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
        "address": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xeaf9385a147c4441b7cff84a8a185a566b6f7c496b77a003346be0e333369741",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xf83591f6d256ac9a12084d6de9c89a3e1fd09d594aa1184c76eef05bae103fc3"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x3eb565b4a95a0d8b114620c1e9dffd60f12e1e64c7a8f438aad2f6b92c4a8c10"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8924683,
        "transactionHash": "0x8f55ceb45a6a14ed06a281c05cc7ace6ca5d215a9e1c9c5cf697211b44657ceb",
        "address": "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
        "topics": [
          "0xcdb0db5c0ab5eddbcdc56346bb309a4dd8a580c6674ad19af69084dab0c33f7c",
          "0x000000000000000000000000777382955f33bb8540602e914d9b650c962ef6cc"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 12,
        "blockHash": "0x3eb565b4a95a0d8b114620c1e9dffd60f12e1e64c7a8f438aad2f6b92c4a8c10"
      }
    ],
    "blockNumber": 8924683,
    "cumulativeGasUsed": "2507012",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x777382955f33Bb8540602E914D9b650C962EF6Cc"
  ],
  "numDeployments": 1,
  "solcInputHash": "cf9183c5756e95f1fc92655ea94dc824",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"ContractAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contact\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"EmergencyContactChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"GlobalPauseStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"TimeLockDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"TimeLockOperationExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executeAfter\",\"type\":\"uint256\"}],\"name\":\"TimeLockOperationScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUSTOMIZATION_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETPLACE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ADMINS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METADATA_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contact\",\"type\":\"address\"}],\"name\":\"addEmergencyContact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"authorizeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"}],\"name\":\"batchAuthorizeContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"batchGrantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"batchRevokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canManageAuctions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasAuctionRole\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canManageCustomizations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasCustomizationRole\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canManageMarketplace\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasMarketplaceRole\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canManagePrices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasPriceRole\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasMinterRole\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasPauserRole\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasTraderRole\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasWithdrawRole\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"cancelTimeLockOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"deauthorizeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"emergencyContacts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"executeTimeLockOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantMasterAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGloballyPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterAdminCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contact\",\"type\":\"address\"}],\"name\":\"removeEmergencyContact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeMasterAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"scheduleTimeLockOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"timelockExecutions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"updateTimeLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validateNotPaused\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"validateRole\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Centralized access control system for the Moove ecosystem\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"ContractAuthorizationChanged(address,bool)\":{\"details\":\"Emitted when a contract is authorized or deauthorized\"},\"EmergencyContactChanged(address,bool)\":{\"details\":\"Emitted when an emergency contact is added or removed\"},\"GlobalPauseStateChanged(bool)\":{\"details\":\"Emitted when global pause state changes\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TimeLockDurationUpdated(uint256,uint256)\":{\"details\":\"Emitted when timelock duration is updated\"},\"TimeLockOperationExecuted(bytes32)\":{\"details\":\"Emitted when a time-locked operation is executed\"},\"TimeLockOperationScheduled(bytes32,uint256)\":{\"details\":\"Emitted when a time-locked operation is scheduled\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addEmergencyContact(address)\":{\"details\":\"Add emergency contact\",\"params\":{\"contact\":\"Address to add as emergency contact\"}},\"authorizeContract(address)\":{\"details\":\"Authorize a contract to interact with the system\",\"params\":{\"contractAddress\":\"Address of the contract to authorize\"}},\"batchAuthorizeContracts(address[])\":{\"details\":\"Batch authorize multiple contracts\",\"params\":{\"contractAddresses\":\"Array of contract addresses to authorize\"}},\"batchGrantRole(bytes32,address[])\":{\"details\":\"Batch grant roles to multiple addresses\",\"params\":{\"accounts\":\"Array of addresses to grant the role to\",\"role\":\"The role to grant\"}},\"batchRevokeRole(bytes32,address[])\":{\"details\":\"Batch revoke roles from multiple addresses\",\"params\":{\"accounts\":\"Array of addresses to revoke the role from\",\"role\":\"The role to revoke\"}},\"canManageAuctions(address)\":{\"details\":\"Check if an address can manage auctions\",\"params\":{\"account\":\"Address to check\"},\"returns\":{\"hasAuctionRole\":\"True if address can manage auctions\"}},\"canManageCustomizations(address)\":{\"details\":\"Check if an address can manage customizations\",\"params\":{\"account\":\"Address to check\"},\"returns\":{\"hasCustomizationRole\":\"True if address can manage customizations\"}},\"canManageMarketplace(address)\":{\"details\":\"Check if user is able to use Marketplace\",\"params\":{\"account\":\"Account check\"}},\"canManagePrices(address)\":{\"details\":\"Check if an address can manage prices\",\"params\":{\"account\":\"Address to check\"},\"returns\":{\"hasPriceRole\":\"True if address can manage prices\"}},\"canMint(address)\":{\"details\":\"Check if an address has minting permissions\",\"params\":{\"account\":\"Address to check\"},\"returns\":{\"hasMinterRole\":\"True if address can mint\"}},\"canPause(address)\":{\"details\":\"Check if an address can pause contracts\",\"params\":{\"account\":\"Address to check\"},\"returns\":{\"hasPauserRole\":\"True if address can pause\"}},\"canTrade(address)\":{\"details\":\"Check if user is able to trade\",\"params\":{\"account\":\"Account check\"}},\"canWithdraw(address)\":{\"details\":\"Check if an address can withdraw funds\",\"params\":{\"account\":\"Address to check\"},\"returns\":{\"hasWithdrawRole\":\"True if address can withdraw\"}},\"cancelTimeLockOperation(bytes32)\":{\"details\":\"Cancel a time-locked operation\",\"params\":{\"operationId\":\"Unique identifier for the operation\"}},\"constructor\":{\"details\":\"Constructor sets up initial roles and admin\",\"params\":{\"initialAdmin\":\"Address to be granted master admin role\"}},\"deauthorizeContract(address)\":{\"details\":\"Deauthorize a contract\",\"params\":{\"contractAddress\":\"Address of the contract to deauthorize\"}},\"emergencyPause()\":{\"details\":\"Emergency pause - can be called by emergency contacts\"},\"emergencyUnpause()\":{\"details\":\"Emergency unpause - requires master admin\"},\"executeTimeLockOperation(bytes32)\":{\"details\":\"Execute time-locked operation validation\",\"params\":{\"operationId\":\"The operation ID to validate\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Get number of members for a specific role\",\"params\":{\"role\":\"The role to query\"},\"returns\":{\"count\":\"Number of addresses with the role\"}},\"getRoleMembers(bytes32)\":{\"details\":\"Get all role members for a specific role\",\"params\":{\"role\":\"The role to query\"},\"returns\":{\"members\":\"Array of addresses with the role\"}},\"grantMasterAdmin(address)\":{\"details\":\"Grant master admin role with safety checks\",\"params\":{\"account\":\"Address to grant master admin role\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isGloballyPaused()\":{\"details\":\"Check if the system is in global pause state\",\"returns\":{\"isPaused\":\"True if globally paused\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeEmergencyContact(address)\":{\"details\":\"Remove emergency contact\",\"params\":{\"contact\":\"Address to remove as emergency contact\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeMasterAdmin(address)\":{\"details\":\"Revoke master admin role with safety checks\",\"params\":{\"account\":\"Address to revoke master admin role from\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"scheduleTimeLockOperation(bytes32)\":{\"details\":\"Schedule a time-locked operation\",\"params\":{\"operationId\":\"Unique identifier for the operation\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateTimeLockDuration(uint256)\":{\"details\":\"Update timelock duration\",\"params\":{\"newDuration\":\"New duration in seconds\"}},\"validateNotPaused()\":{\"details\":\"Validate that system is not paused (called by other contracts)\"},\"validateRole(bytes32,address)\":{\"details\":\"Validate that caller has required role (called by other contracts)\",\"params\":{\"account\":\"The account to validate\",\"role\":\"The role to check\"}}},\"stateVariables\":{\"AUCTION_MANAGER_ROLE\":{\"details\":\"Auction and marketplace management\"},\"CUSTOMIZATION_ADMIN_ROLE\":{\"details\":\"Vehicle customization management\"},\"MASTER_ADMIN_ROLE\":{\"details\":\"Master admin role - can grant/revoke all other roles\"},\"MAX_ADMINS\":{\"details\":\"Maximum number of admins allowed\"},\"METADATA_MANAGER_ROLE\":{\"details\":\"Metadata management permissions\"},\"MINTER_ROLE\":{\"details\":\"NFT minting permissions\"},\"PAUSER_ROLE\":{\"details\":\"Emergency pause permissions\"},\"PRICE_MANAGER_ROLE\":{\"details\":\"Price and fee management\"},\"UPGRADER_ROLE\":{\"details\":\"Contract upgrade permissions\"},\"WITHDRAWER_ROLE\":{\"details\":\"Fund withdrawal permissions\"},\"_roleMembers\":{\"details\":\"Mapping to track role members for enumeration (if needed)\"},\"authorizedContracts\":{\"details\":\"Mapping to track authorized contract addresses\"},\"emergencyContacts\":{\"details\":\"Mapping to track emergency contacts\"},\"globalPause\":{\"details\":\"Global pause state that affects all contracts\"},\"masterAdminCount\":{\"details\":\"Current number of master admins\"},\"timeLockDuration\":{\"details\":\"Time lock duration for critical operations (in seconds)\"},\"timelockExecutions\":{\"details\":\"Mapping to track time-locked operations\"}},\"title\":\"MooveAccessControl\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Manages roles, permissions, and security features across all Moove contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MooveAccessControl.sol\":\"MooveAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/MooveAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MooveAccessControl\\r\\n * @dev Centralized access control system for the Moove ecosystem\\r\\n * @notice Manages roles, permissions, and security features across all Moove contracts\\r\\n */\\r\\ncontract MooveAccessControl is AccessControl, Pausable, ReentrancyGuard {\\r\\n    // ============= ROLE DEFINITIONS =============\\r\\n\\r\\n    /// @dev Master admin role - can grant/revoke all other roles\\r\\n    bytes32 public constant MASTER_ADMIN_ROLE = keccak256(\\\"MASTER_ADMIN_ROLE\\\");\\r\\n\\r\\n    /// @dev NFT minting permissions\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n\\r\\n    /// @dev Auction and marketplace management\\r\\n    bytes32 public constant AUCTION_MANAGER_ROLE =\\r\\n        keccak256(\\\"AUCTION_MANAGER_ROLE\\\");\\r\\n\\r\\n    /// @dev Vehicle customization management\\r\\n    bytes32 public constant CUSTOMIZATION_ADMIN_ROLE =\\r\\n        keccak256(\\\"CUSTOMIZATION_ADMIN_ROLE\\\");\\r\\n\\r\\n    /// @dev Price and fee management\\r\\n    bytes32 public constant PRICE_MANAGER_ROLE =\\r\\n        keccak256(\\\"PRICE_MANAGER_ROLE\\\");\\r\\n\\r\\n    /// @dev Emergency pause permissions\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\r\\n\\r\\n    /// @dev Fund withdrawal permissions\\r\\n    bytes32 public constant WITHDRAWER_ROLE = keccak256(\\\"WITHDRAWER_ROLE\\\");\\r\\n\\r\\n    /// @dev Contract upgrade permissions\\r\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\r\\n\\r\\n    /// @dev Metadata management permissions\\r\\n    bytes32 public constant METADATA_MANAGER_ROLE =\\r\\n        keccak256(\\\"METADATA_MANAGER_ROLE\\\");\\r\\n\\r\\n    bytes32 public constant TRADER_ROLE = keccak256(\\\"TRADER_ROLE\\\");\\r\\n    bytes32 public constant MARKETPLACE_MANAGER_ROLE =\\r\\n        keccak256(\\\"MARKETPLACE_MANAGER_ROLE\\\");\\r\\n\\r\\n    // ============= STATE VARIABLES =============\\r\\n\\r\\n    /// @dev Mapping to track authorized contract addresses\\r\\n    mapping(address => bool) public authorizedContracts;\\r\\n\\r\\n    /// @dev Mapping to track emergency contacts\\r\\n    mapping(address => bool) public emergencyContacts;\\r\\n\\r\\n    /// @dev Time lock duration for critical operations (in seconds)\\r\\n    uint256 public timeLockDuration = 24 hours;\\r\\n\\r\\n    /// @dev Mapping to track time-locked operations\\r\\n    mapping(bytes32 => uint256) public timelockExecutions;\\r\\n\\r\\n    /// @dev Mapping to track role members for enumeration (if needed)\\r\\n    mapping(bytes32 => address[]) private _roleMembers;\\r\\n    mapping(bytes32 => mapping(address => uint256)) private _roleMemberIndex;\\r\\n\\r\\n    /// @dev Global pause state that affects all contracts\\r\\n    bool public globalPause = false;\\r\\n\\r\\n    /// @dev Maximum number of admins allowed\\r\\n    uint256 public constant MAX_ADMINS = 10;\\r\\n\\r\\n    /// @dev Current number of master admins\\r\\n    uint256 public masterAdminCount = 0;\\r\\n\\r\\n    // ============= EVENTS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a contract is authorized or deauthorized\\r\\n     */\\r\\n    event ContractAuthorizationChanged(\\r\\n        address indexed contractAddress,\\r\\n        bool authorized\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when an emergency contact is added or removed\\r\\n     */\\r\\n    event EmergencyContactChanged(address indexed contact, bool added);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when timelock duration is updated\\r\\n     */\\r\\n    event TimeLockDurationUpdated(uint256 oldDuration, uint256 newDuration);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a time-locked operation is scheduled\\r\\n     */\\r\\n    event TimeLockOperationScheduled(\\r\\n        bytes32 indexed operationId,\\r\\n        uint256 executeAfter\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a time-locked operation is executed\\r\\n     */\\r\\n    event TimeLockOperationExecuted(bytes32 indexed operationId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when global pause state changes\\r\\n     */\\r\\n    event GlobalPauseStateChanged(bool paused);\\r\\n\\r\\n    // ============= MODIFIERS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if caller is an authorized contract\\r\\n     */\\r\\n    modifier onlyAuthorizedContract() {\\r\\n        require(authorizedContracts[msg.sender], \\\"Not authorized contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if caller is emergency contact\\r\\n     */\\r\\n    modifier onlyEmergencyContact() {\\r\\n        require(\\r\\n            emergencyContacts[msg.sender] ||\\r\\n                hasRole(MASTER_ADMIN_ROLE, msg.sender),\\r\\n            \\\"Not emergency contact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to ensure global pause is not active\\r\\n     */\\r\\n    modifier whenNotGloballyPaused() {\\r\\n        require(!globalPause, \\\"Globally paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier for time-locked operations\\r\\n     */\\r\\n    modifier onlyAfterTimelock(bytes32 operationId) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] != 0 &&\\r\\n                block.timestamp >= timelockExecutions[operationId],\\r\\n            \\\"Operation not ready or not scheduled\\\"\\r\\n        );\\r\\n        _;\\r\\n        delete timelockExecutions[operationId];\\r\\n    }\\r\\n\\r\\n    // ============= CONSTRUCTOR =============\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor sets up initial roles and admin\\r\\n     * @param initialAdmin Address to be granted master admin role\\r\\n     */\\r\\n    constructor(address initialAdmin) {\\r\\n        require(initialAdmin != address(0), \\\"Invalid admin address\\\");\\r\\n\\r\\n        // Grant master admin role to initial admin\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialAdmin);\\r\\n        _grantRole(MASTER_ADMIN_ROLE, initialAdmin);\\r\\n\\r\\n        // Set master admin as role admin for all roles\\r\\n        _setRoleAdmin(MINTER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(AUCTION_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(CUSTOMIZATION_ADMIN_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(PRICE_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(PAUSER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(WITHDRAWER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(UPGRADER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(METADATA_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(TRADER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(MARKETPLACE_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n\\r\\n        // Add initial admin as emergency contact\\r\\n        emergencyContacts[initialAdmin] = true;\\r\\n        masterAdminCount = 1;\\r\\n\\r\\n        emit EmergencyContactChanged(initialAdmin, true);\\r\\n    }\\r\\n\\r\\n    // ============= ROLE MANAGEMENT =============\\r\\n\\r\\n    /**\\r\\n     * @dev Grant master admin role with safety checks\\r\\n     * @param account Address to grant master admin role\\r\\n     */\\r\\n    function grantMasterAdmin(\\r\\n        address account\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(account != address(0), \\\"Invalid address\\\");\\r\\n        require(masterAdminCount < MAX_ADMINS, \\\"Too many admins\\\");\\r\\n        require(!hasRole(MASTER_ADMIN_ROLE, account), \\\"Already master admin\\\");\\r\\n\\r\\n        _grantRole(MASTER_ADMIN_ROLE, account);\\r\\n        emergencyContacts[account] = true;\\r\\n        masterAdminCount++;\\r\\n\\r\\n        emit EmergencyContactChanged(account, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revoke master admin role with safety checks\\r\\n     * @param account Address to revoke master admin role from\\r\\n     */\\r\\n    function revokeMasterAdmin(\\r\\n        address account\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(account != msg.sender, \\\"Cannot revoke own admin\\\");\\r\\n        require(masterAdminCount > 1, \\\"Cannot remove last admin\\\");\\r\\n        require(hasRole(MASTER_ADMIN_ROLE, account), \\\"Not master admin\\\");\\r\\n\\r\\n        _revokeRole(MASTER_ADMIN_ROLE, account);\\r\\n        emergencyContacts[account] = false;\\r\\n        masterAdminCount--;\\r\\n\\r\\n        emit EmergencyContactChanged(account, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch grant roles to multiple addresses\\r\\n     * @param role The role to grant\\r\\n     * @param accounts Array of addresses to grant the role to\\r\\n     */\\r\\n    function batchGrantRole(\\r\\n        bytes32 role,\\r\\n        address[] calldata accounts\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            if (!hasRole(role, accounts[i])) {\\r\\n                _grantRole(role, accounts[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch revoke roles from multiple addresses\\r\\n     * @param role The role to revoke\\r\\n     * @param accounts Array of addresses to revoke the role from\\r\\n     */\\r\\n    function batchRevokeRole(\\r\\n        bytes32 role,\\r\\n        address[] calldata accounts\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            if (hasRole(role, accounts[i])) {\\r\\n                _revokeRole(role, accounts[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============= CONTRACT AUTHORIZATION =============\\r\\n\\r\\n    /**\\r\\n     * @dev Authorize a contract to interact with the system\\r\\n     * @param contractAddress Address of the contract to authorize\\r\\n     */\\r\\n    function authorizeContract(\\r\\n        address contractAddress\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(contractAddress != address(0), \\\"Invalid contract address\\\");\\r\\n        require(contractAddress.code.length > 0, \\\"Not a contract\\\");\\r\\n\\r\\n        authorizedContracts[contractAddress] = true;\\r\\n        emit ContractAuthorizationChanged(contractAddress, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deauthorize a contract\\r\\n     * @param contractAddress Address of the contract to deauthorize\\r\\n     */\\r\\n    function deauthorizeContract(\\r\\n        address contractAddress\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        authorizedContracts[contractAddress] = false;\\r\\n        emit ContractAuthorizationChanged(contractAddress, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch authorize multiple contracts\\r\\n     * @param contractAddresses Array of contract addresses to authorize\\r\\n     */\\r\\n    function batchAuthorizeContracts(\\r\\n        address[] calldata contractAddresses\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < contractAddresses.length; i++) {\\r\\n            if (\\r\\n                contractAddresses[i] != address(0) &&\\r\\n                contractAddresses[i].code.length > 0\\r\\n            ) {\\r\\n                authorizedContracts[contractAddresses[i]] = true;\\r\\n                emit ContractAuthorizationChanged(contractAddresses[i], true);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if user is able to trade\\r\\n     * @param account Account check\\r\\n     */\\r\\n\\r\\n    function canTrade(\\r\\n        address account\\r\\n    ) external view returns (bool hasTraderRole) {\\r\\n        return\\r\\n            hasRole(TRADER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if user is able to use Marketplace\\r\\n     * @param account Account check\\r\\n     */\\r\\n\\r\\n    function canManageMarketplace(\\r\\n        address account\\r\\n    ) external view returns (bool hasMarketplaceRole) {\\r\\n        return\\r\\n            hasRole(MARKETPLACE_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    // ============= EMERGENCY MANAGEMENT =============\\r\\n\\r\\n    /**\\r\\n     * @dev Add emergency contact\\r\\n     * @param contact Address to add as emergency contact\\r\\n     */\\r\\n    function addEmergencyContact(\\r\\n        address contact\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(contact != address(0), \\\"Invalid contact address\\\");\\r\\n\\r\\n        emergencyContacts[contact] = true;\\r\\n        emit EmergencyContactChanged(contact, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove emergency contact\\r\\n     * @param contact Address to remove as emergency contact\\r\\n     */\\r\\n    function removeEmergencyContact(\\r\\n        address contact\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        emergencyContacts[contact] = false;\\r\\n        emit EmergencyContactChanged(contact, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency pause - can be called by emergency contacts\\r\\n     */\\r\\n    function emergencyPause() external onlyEmergencyContact {\\r\\n        globalPause = true;\\r\\n        _pause();\\r\\n        emit GlobalPauseStateChanged(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency unpause - requires master admin\\r\\n     */\\r\\n    function emergencyUnpause() external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        globalPause = false;\\r\\n        _unpause();\\r\\n        emit GlobalPauseStateChanged(false);\\r\\n    }\\r\\n\\r\\n    // ============= TIME LOCK OPERATIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Schedule a time-locked operation\\r\\n     * @param operationId Unique identifier for the operation\\r\\n     */\\r\\n    function scheduleTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] == 0,\\r\\n            \\\"Operation already scheduled\\\"\\r\\n        );\\r\\n\\r\\n        uint256 executeAfter = block.timestamp + timeLockDuration;\\r\\n        timelockExecutions[operationId] = executeAfter;\\r\\n\\r\\n        emit TimeLockOperationScheduled(operationId, executeAfter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Cancel a time-locked operation\\r\\n     * @param operationId Unique identifier for the operation\\r\\n     */\\r\\n    function cancelTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] != 0,\\r\\n            \\\"Operation not scheduled\\\"\\r\\n        );\\r\\n\\r\\n        delete timelockExecutions[operationId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update timelock duration\\r\\n     * @param newDuration New duration in seconds\\r\\n     */\\r\\n    function updateTimeLockDuration(\\r\\n        uint256 newDuration\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            newDuration >= 1 hours && newDuration <= 7 days,\\r\\n            \\\"Invalid duration\\\"\\r\\n        );\\r\\n\\r\\n        uint256 oldDuration = timeLockDuration;\\r\\n        timeLockDuration = newDuration;\\r\\n\\r\\n        emit TimeLockDurationUpdated(oldDuration, newDuration);\\r\\n    }\\r\\n\\r\\n    // ============= QUERY FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address has minting permissions\\r\\n     * @param account Address to check\\r\\n     * @return hasMinterRole True if address can mint\\r\\n     */\\r\\n    function canMint(\\r\\n        address account\\r\\n    ) external view returns (bool hasMinterRole) {\\r\\n        return\\r\\n            hasRole(MINTER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage auctions\\r\\n     * @param account Address to check\\r\\n     * @return hasAuctionRole True if address can manage auctions\\r\\n     */\\r\\n    function canManageAuctions(\\r\\n        address account\\r\\n    ) external view returns (bool hasAuctionRole) {\\r\\n        return\\r\\n            hasRole(AUCTION_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage customizations\\r\\n     * @param account Address to check\\r\\n     * @return hasCustomizationRole True if address can manage customizations\\r\\n     */\\r\\n    function canManageCustomizations(\\r\\n        address account\\r\\n    ) external view returns (bool hasCustomizationRole) {\\r\\n        return\\r\\n            hasRole(CUSTOMIZATION_ADMIN_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage prices\\r\\n     * @param account Address to check\\r\\n     * @return hasPriceRole True if address can manage prices\\r\\n     */\\r\\n    function canManagePrices(\\r\\n        address account\\r\\n    ) external view returns (bool hasPriceRole) {\\r\\n        return\\r\\n            hasRole(PRICE_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can pause contracts\\r\\n     * @param account Address to check\\r\\n     * @return hasPauserRole True if address can pause\\r\\n     */\\r\\n    function canPause(\\r\\n        address account\\r\\n    ) external view returns (bool hasPauserRole) {\\r\\n        return\\r\\n            hasRole(PAUSER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account) ||\\r\\n            emergencyContacts[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can withdraw funds\\r\\n     * @param account Address to check\\r\\n     * @return hasWithdrawRole True if address can withdraw\\r\\n     */\\r\\n    function canWithdraw(\\r\\n        address account\\r\\n    ) external view returns (bool hasWithdrawRole) {\\r\\n        return\\r\\n            hasRole(WITHDRAWER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get all role members for a specific role\\r\\n     * @param role The role to query\\r\\n     * @return members Array of addresses with the role\\r\\n     */\\r\\n    function getRoleMembers(\\r\\n        bytes32 role\\r\\n    ) external view returns (address[] memory members) {\\r\\n        return _roleMembers[role];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get number of members for a specific role\\r\\n     * @param role The role to query\\r\\n     * @return count Number of addresses with the role\\r\\n     */\\r\\n    function getRoleMemberCount(\\r\\n        bytes32 role\\r\\n    ) external view returns (uint256 count) {\\r\\n        return _roleMembers[role].length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Execute time-locked operation validation\\r\\n     * @param operationId The operation ID to validate\\r\\n     */\\r\\n    function executeTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) onlyAfterTimelock(operationId) {\\r\\n        emit TimeLockOperationExecuted(operationId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if the system is in global pause state\\r\\n     * @return isPaused True if globally paused\\r\\n     */\\r\\n    function isGloballyPaused() external view returns (bool isPaused) {\\r\\n        return globalPause;\\r\\n    }\\r\\n\\r\\n    // ============= EXTERNAL VALIDATION FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Validate that caller has required role (called by other contracts)\\r\\n     * @param role The role to check\\r\\n     * @param account The account to validate\\r\\n     */\\r\\n    function validateRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) external view onlyAuthorizedContract {\\r\\n        require(\\r\\n            hasRole(role, account) || hasRole(MASTER_ADMIN_ROLE, account),\\r\\n            \\\"Access denied\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validate that system is not paused (called by other contracts)\\r\\n     */\\r\\n    function validateNotPaused() external view onlyAuthorizedContract {\\r\\n        require(!globalPause && !paused(), \\\"System paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override _grantRole to track role members\\r\\n     */\\r\\n    function _grantRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) internal override returns (bool) {\\r\\n        super._grantRole(role, account);\\r\\n\\r\\n        // Track role member for enumeration\\r\\n        if (_roleMemberIndex[role][account] == 0) {\\r\\n            _roleMembers[role].push(account);\\r\\n            _roleMemberIndex[role][account] = _roleMembers[role].length;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override _revokeRole to untrack role members\\r\\n     */\\r\\n    function _revokeRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) internal override returns (bool) {\\r\\n        super._revokeRole(role, account);\\r\\n\\r\\n        // Remove from role member tracking\\r\\n        uint256 index = _roleMemberIndex[role][account];\\r\\n        if (index > 0) {\\r\\n            uint256 lastIndex = _roleMembers[role].length;\\r\\n            address lastMember = _roleMembers[role][lastIndex - 1];\\r\\n\\r\\n            // Move last member to the position of the removed member\\r\\n            _roleMembers[role][index - 1] = lastMember;\\r\\n            _roleMemberIndex[role][lastMember] = index;\\r\\n\\r\\n            // Remove last element\\r\\n            _roleMembers[role].pop();\\r\\n            delete _roleMemberIndex[role][account];\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0fa63b562a209458f5838960171dc2a40198e14208332f6a742a7f399f4e7769\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200048957601f6200276b38819003918201601f19168301916001600160401b038311848410176200048e5780849260409485528339602093849181010312620004895751916001600160a01b0383169081840362000489576001806002556201518060055560ff19806009541660095560009586600a55841562000445576200008c81620004a4565b508680526008845285872085885284528587205415620003e1575b620000b29062000524565b506000805160206200274b833981519152808752600884528587208588528452858720541562000355575b857fcdb0db5c0ab5eddbcdc56346bb309a4dd8a580c6674ad19af69084dab0c33f7c95969784927f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a680835282885281858585200181815491557fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff92838680a4817ffc15875e223f196de4d28f104664030b8067b4a40d0372ee3095567046e5e0b38085528686862001908282549255838680a4817f368a0a902ce0a8be883cdf3d5cbaaae7bbbf3f9f0aa7ad2c137c77c3a72ca6b68085528686862001908282549255838680a4817f3515f38d031dcbca5f1dac4c5afc1efca2020e42efdd9c5806ae7e963d18435a8085528686862001908282549255838680a4817f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8085528686862001908282549255838680a4817f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e48085528686862001908282549255838680a4817f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e38085528686862001908282549255838680a4817f21e141d29efe528175baa3d6b347407f49288a1a3c0aebcc3160cd2b50b2a9c18085528686862001908282549255838680a4817ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b07319418085528686862001908282549255838680a47feaf9385a147c4441b7cff84a8a185a566b6f7c496b77a003346be0e33336974180845285858520019183835493558480a487815260048652209182541617905580600a558451908152a2516121759081620005b68239f35b8087526007845285872080549068010000000000000000821015620003cd57848201808255821015620003b95788528488200180546001600160a01b03191686179055808752600784528587205460088552868820868952855286882055620000dd565b634e487b7160e01b89526032600452602489fd5b634e487b7160e01b89526041600452602489fd5b8680526007845285872080549068010000000000000000821015620003cd57848201808255821015620003b95788528488200180546001600160a01b03191686179055868052600784528587205460088552868820868952855286882055620000a7565b855162461bcd60e51b815260048101859052601560248201527f496e76616c69642061646d696e206164647265737300000000000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b031660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff166200052057818052816020526040822081835260205260408220600160ff1982541617905533916000805160206200272b8339815191528180a4600190565b5090565b6001600160a01b031660008181527fd815dd9c622669a9e0b8a0d8cf57cad1f0f8a786142881c7a6dc3b3b61e0976d60205260408120549091906000805160206200274b8339815191529060ff16620005b057808352826020526040832082845260205260408320600160ff198254161790556000805160206200272b833981519152339380a4600190565b50509056fe608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a714611aea5750816319262d3014611a7a578163248a9ca314611a5057816324bf7f2a14611a345781632f2ff15d14611a0a5781632f80123f1461196557816331aab7591461192a57816336568abe146118e4578163401a83ab1461170357816346b5cb59146116a15781634a4e3bd51461160557816351858e27146114ef578163529470e8146114b4578163559f05dc14611444578163587d94be146114095781635c975abb146113e557816367561d93146112f05781636e861c0e146112865781636f39feec146111fe57816372c458911461115257816375b24ebe1461109c5781637ab7236d1461060a5781637d6152861461106157816380d1518814610f9d57816384e0f2ad14610ed257816385f438c114610e975781638aea052714610d8f5781638b3ceb3d14610d6757816391d1485414610d21578163a217fddf14610d06578163a29d671714610ccb578163a3246ad314610bf0578163af2bde7a14610b80578163afce913714610afc578163b22bfb0f14610a8c578163b8b8183614610a6d578163c2ba4744146109fd578163c7a04c15146109c0578163ca15c87314610998578163cc43714514610928578163cdbef3ed146108d0578163cfdf3c4e146108a7578163d53913931461086c578163d547741f1461082d578163d5b9221b146107ef578163dff4366c14610724578163e63ab1e9146106e9578163e97868a514610669578163f0a56fc81461062e578163f12d54d81461060a578163f18510961461056a578163f673924a146102d257508063f72c0d8b146102985763ff96df441461027757600080fd5b346102945781600319360112610294576020906005549051908152f35b5080fd5b5034610294578160031936011261029457602090517f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e38152f35b83833461029457602080600319360112610566576102ee611b3d565b916102f7611bd3565b6001600160a01b038381169390338514610523576001600a5411156104e05760008051602061212083398151915291828752868552838720868852855260ff8488205416156104aa5761034990611ff1565b5081865260088452828620858752845282862054806103b0575b505050848252808420805460ff19169055600a54801561039d5760001901600a55518381526000805160206121008339815191529190a280f35b634e487b7160e01b855260118652602485fd5b828752600785528387208054600019939184820191821161049757906103d591611d0c565b90549060031b1c1683885260078652848820838301908382116104975761040061041e928492611d0c565b90919060018060a01b038084549260031b9316831b921b1916179055565b838852600886528488209088528552838720558186526007845282862090815480156104845701906104686104538383611d0c565b81549060018060a01b039060031b1b19169055565b5584526008825280842083855282528381812055858080610363565b634e487b7160e01b885260318952602488fd5b634e487b7160e01b8a5260118b5260248afd5b835162461bcd60e51b8152808901869052601060248201526f2737ba1036b0b9ba32b91030b236b4b760811b6044820152606490fd5b825162461bcd60e51b8152808801859052601860248201527f43616e6e6f742072656d6f7665206c6173742061646d696e00000000000000006044820152606490fd5b825162461bcd60e51b8152808801859052601760248201527f43616e6e6f74207265766f6b65206f776e2061646d696e0000000000000000006044820152606490fd5b8280fd5b828434610607576020918260031936011261029457610587611b3d565b7ffc15875e223f196de4d28f104664030b8067b4a40d0372ee3095567046e5e0b383528284528183206001600160a01b039091168084529084528183205460ff16929083156105db575b5050519015158152f35b600080516020612120833981519152825281855282822090825284528190205460ff16915083806105d1565b80fd5b50503461029457816003193601126102945760209060ff6009541690519015158152f35b505034610294578160031936011261029457602090517ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b07319418152f35b91905034610566578260031936011261056657338352600360205261069360ff8285205416611cc0565b60ff6009541615806106dc575b156106a9578280f35b906020606492519162461bcd60e51b8352820152600d60248201526c14de5cdd195b481c185d5cd959609a1b6044820152fd5b5060ff60015416156106a0565b505034610294578160031936011261029457602090517f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8152f35b90503461056657602036600319011261056657803591610742611bd3565b8284526006602052808420546107ac5760055442019182421161079957507f63aa8006aa4026891e91d8787efa3b49fea0ca6daff2dbdd21aefccaf3d440019160209184865260068352818187205551908152a280f35b634e487b7160e01b855260119052602484fd5b906020606492519162461bcd60e51b8352820152601b60248201527f4f7065726174696f6e20616c7265616479207363686564756c656400000000006044820152fd5b5050346102945760203660031901126102945760209160ff9082906001600160a01b0361081a611b3d565b1681526003855220541690519015158152f35b9190503461056657806003193601126105665761086891356108636001610852611b58565b938387528660205286200154611c3b565b611ee3565b5080f35b505034610294578160031936011261029457602090517f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68152f35b505034610294578160031936011261029457602090516000805160206121208339815191528152f35b91905034610566576020366003190112610566576020600080516020612100833981519152916108fe611b3d565b610906611bd3565b6001600160a01b0316808652938252808520805460ff1916905551848152a280f35b828434610607576020918260031936011261029457610945611b3d565b7feaf9385a147c4441b7cff84a8a185a566b6f7c496b77a003346be0e33336974183528284528183206001600160a01b039091168084529084528183205460ff16929083156105db575050519015158152f35b9050346105665760203660031901126105665760209282913581526007845220549051908152f35b9050346105665760203660031901126105665760209260ff918391906001600160a01b036109ec611b3d565b168252855220541690519015158152f35b828434610607576020918260031936011261029457610a1a611b3d565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a683528284528183206001600160a01b039091168084529084528183205460ff16929083156105db575050519015158152f35b505034610294578160031936011261029457602090600a549051908152f35b828434610607576020918260031936011261029457610aa9611b3d565b7f3515f38d031dcbca5f1dac4c5afc1efca2020e42efdd9c5806ae7e963d18435a83528284528183206001600160a01b039091168084529084528183205460ff16929083156105db575050519015158152f35b8391503461029457602036600319011261029457803590610b1b611bd3565b81835260066020528383205415610b3d57509181928252600660205281205580f35b606490602085519162461bcd60e51b8352820152601760248201527f4f7065726174696f6e206e6f74207363686564756c65640000000000000000006044820152fd5b828434610607576020918260031936011261029457610b9d611b3d565b7f368a0a902ce0a8be883cdf3d5cbaaae7bbbf3f9f0aa7ad2c137c77c3a72ca6b683528284528183206001600160a01b039091168084529084528183205460ff16929083156105db575050519015158152f35b8383346102945760208060031936011261056657833583526007815281832092825192838386549182815201908196845284842090845b86828210610cae5750505050849003601f01601f191684019567ffffffffffffffff871185881017610c9b575085815282865292518583018190528594938501939290915b828110610c7b57505050500390f35b83516001600160a01b031685528695509381019392810192600101610c6c565b634e487b7160e01b835260419052602482fd5b83546001600160a01b031685529093019260019283019201610c27565b505034610294578160031936011261029457602090517f368a0a902ce0a8be883cdf3d5cbaaae7bbbf3f9f0aa7ad2c137c77c3a72ca6b68152f35b50503461029457816003193601126102945751908152602090f35b9050346105665781600319360112610566578160209360ff92610d42611b58565b903582528186528282206001600160a01b039091168252855220549151911615158152f35b9050346105665760203660031901126105665760209282913581526006845220549051908152f35b919050346105665760209182600319360112610e935780359067ffffffffffffffff8211610e8f57610dc391369101611b6e565b9290610dcd611bd3565b845b848110610dda578580f35b610e0e906001600160a01b0380610dfa610df5848a88611c86565b611cac565b16151580610e78575b610e13575b50611c61565b610dcf565b80610e22610df5848a88611c86565b168852600385527ffb9ba5f99f5c43d50c89b686bbeaaff49442447b445c123ce00589f4c2fae18485878a20926001938460ff19825416179055610e6a610df5868c8a611c86565b16928851908152a238610e08565b50610e87610df5838987611c86565b3b1515610e03565b8480fd5b8380fd5b505034610294578160031936011261029457602090517f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e48152f35b8391503461029457602036600319011261029457803590610ef1611bd3565b8183526006602052838320548015159081610f92575b5015610f435750918282937fedf5cd947454d7c2e7b5a5316928e75ae21b8a026f0a2f65a9f010bf9f7e29ac8480a28252600660205281205580f35b608490602085519162461bcd60e51b83528201526024808201527f4f7065726174696f6e206e6f74207265616479206f72206e6f742073636865646044820152631d5b195960e21b6064820152fd5b905042101585610f07565b91905034610566578060031936011261056657610fb8611b58565b9033845260209160038352610fd260ff8387205416611cc0565b833585528483528185206001600160a01b039091168086529083528185205460ff16908115611037575b5015611006578380f35b5162461bcd60e51b815291820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b604482015260649150fd5b60008051602061212083398151915286528584528286209086528352508084205460ff1638610ffc565b505034610294578160031936011261029457602090517ffc15875e223f196de4d28f104664030b8067b4a40d0372ee3095567046e5e0b38152f35b919050346105665760209283600319360112610607576110ba611b3d565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82528185528282206001600160a01b039091168083529085528282205460ff1693908415611127575b508315611115575050519015158152f35b84528190205460ff16915038806105d1565b600080516020612120833981519152835282865283832090835285528282205460ff16935038611104565b90503461056657602036600319011261056657803590611170611bd3565b610e10821015806111f1575b156111bb5750907fa3cfd1bbfce43d1baa49f41117ad9fc12ffd5b3af2d07a2a398e62be9c98642991600554908060055582519182526020820152a180f35b606490602084519162461bcd60e51b8352820152601060248201526f24b73b30b634b210323ab930ba34b7b760811b6044820152fd5b5062093a8082111561117c565b83346106075761120d36611b9f565b909291611218611bd3565b825b828110611225578380f35b8061126161123a610df561126a94878a611c86565b6000858152602081815260408083206001600160a01b039094168352929052205460ff1690565b61126f57611c61565b61121a565b610e08611280610df583878a611c86565b84611ee3565b505034610294576020366003190112610294577ffb9ba5f99f5c43d50c89b686bbeaaff49442447b445c123ce00589f4c2fae18460206112c4611b3d565b6112cc611bd3565b6001600160a01b031680855260038252838520805460ff191690559251848152a280f35b919050346105665760203660031901126105665761130c611b3d565b91611315611bd3565b6001600160a01b0383169283156113a2573b1561136f575060207ffb9ba5f99f5c43d50c89b686bbeaaff49442447b445c123ce00589f4c2fae1849183855260038252808520600160ff198254161790555160018152a280f35b6020606492519162461bcd60e51b8352820152600e60248201526d139bdd08184818dbdb9d1c9858dd60921b6044820152fd5b506020606492519162461bcd60e51b8352820152601860248201527f496e76616c696420636f6e7472616374206164647265737300000000000000006044820152fd5b50503461029457816003193601126102945760209060ff6001541690519015158152f35b505034610294578160031936011261029457602090517feaf9385a147c4441b7cff84a8a185a566b6f7c496b77a003346be0e3333697418152f35b828434610607576020918260031936011261029457611461611b3d565b7ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b073194183528284528183206001600160a01b039091168084529084528183205460ff16929083156105db575050519015158152f35b505034610294578160031936011261029457602090517f21e141d29efe528175baa3d6b347407f49288a1a3c0aebcc3160cd2b50b2a9c18152f35b83833461029457816003193601126102945733825260209083825260ff818420541680156115dc575b156115a35760ff199360018560095416176009556001549060ff821661159557507f88702fb6bb2062b67e8081a092f3869745c1f546b1ecc83e96568fddff128f39939460019116176001557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258828251338152a15160018152a180f35b825163d93c066560e01b8152fd5b5162461bcd60e51b815292830152506015602482015274139bdd08195b595c99d95b98de4818dbdb9d1858dd605a1b6044820152606490fd5b506000805160206121208339815191528352828252808320338452825260ff8184205416611518565b90503461056657826003193601126105665761161f611bd3565b60ff199081600954166009556001549060ff8216156116935750916020917f88702fb6bb2062b67e8081a092f3869745c1f546b1ecc83e96568fddff128f3993166001557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa828251338152a151838152a180f35b8351638dfc202b60e01b8152fd5b8334610607576116b036611b9f565b9092916116bb611bd3565b825b8281106116c8578380f35b806116dd61123a610df56116e794878a611c86565b156116ec57611c61565b6116bd565b610e086116fd610df583878a611c86565b84611d24565b838334610294576020806003193601126105665761171f611b3d565b91611728611bd3565b6001600160a01b0383169283156118af57600a8054101561187a5760008051602061212083398151915290818652858452828620858752845260ff83872054166118405761177581611dca565b5081865260088452828620858752845282862054156117ca575b50506000805160206121008339815191529293948252808520600160ff198254161790556117be600a54611c61565b600a555160018152a280f35b81865260078452828620805490600160401b82101561182d57916104008260008051602061210083398151915298999a9594600161180a95018155611d0c565b86526007835281862054600884528287208688528452828720559493928661178f565b634e487b7160e01b885260418952602488fd5b825162461bcd60e51b8152808801859052601460248201527320b63932b0b23c9036b0b9ba32b91030b236b4b760611b6044820152606490fd5b815162461bcd60e51b8152808701849052600f60248201526e546f6f206d616e792061646d696e7360881b6044820152606490fd5b815162461bcd60e51b8152808701849052600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b8383346102945780600319360112610294576118fe611b58565b90336001600160a01b0383160361191b5750610868919235611ee3565b5163334bd91960e11b81528390fd5b505034610294578160031936011261029457602090517f3515f38d031dcbca5f1dac4c5afc1efca2020e42efdd9c5806ae7e963d18435a8152f35b9190503461056657602036600319011261056657611981611b3d565b611989611bd3565b6001600160a01b03169182156119c857600080516020612100833981519152916020918486528252808520600160ff198254161790555160018152a280f35b6020606492519162461bcd60e51b8352820152601760248201527f496e76616c696420636f6e7461637420616464726573730000000000000000006044820152fd5b919050346105665780600319360112610566576108689135611a2f6001610852611b58565b611d24565b50503461029457816003193601126102945760209051600a8152f35b90503461056657602036600319011261056657816020936001923581528085522001549051908152f35b828434610607576020918260031936011261029457611a97611b3d565b7f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e483528284528183206001600160a01b039091168084529084528183205460ff16929083156105db575050519015158152f35b849134610566576020366003190112610566573563ffffffff60e01b81168091036105665760209250637965db0b60e01b8114908115611b2c575b5015158152f35b6301ffc9a760e01b14905083611b25565b600435906001600160a01b0382168203611b5357565b600080fd5b602435906001600160a01b0382168203611b5357565b9181601f84011215611b535782359167ffffffffffffffff8311611b53576020808501948460051b010111611b5357565b906040600319830112611b5357600435916024359067ffffffffffffffff8211611b5357611bcf91600401611b6e565b9091565b3360009081527fd815dd9c622669a9e0b8a0d8cf57cad1f0f8a786142881c7a6dc3b3b61e0976d60205260409020546000805160206121208339815191529060ff1615611c1d5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b80600052600060205260406000203360005260205260ff6040600020541615611c1d5750565b6000198114611c705760010190565b634e487b7160e01b600052601160045260246000fd5b9190811015611c965760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b0381168103611b535790565b15611cc757565b60405162461bcd60e51b815260206004820152601760248201527f4e6f7420617574686f72697a656420636f6e74726163740000000000000000006044820152606490fd5b8054821015611c965760005260206000200190600090565b611d2e8282611e6a565b506000818152602092600884526040928383209160018060a01b0381169283855286528484205415611d66575b505050505050600190565b81845260078652848420805490600160401b821015611db65781610400916001611d939594018155611d0c565b825260078452828220549360088152838320918352522055388080808080611d5b565b634e487b7160e01b86526041600452602486fd5b6001600160a01b031660008181527fd815dd9c622669a9e0b8a0d8cf57cad1f0f8a786142881c7a6dc3b3b61e0976d60205260408120549091906000805160206121208339815191529060ff16611e6557808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff60408420541615600014611e6557808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b611eed828261208a565b506000918183526020600881526040928385209260018060a01b038091169384875283528486205480611f27575b50505050505050600190565b8287526007845285872080546000199391848201918211611fdd5790611f4c91611d0c565b90549060031b1c168388526007855286882083830190838211611fdd57610400611f77928492611d0c565b83885260088552868820908852845285872055818652600783528486209081548015611fc9570190611fac6104538383611d0c565b558452600881528284209184525281205538808080808080611f1b565b634e487b7160e01b88526031600452602488fd5b634e487b7160e01b8a52601160045260248afd5b6001600160a01b031660008181527fd815dd9c622669a9e0b8a0d8cf57cad1f0f8a786142881c7a6dc3b3b61e0976d60205260408120549091906000805160206121208339815191529060ff1615611e655780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b9060009180835282602052604083209160018060a01b03169182845260205260ff604084205416600014611e655780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a460019056fecdb0db5c0ab5eddbcdc56346bb309a4dd8a580c6674ad19af69084dab0c33f7cf83591f6d256ac9a12084d6de9c89a3e1fd09d594aa1184c76eef05bae103fc3a2646970667358221220352359c79a2d1410821ee5396ca9a1e501d0c8c03fa5103c87023884d157442064736f6c634300081500332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0df83591f6d256ac9a12084d6de9c89a3e1fd09d594aa1184c76eef05bae103fc3",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a714611aea5750816319262d3014611a7a578163248a9ca314611a5057816324bf7f2a14611a345781632f2ff15d14611a0a5781632f80123f1461196557816331aab7591461192a57816336568abe146118e4578163401a83ab1461170357816346b5cb59146116a15781634a4e3bd51461160557816351858e27146114ef578163529470e8146114b4578163559f05dc14611444578163587d94be146114095781635c975abb146113e557816367561d93146112f05781636e861c0e146112865781636f39feec146111fe57816372c458911461115257816375b24ebe1461109c5781637ab7236d1461060a5781637d6152861461106157816380d1518814610f9d57816384e0f2ad14610ed257816385f438c114610e975781638aea052714610d8f5781638b3ceb3d14610d6757816391d1485414610d21578163a217fddf14610d06578163a29d671714610ccb578163a3246ad314610bf0578163af2bde7a14610b80578163afce913714610afc578163b22bfb0f14610a8c578163b8b8183614610a6d578163c2ba4744146109fd578163c7a04c15146109c0578163ca15c87314610998578163cc43714514610928578163cdbef3ed146108d0578163cfdf3c4e146108a7578163d53913931461086c578163d547741f1461082d578163d5b9221b146107ef578163dff4366c14610724578163e63ab1e9146106e9578163e97868a514610669578163f0a56fc81461062e578163f12d54d81461060a578163f18510961461056a578163f673924a146102d257508063f72c0d8b146102985763ff96df441461027757600080fd5b346102945781600319360112610294576020906005549051908152f35b5080fd5b5034610294578160031936011261029457602090517f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e38152f35b83833461029457602080600319360112610566576102ee611b3d565b916102f7611bd3565b6001600160a01b038381169390338514610523576001600a5411156104e05760008051602061212083398151915291828752868552838720868852855260ff8488205416156104aa5761034990611ff1565b5081865260088452828620858752845282862054806103b0575b505050848252808420805460ff19169055600a54801561039d5760001901600a55518381526000805160206121008339815191529190a280f35b634e487b7160e01b855260118652602485fd5b828752600785528387208054600019939184820191821161049757906103d591611d0c565b90549060031b1c1683885260078652848820838301908382116104975761040061041e928492611d0c565b90919060018060a01b038084549260031b9316831b921b1916179055565b838852600886528488209088528552838720558186526007845282862090815480156104845701906104686104538383611d0c565b81549060018060a01b039060031b1b19169055565b5584526008825280842083855282528381812055858080610363565b634e487b7160e01b885260318952602488fd5b634e487b7160e01b8a5260118b5260248afd5b835162461bcd60e51b8152808901869052601060248201526f2737ba1036b0b9ba32b91030b236b4b760811b6044820152606490fd5b825162461bcd60e51b8152808801859052601860248201527f43616e6e6f742072656d6f7665206c6173742061646d696e00000000000000006044820152606490fd5b825162461bcd60e51b8152808801859052601760248201527f43616e6e6f74207265766f6b65206f776e2061646d696e0000000000000000006044820152606490fd5b8280fd5b828434610607576020918260031936011261029457610587611b3d565b7ffc15875e223f196de4d28f104664030b8067b4a40d0372ee3095567046e5e0b383528284528183206001600160a01b039091168084529084528183205460ff16929083156105db575b5050519015158152f35b600080516020612120833981519152825281855282822090825284528190205460ff16915083806105d1565b80fd5b50503461029457816003193601126102945760209060ff6009541690519015158152f35b505034610294578160031936011261029457602090517ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b07319418152f35b91905034610566578260031936011261056657338352600360205261069360ff8285205416611cc0565b60ff6009541615806106dc575b156106a9578280f35b906020606492519162461bcd60e51b8352820152600d60248201526c14de5cdd195b481c185d5cd959609a1b6044820152fd5b5060ff60015416156106a0565b505034610294578160031936011261029457602090517f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8152f35b90503461056657602036600319011261056657803591610742611bd3565b8284526006602052808420546107ac5760055442019182421161079957507f63aa8006aa4026891e91d8787efa3b49fea0ca6daff2dbdd21aefccaf3d440019160209184865260068352818187205551908152a280f35b634e487b7160e01b855260119052602484fd5b906020606492519162461bcd60e51b8352820152601b60248201527f4f7065726174696f6e20616c7265616479207363686564756c656400000000006044820152fd5b5050346102945760203660031901126102945760209160ff9082906001600160a01b0361081a611b3d565b1681526003855220541690519015158152f35b9190503461056657806003193601126105665761086891356108636001610852611b58565b938387528660205286200154611c3b565b611ee3565b5080f35b505034610294578160031936011261029457602090517f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68152f35b505034610294578160031936011261029457602090516000805160206121208339815191528152f35b91905034610566576020366003190112610566576020600080516020612100833981519152916108fe611b3d565b610906611bd3565b6001600160a01b0316808652938252808520805460ff1916905551848152a280f35b828434610607576020918260031936011261029457610945611b3d565b7feaf9385a147c4441b7cff84a8a185a566b6f7c496b77a003346be0e33336974183528284528183206001600160a01b039091168084529084528183205460ff16929083156105db575050519015158152f35b9050346105665760203660031901126105665760209282913581526007845220549051908152f35b9050346105665760203660031901126105665760209260ff918391906001600160a01b036109ec611b3d565b168252855220541690519015158152f35b828434610607576020918260031936011261029457610a1a611b3d565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a683528284528183206001600160a01b039091168084529084528183205460ff16929083156105db575050519015158152f35b505034610294578160031936011261029457602090600a549051908152f35b828434610607576020918260031936011261029457610aa9611b3d565b7f3515f38d031dcbca5f1dac4c5afc1efca2020e42efdd9c5806ae7e963d18435a83528284528183206001600160a01b039091168084529084528183205460ff16929083156105db575050519015158152f35b8391503461029457602036600319011261029457803590610b1b611bd3565b81835260066020528383205415610b3d57509181928252600660205281205580f35b606490602085519162461bcd60e51b8352820152601760248201527f4f7065726174696f6e206e6f74207363686564756c65640000000000000000006044820152fd5b828434610607576020918260031936011261029457610b9d611b3d565b7f368a0a902ce0a8be883cdf3d5cbaaae7bbbf3f9f0aa7ad2c137c77c3a72ca6b683528284528183206001600160a01b039091168084529084528183205460ff16929083156105db575050519015158152f35b8383346102945760208060031936011261056657833583526007815281832092825192838386549182815201908196845284842090845b86828210610cae5750505050849003601f01601f191684019567ffffffffffffffff871185881017610c9b575085815282865292518583018190528594938501939290915b828110610c7b57505050500390f35b83516001600160a01b031685528695509381019392810192600101610c6c565b634e487b7160e01b835260419052602482fd5b83546001600160a01b031685529093019260019283019201610c27565b505034610294578160031936011261029457602090517f368a0a902ce0a8be883cdf3d5cbaaae7bbbf3f9f0aa7ad2c137c77c3a72ca6b68152f35b50503461029457816003193601126102945751908152602090f35b9050346105665781600319360112610566578160209360ff92610d42611b58565b903582528186528282206001600160a01b039091168252855220549151911615158152f35b9050346105665760203660031901126105665760209282913581526006845220549051908152f35b919050346105665760209182600319360112610e935780359067ffffffffffffffff8211610e8f57610dc391369101611b6e565b9290610dcd611bd3565b845b848110610dda578580f35b610e0e906001600160a01b0380610dfa610df5848a88611c86565b611cac565b16151580610e78575b610e13575b50611c61565b610dcf565b80610e22610df5848a88611c86565b168852600385527ffb9ba5f99f5c43d50c89b686bbeaaff49442447b445c123ce00589f4c2fae18485878a20926001938460ff19825416179055610e6a610df5868c8a611c86565b16928851908152a238610e08565b50610e87610df5838987611c86565b3b1515610e03565b8480fd5b8380fd5b505034610294578160031936011261029457602090517f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e48152f35b8391503461029457602036600319011261029457803590610ef1611bd3565b8183526006602052838320548015159081610f92575b5015610f435750918282937fedf5cd947454d7c2e7b5a5316928e75ae21b8a026f0a2f65a9f010bf9f7e29ac8480a28252600660205281205580f35b608490602085519162461bcd60e51b83528201526024808201527f4f7065726174696f6e206e6f74207265616479206f72206e6f742073636865646044820152631d5b195960e21b6064820152fd5b905042101585610f07565b91905034610566578060031936011261056657610fb8611b58565b9033845260209160038352610fd260ff8387205416611cc0565b833585528483528185206001600160a01b039091168086529083528185205460ff16908115611037575b5015611006578380f35b5162461bcd60e51b815291820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b604482015260649150fd5b60008051602061212083398151915286528584528286209086528352508084205460ff1638610ffc565b505034610294578160031936011261029457602090517ffc15875e223f196de4d28f104664030b8067b4a40d0372ee3095567046e5e0b38152f35b919050346105665760209283600319360112610607576110ba611b3d565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82528185528282206001600160a01b039091168083529085528282205460ff1693908415611127575b508315611115575050519015158152f35b84528190205460ff16915038806105d1565b600080516020612120833981519152835282865283832090835285528282205460ff16935038611104565b90503461056657602036600319011261056657803590611170611bd3565b610e10821015806111f1575b156111bb5750907fa3cfd1bbfce43d1baa49f41117ad9fc12ffd5b3af2d07a2a398e62be9c98642991600554908060055582519182526020820152a180f35b606490602084519162461bcd60e51b8352820152601060248201526f24b73b30b634b210323ab930ba34b7b760811b6044820152fd5b5062093a8082111561117c565b83346106075761120d36611b9f565b909291611218611bd3565b825b828110611225578380f35b8061126161123a610df561126a94878a611c86565b6000858152602081815260408083206001600160a01b039094168352929052205460ff1690565b61126f57611c61565b61121a565b610e08611280610df583878a611c86565b84611ee3565b505034610294576020366003190112610294577ffb9ba5f99f5c43d50c89b686bbeaaff49442447b445c123ce00589f4c2fae18460206112c4611b3d565b6112cc611bd3565b6001600160a01b031680855260038252838520805460ff191690559251848152a280f35b919050346105665760203660031901126105665761130c611b3d565b91611315611bd3565b6001600160a01b0383169283156113a2573b1561136f575060207ffb9ba5f99f5c43d50c89b686bbeaaff49442447b445c123ce00589f4c2fae1849183855260038252808520600160ff198254161790555160018152a280f35b6020606492519162461bcd60e51b8352820152600e60248201526d139bdd08184818dbdb9d1c9858dd60921b6044820152fd5b506020606492519162461bcd60e51b8352820152601860248201527f496e76616c696420636f6e7472616374206164647265737300000000000000006044820152fd5b50503461029457816003193601126102945760209060ff6001541690519015158152f35b505034610294578160031936011261029457602090517feaf9385a147c4441b7cff84a8a185a566b6f7c496b77a003346be0e3333697418152f35b828434610607576020918260031936011261029457611461611b3d565b7ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b073194183528284528183206001600160a01b039091168084529084528183205460ff16929083156105db575050519015158152f35b505034610294578160031936011261029457602090517f21e141d29efe528175baa3d6b347407f49288a1a3c0aebcc3160cd2b50b2a9c18152f35b83833461029457816003193601126102945733825260209083825260ff818420541680156115dc575b156115a35760ff199360018560095416176009556001549060ff821661159557507f88702fb6bb2062b67e8081a092f3869745c1f546b1ecc83e96568fddff128f39939460019116176001557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258828251338152a15160018152a180f35b825163d93c066560e01b8152fd5b5162461bcd60e51b815292830152506015602482015274139bdd08195b595c99d95b98de4818dbdb9d1858dd605a1b6044820152606490fd5b506000805160206121208339815191528352828252808320338452825260ff8184205416611518565b90503461056657826003193601126105665761161f611bd3565b60ff199081600954166009556001549060ff8216156116935750916020917f88702fb6bb2062b67e8081a092f3869745c1f546b1ecc83e96568fddff128f3993166001557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa828251338152a151838152a180f35b8351638dfc202b60e01b8152fd5b8334610607576116b036611b9f565b9092916116bb611bd3565b825b8281106116c8578380f35b806116dd61123a610df56116e794878a611c86565b156116ec57611c61565b6116bd565b610e086116fd610df583878a611c86565b84611d24565b838334610294576020806003193601126105665761171f611b3d565b91611728611bd3565b6001600160a01b0383169283156118af57600a8054101561187a5760008051602061212083398151915290818652858452828620858752845260ff83872054166118405761177581611dca565b5081865260088452828620858752845282862054156117ca575b50506000805160206121008339815191529293948252808520600160ff198254161790556117be600a54611c61565b600a555160018152a280f35b81865260078452828620805490600160401b82101561182d57916104008260008051602061210083398151915298999a9594600161180a95018155611d0c565b86526007835281862054600884528287208688528452828720559493928661178f565b634e487b7160e01b885260418952602488fd5b825162461bcd60e51b8152808801859052601460248201527320b63932b0b23c9036b0b9ba32b91030b236b4b760611b6044820152606490fd5b815162461bcd60e51b8152808701849052600f60248201526e546f6f206d616e792061646d696e7360881b6044820152606490fd5b815162461bcd60e51b8152808701849052600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b8383346102945780600319360112610294576118fe611b58565b90336001600160a01b0383160361191b5750610868919235611ee3565b5163334bd91960e11b81528390fd5b505034610294578160031936011261029457602090517f3515f38d031dcbca5f1dac4c5afc1efca2020e42efdd9c5806ae7e963d18435a8152f35b9190503461056657602036600319011261056657611981611b3d565b611989611bd3565b6001600160a01b03169182156119c857600080516020612100833981519152916020918486528252808520600160ff198254161790555160018152a280f35b6020606492519162461bcd60e51b8352820152601760248201527f496e76616c696420636f6e7461637420616464726573730000000000000000006044820152fd5b919050346105665780600319360112610566576108689135611a2f6001610852611b58565b611d24565b50503461029457816003193601126102945760209051600a8152f35b90503461056657602036600319011261056657816020936001923581528085522001549051908152f35b828434610607576020918260031936011261029457611a97611b3d565b7f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e483528284528183206001600160a01b039091168084529084528183205460ff16929083156105db575050519015158152f35b849134610566576020366003190112610566573563ffffffff60e01b81168091036105665760209250637965db0b60e01b8114908115611b2c575b5015158152f35b6301ffc9a760e01b14905083611b25565b600435906001600160a01b0382168203611b5357565b600080fd5b602435906001600160a01b0382168203611b5357565b9181601f84011215611b535782359167ffffffffffffffff8311611b53576020808501948460051b010111611b5357565b906040600319830112611b5357600435916024359067ffffffffffffffff8211611b5357611bcf91600401611b6e565b9091565b3360009081527fd815dd9c622669a9e0b8a0d8cf57cad1f0f8a786142881c7a6dc3b3b61e0976d60205260409020546000805160206121208339815191529060ff1615611c1d5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b80600052600060205260406000203360005260205260ff6040600020541615611c1d5750565b6000198114611c705760010190565b634e487b7160e01b600052601160045260246000fd5b9190811015611c965760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b0381168103611b535790565b15611cc757565b60405162461bcd60e51b815260206004820152601760248201527f4e6f7420617574686f72697a656420636f6e74726163740000000000000000006044820152606490fd5b8054821015611c965760005260206000200190600090565b611d2e8282611e6a565b506000818152602092600884526040928383209160018060a01b0381169283855286528484205415611d66575b505050505050600190565b81845260078652848420805490600160401b821015611db65781610400916001611d939594018155611d0c565b825260078452828220549360088152838320918352522055388080808080611d5b565b634e487b7160e01b86526041600452602486fd5b6001600160a01b031660008181527fd815dd9c622669a9e0b8a0d8cf57cad1f0f8a786142881c7a6dc3b3b61e0976d60205260408120549091906000805160206121208339815191529060ff16611e6557808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff60408420541615600014611e6557808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b611eed828261208a565b506000918183526020600881526040928385209260018060a01b038091169384875283528486205480611f27575b50505050505050600190565b8287526007845285872080546000199391848201918211611fdd5790611f4c91611d0c565b90549060031b1c168388526007855286882083830190838211611fdd57610400611f77928492611d0c565b83885260088552868820908852845285872055818652600783528486209081548015611fc9570190611fac6104538383611d0c565b558452600881528284209184525281205538808080808080611f1b565b634e487b7160e01b88526031600452602488fd5b634e487b7160e01b8a52601160045260248afd5b6001600160a01b031660008181527fd815dd9c622669a9e0b8a0d8cf57cad1f0f8a786142881c7a6dc3b3b61e0976d60205260408120549091906000805160206121208339815191529060ff1615611e655780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b9060009180835282602052604083209160018060a01b03169182845260205260ff604084205416600014611e655780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a460019056fecdb0db5c0ab5eddbcdc56346bb309a4dd8a580c6674ad19af69084dab0c33f7cf83591f6d256ac9a12084d6de9c89a3e1fd09d594aa1184c76eef05bae103fc3a2646970667358221220352359c79a2d1410821ee5396ca9a1e501d0c8c03fa5103c87023884d157442064736f6c63430008150033",
  "devdoc": {
    "details": "Centralized access control system for the Moove ecosystem",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "ContractAuthorizationChanged(address,bool)": {
        "details": "Emitted when a contract is authorized or deauthorized"
      },
      "EmergencyContactChanged(address,bool)": {
        "details": "Emitted when an emergency contact is added or removed"
      },
      "GlobalPauseStateChanged(bool)": {
        "details": "Emitted when global pause state changes"
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TimeLockDurationUpdated(uint256,uint256)": {
        "details": "Emitted when timelock duration is updated"
      },
      "TimeLockOperationExecuted(bytes32)": {
        "details": "Emitted when a time-locked operation is executed"
      },
      "TimeLockOperationScheduled(bytes32,uint256)": {
        "details": "Emitted when a time-locked operation is scheduled"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addEmergencyContact(address)": {
        "details": "Add emergency contact",
        "params": {
          "contact": "Address to add as emergency contact"
        }
      },
      "authorizeContract(address)": {
        "details": "Authorize a contract to interact with the system",
        "params": {
          "contractAddress": "Address of the contract to authorize"
        }
      },
      "batchAuthorizeContracts(address[])": {
        "details": "Batch authorize multiple contracts",
        "params": {
          "contractAddresses": "Array of contract addresses to authorize"
        }
      },
      "batchGrantRole(bytes32,address[])": {
        "details": "Batch grant roles to multiple addresses",
        "params": {
          "accounts": "Array of addresses to grant the role to",
          "role": "The role to grant"
        }
      },
      "batchRevokeRole(bytes32,address[])": {
        "details": "Batch revoke roles from multiple addresses",
        "params": {
          "accounts": "Array of addresses to revoke the role from",
          "role": "The role to revoke"
        }
      },
      "canManageAuctions(address)": {
        "details": "Check if an address can manage auctions",
        "params": {
          "account": "Address to check"
        },
        "returns": {
          "hasAuctionRole": "True if address can manage auctions"
        }
      },
      "canManageCustomizations(address)": {
        "details": "Check if an address can manage customizations",
        "params": {
          "account": "Address to check"
        },
        "returns": {
          "hasCustomizationRole": "True if address can manage customizations"
        }
      },
      "canManageMarketplace(address)": {
        "details": "Check if user is able to use Marketplace",
        "params": {
          "account": "Account check"
        }
      },
      "canManagePrices(address)": {
        "details": "Check if an address can manage prices",
        "params": {
          "account": "Address to check"
        },
        "returns": {
          "hasPriceRole": "True if address can manage prices"
        }
      },
      "canMint(address)": {
        "details": "Check if an address has minting permissions",
        "params": {
          "account": "Address to check"
        },
        "returns": {
          "hasMinterRole": "True if address can mint"
        }
      },
      "canPause(address)": {
        "details": "Check if an address can pause contracts",
        "params": {
          "account": "Address to check"
        },
        "returns": {
          "hasPauserRole": "True if address can pause"
        }
      },
      "canTrade(address)": {
        "details": "Check if user is able to trade",
        "params": {
          "account": "Account check"
        }
      },
      "canWithdraw(address)": {
        "details": "Check if an address can withdraw funds",
        "params": {
          "account": "Address to check"
        },
        "returns": {
          "hasWithdrawRole": "True if address can withdraw"
        }
      },
      "cancelTimeLockOperation(bytes32)": {
        "details": "Cancel a time-locked operation",
        "params": {
          "operationId": "Unique identifier for the operation"
        }
      },
      "constructor": {
        "details": "Constructor sets up initial roles and admin",
        "params": {
          "initialAdmin": "Address to be granted master admin role"
        }
      },
      "deauthorizeContract(address)": {
        "details": "Deauthorize a contract",
        "params": {
          "contractAddress": "Address of the contract to deauthorize"
        }
      },
      "emergencyPause()": {
        "details": "Emergency pause - can be called by emergency contacts"
      },
      "emergencyUnpause()": {
        "details": "Emergency unpause - requires master admin"
      },
      "executeTimeLockOperation(bytes32)": {
        "details": "Execute time-locked operation validation",
        "params": {
          "operationId": "The operation ID to validate"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Get number of members for a specific role",
        "params": {
          "role": "The role to query"
        },
        "returns": {
          "count": "Number of addresses with the role"
        }
      },
      "getRoleMembers(bytes32)": {
        "details": "Get all role members for a specific role",
        "params": {
          "role": "The role to query"
        },
        "returns": {
          "members": "Array of addresses with the role"
        }
      },
      "grantMasterAdmin(address)": {
        "details": "Grant master admin role with safety checks",
        "params": {
          "account": "Address to grant master admin role"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isGloballyPaused()": {
        "details": "Check if the system is in global pause state",
        "returns": {
          "isPaused": "True if globally paused"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeEmergencyContact(address)": {
        "details": "Remove emergency contact",
        "params": {
          "contact": "Address to remove as emergency contact"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeMasterAdmin(address)": {
        "details": "Revoke master admin role with safety checks",
        "params": {
          "account": "Address to revoke master admin role from"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "scheduleTimeLockOperation(bytes32)": {
        "details": "Schedule a time-locked operation",
        "params": {
          "operationId": "Unique identifier for the operation"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateTimeLockDuration(uint256)": {
        "details": "Update timelock duration",
        "params": {
          "newDuration": "New duration in seconds"
        }
      },
      "validateNotPaused()": {
        "details": "Validate that system is not paused (called by other contracts)"
      },
      "validateRole(bytes32,address)": {
        "details": "Validate that caller has required role (called by other contracts)",
        "params": {
          "account": "The account to validate",
          "role": "The role to check"
        }
      }
    },
    "stateVariables": {
      "AUCTION_MANAGER_ROLE": {
        "details": "Auction and marketplace management"
      },
      "CUSTOMIZATION_ADMIN_ROLE": {
        "details": "Vehicle customization management"
      },
      "MASTER_ADMIN_ROLE": {
        "details": "Master admin role - can grant/revoke all other roles"
      },
      "MAX_ADMINS": {
        "details": "Maximum number of admins allowed"
      },
      "METADATA_MANAGER_ROLE": {
        "details": "Metadata management permissions"
      },
      "MINTER_ROLE": {
        "details": "NFT minting permissions"
      },
      "PAUSER_ROLE": {
        "details": "Emergency pause permissions"
      },
      "PRICE_MANAGER_ROLE": {
        "details": "Price and fee management"
      },
      "UPGRADER_ROLE": {
        "details": "Contract upgrade permissions"
      },
      "WITHDRAWER_ROLE": {
        "details": "Fund withdrawal permissions"
      },
      "_roleMembers": {
        "details": "Mapping to track role members for enumeration (if needed)"
      },
      "authorizedContracts": {
        "details": "Mapping to track authorized contract addresses"
      },
      "emergencyContacts": {
        "details": "Mapping to track emergency contacts"
      },
      "globalPause": {
        "details": "Global pause state that affects all contracts"
      },
      "masterAdminCount": {
        "details": "Current number of master admins"
      },
      "timeLockDuration": {
        "details": "Time lock duration for critical operations (in seconds)"
      },
      "timelockExecutions": {
        "details": "Mapping to track time-locked operations"
      }
    },
    "title": "MooveAccessControl",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Manages roles, permissions, and security features across all Moove contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/MooveAccessControl.sol:MooveAccessControl",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 2277,
        "contract": "contracts/MooveAccessControl.sol:MooveAccessControl",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2387,
        "contract": "contracts/MooveAccessControl.sol:MooveAccessControl",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7494,
        "contract": "contracts/MooveAccessControl.sol:MooveAccessControl",
        "label": "authorizedContracts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7499,
        "contract": "contracts/MooveAccessControl.sol:MooveAccessControl",
        "label": "emergencyContacts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7503,
        "contract": "contracts/MooveAccessControl.sol:MooveAccessControl",
        "label": "timeLockDuration",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7508,
        "contract": "contracts/MooveAccessControl.sol:MooveAccessControl",
        "label": "timelockExecutions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 7514,
        "contract": "contracts/MooveAccessControl.sol:MooveAccessControl",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 7520,
        "contract": "contracts/MooveAccessControl.sol:MooveAccessControl",
        "label": "_roleMemberIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7524,
        "contract": "contracts/MooveAccessControl.sol:MooveAccessControl",
        "label": "globalPause",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 7532,
        "contract": "contracts/MooveAccessControl.sol:MooveAccessControl",
        "label": "masterAdminCount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/MooveAccessControl.sol:MooveAccessControl",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/MooveAccessControl.sol:MooveAccessControl",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}