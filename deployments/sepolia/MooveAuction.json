{
  "address": "0x329203985A29E3c78aD140B0D3e383D2fE58d832",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControl",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "AuctionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum MooveAuction.AuctionType",
          "name": "auctionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startingPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "AuctionEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "platformFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyFee",
          "type": "uint256"
        }
      ],
      "name": "AuctionSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isHighestBid",
          "type": "bool"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BidRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "DutchPriceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reservePrice",
          "type": "uint256"
        }
      ],
      "name": "ReserveReached",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SealedBidRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bidHash",
          "type": "bytes32"
        }
      ],
      "name": "SealedBidSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MAX_AUCTION_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BIDS_PER_AUCTION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_AUCTION_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BID_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControl",
      "outputs": [
        {
          "internalType": "contract MooveAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctionBids",
      "outputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isWinning",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isRefunded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "enum MooveAuction.AuctionType",
          "name": "auctionType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "startingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reservePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyNowPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidIncrement",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "highestBidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "highestBid",
          "type": "uint256"
        },
        {
          "internalType": "enum MooveAuction.AuctionStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "allowPartialFulfillment",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "minBidders",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBidders",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSettled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "buyNowDutch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum MooveAuction.AuctionType",
          "name": "auctionType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "startingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reservePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyNowPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidIncrement",
          "type": "uint256"
        }
      ],
      "name": "createAuction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "emergencyCancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "endAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "additionalTime",
          "type": "uint256"
        }
      ],
      "name": "extendAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveAuctions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "activeAuctions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getAuction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "enum MooveAuction.AuctionType",
              "name": "auctionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startingPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reservePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyNowPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bidIncrement",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "highestBidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "highestBid",
              "type": "uint256"
            },
            {
              "internalType": "enum MooveAuction.AuctionStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "allowPartialFulfillment",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "minBidders",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBidders",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSettled",
              "type": "bool"
            }
          ],
          "internalType": "struct MooveAuction.Auction",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getAuctionBids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isWinning",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRefunded",
              "type": "bool"
            }
          ],
          "internalType": "struct MooveAuction.Bid[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAuctionsCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeAuctionsCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "settledAuctionsCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cancelledAuctionsCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVolume",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionTypeDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "englishCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dutchCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sealedBidCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MooveAuction.AuctionType",
          "name": "auctionType",
          "type": "uint8"
        }
      ],
      "name": "getAuctionsByType",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "matchingAuctions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getDutchPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEndingSoonAuctions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "endingSoon",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserAuctions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserBids",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasRevealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasUserBid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastBidTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumBidIncrement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "revealSealedBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sealedBids",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "settleAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "startRevealPhase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "bidHash",
          "type": "bytes32"
        }
      ],
      "name": "submitSealedBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAuctions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newIncrement",
          "type": "uint256"
        }
      ],
      "name": "updateMinimumBidIncrement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "updatePlatformFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userAuctions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userBids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawPlatformFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9f72f500428ef53431fea48f9aacf3d85577057ea5f765a661ec0a251fc5c2b7",
  "receipt": {
    "to": null,
    "from": "0x777382955f33Bb8540602E914D9b650C962EF6Cc",
    "contractAddress": "0x329203985A29E3c78aD140B0D3e383D2fE58d832",
    "transactionIndex": 6,
    "gasUsed": "3861063",
    "logsBloom": "0x
    "blockHash": "0xaa999b615b59f68aaa25967983d9edcc029d4e1b7393907bc1605563398d50d4",
    "transactionHash": "0x9f72f500428ef53431fea48f9aacf3d85577057ea5f765a661ec0a251fc5c2b7",
    "logs": [],
    "blockNumber": 8924740,
    "cumulativeGasUsed": "3987118",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x005672EcC14b09A958742B960Ebb76eBE52Be44A"
  ],
  "numDeployments": 1,
  "solcInputHash": "cf9183c5756e95f1fc92655ea94dc824",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum MooveAuction.AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFee\",\"type\":\"uint256\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isHighestBid\",\"type\":\"bool\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"DutchPriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"ReserveReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SealedBidRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bidHash\",\"type\":\"bytes32\"}],\"name\":\"SealedBidSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_AUCTION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BIDS_PER_AUCTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_AUCTION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BID_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControl\",\"outputs\":[{\"internalType\":\"contract MooveAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionBids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWinning\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"enum MooveAuction.AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"enum MooveAuction.AuctionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"allowPartialFulfillment\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minBidders\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBidders\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"buyNowDutch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum MooveAuction.AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidIncrement\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"emergencyCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalTime\",\"type\":\"uint256\"}],\"name\":\"extendAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveAuctions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"activeAuctions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"enum MooveAuction.AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"enum MooveAuction.AuctionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"allowPartialFulfillment\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minBidders\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBidders\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"internalType\":\"struct MooveAuction.Auction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWinning\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"}],\"internalType\":\"struct MooveAuction.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAuctionsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeAuctionsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settledAuctionsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancelledAuctionsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVolume\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionTypeDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"englishCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dutchCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sealedBidCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MooveAuction.AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"}],\"name\":\"getAuctionsByType\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"matchingAuctions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getDutchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndingSoonAuctions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"endingSoon\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAuctions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBids\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasUserBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBidTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBidIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"revealSealedBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sealedBids\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"startRevealPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"bidHash\",\"type\":\"bytes32\"}],\"name\":\"submitSealedBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newIncrement\",\"type\":\"uint256\"}],\"name\":\"updateMinimumBidIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPlatformFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Advanced auction system with 4 different auction types for Moove Sticker NFTs\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"buyNowDutch(uint256)\":{\"details\":\"Purchase at current price for Dutch auction\"},\"cancelAuction(uint256,string)\":{\"details\":\"Cancel auction (seller or admin only)\"},\"createAuction(address,uint256,uint8,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Create a new auction\",\"params\":{\"auctionType\":\"Type of auction\",\"bidIncrement\":\"Minimum bid increment (0 for default)\",\"buyNowPrice\":\"Buy now price (0 if not applicable)\",\"duration\":\"Duration of the auction in seconds\",\"nftContract\":\"Address of the NFT contract\",\"reservePrice\":\"Reserve price (minimum acceptable price)\",\"startingPrice\":\"Starting price for the auction\",\"tokenId\":\"Token ID to auction\"}},\"emergencyCancel(uint256,string)\":{\"details\":\"Emergency cancel by admin\"},\"endAuction(uint256)\":{\"details\":\"End auction when time expires (can be called by anyone)\"},\"extendAuction(uint256,uint256)\":{\"details\":\"Extend auction duration (admin only, emergency situations)\"},\"getActiveAuctions()\":{\"details\":\"Get active auctions\"},\"getAuction(uint256)\":{\"details\":\"Get auction details\"},\"getAuctionBids(uint256)\":{\"details\":\"Get auction bids\"},\"getAuctionStats()\":{\"details\":\"Get auction statistics\"},\"getAuctionTypeDistribution()\":{\"details\":\"Get auction type distribution\"},\"getAuctionsByType(uint8)\":{\"details\":\"Get auctions by type\"},\"getDutchPrice(uint256)\":{\"details\":\"Get current price for Dutch auction\"},\"getEndingSoonAuctions()\":{\"details\":\"Get ending soon auctions (within next 24 hours)\"},\"getUserAuctions(address)\":{\"details\":\"Get user's auctions\"},\"getUserBids(address)\":{\"details\":\"Get user's bids\"},\"hasUserBid(uint256,address)\":{\"details\":\"Check if user has bid on auction\"},\"pause()\":{\"details\":\"Emergency pause\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"placeBid(uint256)\":{\"details\":\"Place a bid on an English or Reserve auction\"},\"revealSealedBid(uint256,uint256,uint256)\":{\"details\":\"Reveal sealed bid\"},\"settleAuction(uint256)\":{\"details\":\"Settle auction and transfer NFT to winner\"},\"startRevealPhase(uint256)\":{\"details\":\"Start reveal phase for sealed bid auctions\"},\"submitSealedBid(uint256,bytes32)\":{\"details\":\"Submit sealed bid (commitment phase)\"},\"totalAuctions()\":{\"details\":\"Get total number of auctions\"},\"unpause()\":{\"details\":\"Unpause\"},\"updateMinimumBidIncrement(uint256)\":{\"details\":\"Update minimum bid increment\"},\"updatePlatformFee(uint256)\":{\"details\":\"Update platform fee percentage\"},\"withdrawPlatformFees(address,uint256)\":{\"details\":\"Withdraw platform fees\"}},\"stateVariables\":{\"MAX_AUCTION_DURATION\":{\"details\":\"Maximum auction duration (30 days)\"},\"MAX_BIDS_PER_AUCTION\":{\"details\":\"Maximum number of bids per auction to prevent DoS\"},\"MIN_AUCTION_DURATION\":{\"details\":\"Minimum auction duration (1 hour)\"},\"MIN_BID_INTERVAL\":{\"details\":\"Minimum time between bids to prevent spam (5 minutes)\"},\"_auctionIdCounter\":{\"details\":\"Counter for auction IDs\"},\"accessControl\":{\"details\":\"Reference to access control contract\"},\"auctionBids\":{\"details\":\"Mapping from auction ID to bids\"},\"auctions\":{\"details\":\"Mapping from auction ID to auction details\"},\"hasRevealed\":{\"details\":\"Mapping from auction ID to bidder reveal status\"},\"lastBidTime\":{\"details\":\"Mapping to track last bid time per user per auction\"},\"minimumBidIncrement\":{\"details\":\"Minimum bid increment percentage (500 = 5%)\"},\"platformFeePercentage\":{\"details\":\"Platform fee percentage (250 = 2.5%)\"},\"sealedBids\":{\"details\":\"Mapping from auction ID to sealed bids (for sealed bid auctions)\"},\"userAuctions\":{\"details\":\"Mapping from user to their active auctions\"},\"userBids\":{\"details\":\"Mapping from user to their active bids\"}},\"title\":\"MooveAuction\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Supports English, Dutch, Sealed Bid, and Reserve auctions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MooveAuction.sol\":\"MooveAuction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     *\\n     * NOTE: ERC-2981 allows setting the royalty to 100% of the price. In that case all the price would be sent to the\\n     * royalty receiver and 0 tokens to the seller. Contracts dealing with royalty should consider empty transfers.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3b017a19c1730050d0fdff8dfa9255741634699aa4217442724746ca49e13292\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/MooveAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MooveAccessControl\\r\\n * @dev Centralized access control system for the Moove ecosystem\\r\\n * @notice Manages roles, permissions, and security features across all Moove contracts\\r\\n */\\r\\ncontract MooveAccessControl is AccessControl, Pausable, ReentrancyGuard {\\r\\n    // ============= ROLE DEFINITIONS =============\\r\\n\\r\\n    /// @dev Master admin role - can grant/revoke all other roles\\r\\n    bytes32 public constant MASTER_ADMIN_ROLE = keccak256(\\\"MASTER_ADMIN_ROLE\\\");\\r\\n\\r\\n    /// @dev NFT minting permissions\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n\\r\\n    /// @dev Auction and marketplace management\\r\\n    bytes32 public constant AUCTION_MANAGER_ROLE =\\r\\n        keccak256(\\\"AUCTION_MANAGER_ROLE\\\");\\r\\n\\r\\n    /// @dev Vehicle customization management\\r\\n    bytes32 public constant CUSTOMIZATION_ADMIN_ROLE =\\r\\n        keccak256(\\\"CUSTOMIZATION_ADMIN_ROLE\\\");\\r\\n\\r\\n    /// @dev Price and fee management\\r\\n    bytes32 public constant PRICE_MANAGER_ROLE =\\r\\n        keccak256(\\\"PRICE_MANAGER_ROLE\\\");\\r\\n\\r\\n    /// @dev Emergency pause permissions\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\r\\n\\r\\n    /// @dev Fund withdrawal permissions\\r\\n    bytes32 public constant WITHDRAWER_ROLE = keccak256(\\\"WITHDRAWER_ROLE\\\");\\r\\n\\r\\n    /// @dev Contract upgrade permissions\\r\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\r\\n\\r\\n    /// @dev Metadata management permissions\\r\\n    bytes32 public constant METADATA_MANAGER_ROLE =\\r\\n        keccak256(\\\"METADATA_MANAGER_ROLE\\\");\\r\\n\\r\\n    bytes32 public constant TRADER_ROLE = keccak256(\\\"TRADER_ROLE\\\");\\r\\n    bytes32 public constant MARKETPLACE_MANAGER_ROLE =\\r\\n        keccak256(\\\"MARKETPLACE_MANAGER_ROLE\\\");\\r\\n\\r\\n    // ============= STATE VARIABLES =============\\r\\n\\r\\n    /// @dev Mapping to track authorized contract addresses\\r\\n    mapping(address => bool) public authorizedContracts;\\r\\n\\r\\n    /// @dev Mapping to track emergency contacts\\r\\n    mapping(address => bool) public emergencyContacts;\\r\\n\\r\\n    /// @dev Time lock duration for critical operations (in seconds)\\r\\n    uint256 public timeLockDuration = 24 hours;\\r\\n\\r\\n    /// @dev Mapping to track time-locked operations\\r\\n    mapping(bytes32 => uint256) public timelockExecutions;\\r\\n\\r\\n    /// @dev Mapping to track role members for enumeration (if needed)\\r\\n    mapping(bytes32 => address[]) private _roleMembers;\\r\\n    mapping(bytes32 => mapping(address => uint256)) private _roleMemberIndex;\\r\\n\\r\\n    /// @dev Global pause state that affects all contracts\\r\\n    bool public globalPause = false;\\r\\n\\r\\n    /// @dev Maximum number of admins allowed\\r\\n    uint256 public constant MAX_ADMINS = 10;\\r\\n\\r\\n    /// @dev Current number of master admins\\r\\n    uint256 public masterAdminCount = 0;\\r\\n\\r\\n    // ============= EVENTS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a contract is authorized or deauthorized\\r\\n     */\\r\\n    event ContractAuthorizationChanged(\\r\\n        address indexed contractAddress,\\r\\n        bool authorized\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when an emergency contact is added or removed\\r\\n     */\\r\\n    event EmergencyContactChanged(address indexed contact, bool added);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when timelock duration is updated\\r\\n     */\\r\\n    event TimeLockDurationUpdated(uint256 oldDuration, uint256 newDuration);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a time-locked operation is scheduled\\r\\n     */\\r\\n    event TimeLockOperationScheduled(\\r\\n        bytes32 indexed operationId,\\r\\n        uint256 executeAfter\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a time-locked operation is executed\\r\\n     */\\r\\n    event TimeLockOperationExecuted(bytes32 indexed operationId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when global pause state changes\\r\\n     */\\r\\n    event GlobalPauseStateChanged(bool paused);\\r\\n\\r\\n    // ============= MODIFIERS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if caller is an authorized contract\\r\\n     */\\r\\n    modifier onlyAuthorizedContract() {\\r\\n        require(authorizedContracts[msg.sender], \\\"Not authorized contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if caller is emergency contact\\r\\n     */\\r\\n    modifier onlyEmergencyContact() {\\r\\n        require(\\r\\n            emergencyContacts[msg.sender] ||\\r\\n                hasRole(MASTER_ADMIN_ROLE, msg.sender),\\r\\n            \\\"Not emergency contact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to ensure global pause is not active\\r\\n     */\\r\\n    modifier whenNotGloballyPaused() {\\r\\n        require(!globalPause, \\\"Globally paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier for time-locked operations\\r\\n     */\\r\\n    modifier onlyAfterTimelock(bytes32 operationId) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] != 0 &&\\r\\n                block.timestamp >= timelockExecutions[operationId],\\r\\n            \\\"Operation not ready or not scheduled\\\"\\r\\n        );\\r\\n        _;\\r\\n        delete timelockExecutions[operationId];\\r\\n    }\\r\\n\\r\\n    // ============= CONSTRUCTOR =============\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor sets up initial roles and admin\\r\\n     * @param initialAdmin Address to be granted master admin role\\r\\n     */\\r\\n    constructor(address initialAdmin) {\\r\\n        require(initialAdmin != address(0), \\\"Invalid admin address\\\");\\r\\n\\r\\n        // Grant master admin role to initial admin\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialAdmin);\\r\\n        _grantRole(MASTER_ADMIN_ROLE, initialAdmin);\\r\\n\\r\\n        // Set master admin as role admin for all roles\\r\\n        _setRoleAdmin(MINTER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(AUCTION_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(CUSTOMIZATION_ADMIN_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(PRICE_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(PAUSER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(WITHDRAWER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(UPGRADER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(METADATA_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(TRADER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(MARKETPLACE_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n\\r\\n        // Add initial admin as emergency contact\\r\\n        emergencyContacts[initialAdmin] = true;\\r\\n        masterAdminCount = 1;\\r\\n\\r\\n        emit EmergencyContactChanged(initialAdmin, true);\\r\\n    }\\r\\n\\r\\n    // ============= ROLE MANAGEMENT =============\\r\\n\\r\\n    /**\\r\\n     * @dev Grant master admin role with safety checks\\r\\n     * @param account Address to grant master admin role\\r\\n     */\\r\\n    function grantMasterAdmin(\\r\\n        address account\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(account != address(0), \\\"Invalid address\\\");\\r\\n        require(masterAdminCount < MAX_ADMINS, \\\"Too many admins\\\");\\r\\n        require(!hasRole(MASTER_ADMIN_ROLE, account), \\\"Already master admin\\\");\\r\\n\\r\\n        _grantRole(MASTER_ADMIN_ROLE, account);\\r\\n        emergencyContacts[account] = true;\\r\\n        masterAdminCount++;\\r\\n\\r\\n        emit EmergencyContactChanged(account, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revoke master admin role with safety checks\\r\\n     * @param account Address to revoke master admin role from\\r\\n     */\\r\\n    function revokeMasterAdmin(\\r\\n        address account\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(account != msg.sender, \\\"Cannot revoke own admin\\\");\\r\\n        require(masterAdminCount > 1, \\\"Cannot remove last admin\\\");\\r\\n        require(hasRole(MASTER_ADMIN_ROLE, account), \\\"Not master admin\\\");\\r\\n\\r\\n        _revokeRole(MASTER_ADMIN_ROLE, account);\\r\\n        emergencyContacts[account] = false;\\r\\n        masterAdminCount--;\\r\\n\\r\\n        emit EmergencyContactChanged(account, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch grant roles to multiple addresses\\r\\n     * @param role The role to grant\\r\\n     * @param accounts Array of addresses to grant the role to\\r\\n     */\\r\\n    function batchGrantRole(\\r\\n        bytes32 role,\\r\\n        address[] calldata accounts\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            if (!hasRole(role, accounts[i])) {\\r\\n                _grantRole(role, accounts[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch revoke roles from multiple addresses\\r\\n     * @param role The role to revoke\\r\\n     * @param accounts Array of addresses to revoke the role from\\r\\n     */\\r\\n    function batchRevokeRole(\\r\\n        bytes32 role,\\r\\n        address[] calldata accounts\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            if (hasRole(role, accounts[i])) {\\r\\n                _revokeRole(role, accounts[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============= CONTRACT AUTHORIZATION =============\\r\\n\\r\\n    /**\\r\\n     * @dev Authorize a contract to interact with the system\\r\\n     * @param contractAddress Address of the contract to authorize\\r\\n     */\\r\\n    function authorizeContract(\\r\\n        address contractAddress\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(contractAddress != address(0), \\\"Invalid contract address\\\");\\r\\n        require(contractAddress.code.length > 0, \\\"Not a contract\\\");\\r\\n\\r\\n        authorizedContracts[contractAddress] = true;\\r\\n        emit ContractAuthorizationChanged(contractAddress, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deauthorize a contract\\r\\n     * @param contractAddress Address of the contract to deauthorize\\r\\n     */\\r\\n    function deauthorizeContract(\\r\\n        address contractAddress\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        authorizedContracts[contractAddress] = false;\\r\\n        emit ContractAuthorizationChanged(contractAddress, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch authorize multiple contracts\\r\\n     * @param contractAddresses Array of contract addresses to authorize\\r\\n     */\\r\\n    function batchAuthorizeContracts(\\r\\n        address[] calldata contractAddresses\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < contractAddresses.length; i++) {\\r\\n            if (\\r\\n                contractAddresses[i] != address(0) &&\\r\\n                contractAddresses[i].code.length > 0\\r\\n            ) {\\r\\n                authorizedContracts[contractAddresses[i]] = true;\\r\\n                emit ContractAuthorizationChanged(contractAddresses[i], true);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if user is able to trade\\r\\n     * @param account Account check\\r\\n     */\\r\\n\\r\\n    function canTrade(\\r\\n        address account\\r\\n    ) external view returns (bool hasTraderRole) {\\r\\n        return\\r\\n            hasRole(TRADER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if user is able to use Marketplace\\r\\n     * @param account Account check\\r\\n     */\\r\\n\\r\\n    function canManageMarketplace(\\r\\n        address account\\r\\n    ) external view returns (bool hasMarketplaceRole) {\\r\\n        return\\r\\n            hasRole(MARKETPLACE_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    // ============= EMERGENCY MANAGEMENT =============\\r\\n\\r\\n    /**\\r\\n     * @dev Add emergency contact\\r\\n     * @param contact Address to add as emergency contact\\r\\n     */\\r\\n    function addEmergencyContact(\\r\\n        address contact\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(contact != address(0), \\\"Invalid contact address\\\");\\r\\n\\r\\n        emergencyContacts[contact] = true;\\r\\n        emit EmergencyContactChanged(contact, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove emergency contact\\r\\n     * @param contact Address to remove as emergency contact\\r\\n     */\\r\\n    function removeEmergencyContact(\\r\\n        address contact\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        emergencyContacts[contact] = false;\\r\\n        emit EmergencyContactChanged(contact, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency pause - can be called by emergency contacts\\r\\n     */\\r\\n    function emergencyPause() external onlyEmergencyContact {\\r\\n        globalPause = true;\\r\\n        _pause();\\r\\n        emit GlobalPauseStateChanged(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency unpause - requires master admin\\r\\n     */\\r\\n    function emergencyUnpause() external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        globalPause = false;\\r\\n        _unpause();\\r\\n        emit GlobalPauseStateChanged(false);\\r\\n    }\\r\\n\\r\\n    // ============= TIME LOCK OPERATIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Schedule a time-locked operation\\r\\n     * @param operationId Unique identifier for the operation\\r\\n     */\\r\\n    function scheduleTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] == 0,\\r\\n            \\\"Operation already scheduled\\\"\\r\\n        );\\r\\n\\r\\n        uint256 executeAfter = block.timestamp + timeLockDuration;\\r\\n        timelockExecutions[operationId] = executeAfter;\\r\\n\\r\\n        emit TimeLockOperationScheduled(operationId, executeAfter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Cancel a time-locked operation\\r\\n     * @param operationId Unique identifier for the operation\\r\\n     */\\r\\n    function cancelTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] != 0,\\r\\n            \\\"Operation not scheduled\\\"\\r\\n        );\\r\\n\\r\\n        delete timelockExecutions[operationId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update timelock duration\\r\\n     * @param newDuration New duration in seconds\\r\\n     */\\r\\n    function updateTimeLockDuration(\\r\\n        uint256 newDuration\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            newDuration >= 1 hours && newDuration <= 7 days,\\r\\n            \\\"Invalid duration\\\"\\r\\n        );\\r\\n\\r\\n        uint256 oldDuration = timeLockDuration;\\r\\n        timeLockDuration = newDuration;\\r\\n\\r\\n        emit TimeLockDurationUpdated(oldDuration, newDuration);\\r\\n    }\\r\\n\\r\\n    // ============= QUERY FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address has minting permissions\\r\\n     * @param account Address to check\\r\\n     * @return hasMinterRole True if address can mint\\r\\n     */\\r\\n    function canMint(\\r\\n        address account\\r\\n    ) external view returns (bool hasMinterRole) {\\r\\n        return\\r\\n            hasRole(MINTER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage auctions\\r\\n     * @param account Address to check\\r\\n     * @return hasAuctionRole True if address can manage auctions\\r\\n     */\\r\\n    function canManageAuctions(\\r\\n        address account\\r\\n    ) external view returns (bool hasAuctionRole) {\\r\\n        return\\r\\n            hasRole(AUCTION_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage customizations\\r\\n     * @param account Address to check\\r\\n     * @return hasCustomizationRole True if address can manage customizations\\r\\n     */\\r\\n    function canManageCustomizations(\\r\\n        address account\\r\\n    ) external view returns (bool hasCustomizationRole) {\\r\\n        return\\r\\n            hasRole(CUSTOMIZATION_ADMIN_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage prices\\r\\n     * @param account Address to check\\r\\n     * @return hasPriceRole True if address can manage prices\\r\\n     */\\r\\n    function canManagePrices(\\r\\n        address account\\r\\n    ) external view returns (bool hasPriceRole) {\\r\\n        return\\r\\n            hasRole(PRICE_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can pause contracts\\r\\n     * @param account Address to check\\r\\n     * @return hasPauserRole True if address can pause\\r\\n     */\\r\\n    function canPause(\\r\\n        address account\\r\\n    ) external view returns (bool hasPauserRole) {\\r\\n        return\\r\\n            hasRole(PAUSER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account) ||\\r\\n            emergencyContacts[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can withdraw funds\\r\\n     * @param account Address to check\\r\\n     * @return hasWithdrawRole True if address can withdraw\\r\\n     */\\r\\n    function canWithdraw(\\r\\n        address account\\r\\n    ) external view returns (bool hasWithdrawRole) {\\r\\n        return\\r\\n            hasRole(WITHDRAWER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get all role members for a specific role\\r\\n     * @param role The role to query\\r\\n     * @return members Array of addresses with the role\\r\\n     */\\r\\n    function getRoleMembers(\\r\\n        bytes32 role\\r\\n    ) external view returns (address[] memory members) {\\r\\n        return _roleMembers[role];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get number of members for a specific role\\r\\n     * @param role The role to query\\r\\n     * @return count Number of addresses with the role\\r\\n     */\\r\\n    function getRoleMemberCount(\\r\\n        bytes32 role\\r\\n    ) external view returns (uint256 count) {\\r\\n        return _roleMembers[role].length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Execute time-locked operation validation\\r\\n     * @param operationId The operation ID to validate\\r\\n     */\\r\\n    function executeTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) onlyAfterTimelock(operationId) {\\r\\n        emit TimeLockOperationExecuted(operationId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if the system is in global pause state\\r\\n     * @return isPaused True if globally paused\\r\\n     */\\r\\n    function isGloballyPaused() external view returns (bool isPaused) {\\r\\n        return globalPause;\\r\\n    }\\r\\n\\r\\n    // ============= EXTERNAL VALIDATION FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Validate that caller has required role (called by other contracts)\\r\\n     * @param role The role to check\\r\\n     * @param account The account to validate\\r\\n     */\\r\\n    function validateRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) external view onlyAuthorizedContract {\\r\\n        require(\\r\\n            hasRole(role, account) || hasRole(MASTER_ADMIN_ROLE, account),\\r\\n            \\\"Access denied\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validate that system is not paused (called by other contracts)\\r\\n     */\\r\\n    function validateNotPaused() external view onlyAuthorizedContract {\\r\\n        require(!globalPause && !paused(), \\\"System paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override _grantRole to track role members\\r\\n     */\\r\\n    function _grantRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) internal override returns (bool) {\\r\\n        super._grantRole(role, account);\\r\\n\\r\\n        // Track role member for enumeration\\r\\n        if (_roleMemberIndex[role][account] == 0) {\\r\\n            _roleMembers[role].push(account);\\r\\n            _roleMemberIndex[role][account] = _roleMembers[role].length;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override _revokeRole to untrack role members\\r\\n     */\\r\\n    function _revokeRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) internal override returns (bool) {\\r\\n        super._revokeRole(role, account);\\r\\n\\r\\n        // Remove from role member tracking\\r\\n        uint256 index = _roleMemberIndex[role][account];\\r\\n        if (index > 0) {\\r\\n            uint256 lastIndex = _roleMembers[role].length;\\r\\n            address lastMember = _roleMembers[role][lastIndex - 1];\\r\\n\\r\\n            // Move last member to the position of the removed member\\r\\n            _roleMembers[role][index - 1] = lastMember;\\r\\n            _roleMemberIndex[role][lastMember] = index;\\r\\n\\r\\n            // Remove last element\\r\\n            _roleMembers[role].pop();\\r\\n            delete _roleMemberIndex[role][account];\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0fa63b562a209458f5838960171dc2a40198e14208332f6a742a7f399f4e7769\",\"license\":\"MIT\"},\"contracts/MooveAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"./MooveAccessControl.sol\\\";\\n\\n/**\\n * @title MooveAuction\\n * @dev Advanced auction system with 4 different auction types for Moove Sticker NFTs\\n * @notice Supports English, Dutch, Sealed Bid, and Reserve auctions\\n */\\ncontract MooveAuction is ReentrancyGuard, Pausable {\\n    // ============= STATE VARIABLES =============\\n\\n    /// @dev Reference to access control contract\\n    MooveAccessControl public immutable accessControl;\\n\\n    /// @dev Counter for auction IDs\\n    uint256 private _auctionIdCounter;\\n\\n    /// @dev Mapping from auction ID to auction details\\n    mapping(uint256 => Auction) public auctions;\\n\\n    /// @dev Mapping from auction ID to bids\\n    mapping(uint256 => Bid[]) public auctionBids;\\n\\n    /// @dev Mapping from auction ID to sealed bids (for sealed bid auctions)\\n    mapping(uint256 => mapping(address => bytes32)) public sealedBids;\\n\\n    /// @dev Mapping from auction ID to bidder reveal status\\n    mapping(uint256 => mapping(address => bool)) public hasRevealed;\\n\\n    /// @dev Mapping from user to their active auctions\\n    mapping(address => uint256[]) public userAuctions;\\n\\n    /// @dev Mapping from user to their active bids\\n    mapping(address => uint256[]) public userBids;\\n\\n    /// @dev Platform fee percentage (250 = 2.5%)\\n    uint256 public platformFeePercentage = 250;\\n\\n    /// @dev Minimum bid increment percentage (500 = 5%)\\n    uint256 public minimumBidIncrement = 500;\\n\\n    /// @dev Maximum auction duration (30 days)\\n    uint256 public constant MAX_AUCTION_DURATION = 30 days;\\n\\n    /// @dev Minimum auction duration (1 hour)\\n    uint256 public constant MIN_AUCTION_DURATION = 1 hours;\\n\\n    /// @dev Maximum number of bids per auction to prevent DoS\\n    uint256 public constant MAX_BIDS_PER_AUCTION = 1000;\\n\\n    /// @dev Minimum time between bids to prevent spam (5 minutes)\\n    uint256 public constant MIN_BID_INTERVAL = 5 minutes;\\n\\n    /// @dev Mapping to track last bid time per user per auction\\n    mapping(uint256 => mapping(address => uint256)) public lastBidTime;\\n\\n    // ============= STRUCTS =============\\n\\n    struct Auction {\\n        uint256 auctionId;\\n        address nftContract;\\n        uint256 tokenId;\\n        address seller;\\n        AuctionType auctionType;\\n        uint256 startingPrice;\\n        uint256 reservePrice;\\n        uint256 buyNowPrice;\\n        uint256 currentPrice;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 bidIncrement;\\n        address highestBidder;\\n        uint256 highestBid;\\n        AuctionStatus status;\\n        bool allowPartialFulfillment;\\n        uint256 minBidders;\\n        uint256 totalBidders;\\n        bool isSettled; // New field to prevent double settlement\\n    }\\n\\n    struct Bid {\\n        address bidder;\\n        uint256 amount;\\n        uint256 timestamp;\\n        bool isWinning;\\n        bool isRefunded;\\n    }\\n\\n    struct SealedBidReveal {\\n        uint256 amount;\\n        uint256 nonce;\\n    }\\n\\n    enum AuctionType {\\n        ENGLISH, // Traditional ascending bid auction\\n        DUTCH, // Descending price auction\\n        SEALED_BID, // Sealed bid auction with reveal phase\\n        RESERVE // Reserve auction with hidden minimum\\n    }\\n\\n    enum AuctionStatus {\\n        PENDING, // Created but not started\\n        ACTIVE, // Currently accepting bids\\n        REVEAL, // Sealed bid reveal phase\\n        ENDED, // Finished, awaiting settlement\\n        SETTLED, // Completed and settled\\n        CANCELLED // Cancelled by seller or admin\\n    }\\n\\n    // ============= EVENTS =============\\n\\n    event AuctionCreated(\\n        uint256 indexed auctionId,\\n        address indexed seller,\\n        address indexed nftContract,\\n        uint256 tokenId,\\n        AuctionType auctionType,\\n        uint256 startingPrice,\\n        uint256 duration\\n    );\\n\\n    event BidPlaced(\\n        uint256 indexed auctionId,\\n        address indexed bidder,\\n        uint256 amount,\\n        bool isHighestBid\\n    );\\n\\n    event SealedBidSubmitted(\\n        uint256 indexed auctionId,\\n        address indexed bidder,\\n        bytes32 bidHash\\n    );\\n\\n    event SealedBidRevealed(\\n        uint256 indexed auctionId,\\n        address indexed bidder,\\n        uint256 amount\\n    );\\n\\n    event AuctionSettled(\\n        uint256 indexed auctionId,\\n        address indexed winner,\\n        uint256 finalPrice,\\n        uint256 platformFee,\\n        uint256 royaltyFee\\n    );\\n\\n    event AuctionCancelled(uint256 indexed auctionId, string reason);\\n\\n    event AuctionEnded(uint256 indexed auctionId);\\n\\n    event BidRefunded(\\n        uint256 indexed auctionId,\\n        address indexed bidder,\\n        uint256 amount\\n    );\\n\\n    event DutchPriceUpdate(uint256 indexed auctionId, uint256 newPrice);\\n\\n    event ReserveReached(uint256 indexed auctionId, uint256 reservePrice);\\n\\n    // ============= MODIFIERS =============\\n\\n    modifier onlyAccessControlRole(bytes32 role) {\\n        accessControl.validateRole(role, msg.sender);\\n        _;\\n    }\\n\\n    modifier validAuction(uint256 auctionId) {\\n        require(auctionId < _auctionIdCounter, \\\"Auction does not exist\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuctionSeller(uint256 auctionId) {\\n        require(auctions[auctionId].seller == msg.sender, \\\"Not auction seller\\\");\\n        _;\\n    }\\n\\n    modifier auctionActive(uint256 auctionId) {\\n        require(\\n            auctions[auctionId].status == AuctionStatus.ACTIVE,\\n            \\\"Auction not active\\\"\\n        );\\n        require(\\n            block.timestamp <= auctions[auctionId].endTime,\\n            \\\"Auction ended\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier auctionEnded(uint256 auctionId) {\\n        require(\\n            auctions[auctionId].status == AuctionStatus.ENDED ||\\n                block.timestamp > auctions[auctionId].endTime,\\n            \\\"Auction still active\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notSettled(uint256 auctionId) {\\n        require(!auctions[auctionId].isSettled, \\\"Auction already settled\\\");\\n        _;\\n    }\\n\\n    modifier bidInterval(uint256 auctionId) {\\n        require(\\n            block.timestamp >= lastBidTime[auctionId][msg.sender] + MIN_BID_INTERVAL,\\n            \\\"Bid too soon\\\"\\n        );\\n        _;\\n    }\\n\\n    // ============= CONSTRUCTOR =============\\n\\n    constructor(address _accessControl) {\\n        require(_accessControl != address(0), \\\"Invalid access control address\\\");\\n        accessControl = MooveAccessControl(_accessControl);\\n    }\\n\\n    // ============= AUCTION CREATION =============\\n\\n    /**\\n     * @dev Create a new auction\\n     * @param nftContract Address of the NFT contract\\n     * @param tokenId Token ID to auction\\n     * @param auctionType Type of auction\\n     * @param startingPrice Starting price for the auction\\n     * @param reservePrice Reserve price (minimum acceptable price)\\n     * @param buyNowPrice Buy now price (0 if not applicable)\\n     * @param duration Duration of the auction in seconds\\n     * @param bidIncrement Minimum bid increment (0 for default)\\n     */\\n    function createAuction(\\n        address nftContract,\\n        uint256 tokenId,\\n        AuctionType auctionType,\\n        uint256 startingPrice,\\n        uint256 reservePrice,\\n        uint256 buyNowPrice,\\n        uint256 duration,\\n        uint256 bidIncrement\\n    ) external nonReentrant whenNotPaused returns (uint256 auctionId) {\\n        require(nftContract != address(0), \\\"Invalid NFT contract\\\");\\n        require(startingPrice > 0, \\\"Starting price must be greater than 0\\\");\\n        require(\\n            duration >= MIN_AUCTION_DURATION &&\\n                duration <= MAX_AUCTION_DURATION,\\n            \\\"Invalid duration\\\"\\n        );\\n\\n        // Verify NFT ownership and approval\\n        IERC721 nft = IERC721(nftContract);\\n        require(nft.ownerOf(tokenId) == msg.sender, \\\"Not NFT owner\\\");\\n        require(\\n            nft.isApprovedForAll(msg.sender, address(this)) ||\\n                nft.getApproved(tokenId) == address(this),\\n            \\\"NFT not approved\\\"\\n        );\\n\\n        // Validate auction parameters based on type\\n        _validateAuctionParameters(\\n            auctionType,\\n            startingPrice,\\n            reservePrice,\\n            buyNowPrice\\n        );\\n\\n        auctionId = _auctionIdCounter++;\\n        uint256 startTime = block.timestamp;\\n        uint256 endTime = startTime + duration;\\n\\n        // Set bid increment\\n        if (bidIncrement == 0) {\\n            bidIncrement = (startingPrice * minimumBidIncrement) / 10000;\\n            if (bidIncrement == 0) bidIncrement = 0.001 ether;\\n        }\\n\\n        // Create auction\\n        auctions[auctionId] = Auction({\\n            auctionId: auctionId,\\n            nftContract: nftContract,\\n            tokenId: tokenId,\\n            seller: msg.sender,\\n            auctionType: auctionType,\\n            startingPrice: startingPrice,\\n            reservePrice: reservePrice,\\n            buyNowPrice: buyNowPrice,\\n            currentPrice: auctionType == AuctionType.DUTCH ? startingPrice : 0,\\n            startTime: startTime,\\n            endTime: endTime,\\n            bidIncrement: bidIncrement,\\n            highestBidder: address(0),\\n            highestBid: 0,\\n            status: AuctionStatus.ACTIVE,\\n            allowPartialFulfillment: false,\\n            minBidders: auctionType == AuctionType.SEALED_BID ? 2 : 1,\\n            totalBidders: 0,\\n            isSettled: false\\n        });\\n\\n        // Add to user's auctions\\n        userAuctions[msg.sender].push(auctionId);\\n\\n        // Transfer NFT to contract (escrow)\\n        nft.transferFrom(msg.sender, address(this), tokenId);\\n\\n        emit AuctionCreated(\\n            auctionId,\\n            msg.sender,\\n            nftContract,\\n            tokenId,\\n            auctionType,\\n            startingPrice,\\n            duration\\n        );\\n    }\\n\\n    // ============= BIDDING FUNCTIONS =============\\n\\n    /**\\n     * @dev Place a bid on an English or Reserve auction\\n     */\\n    function placeBid(uint256 auctionId) external payable nonReentrant {\\n        Auction storage auction = auctions[auctionId];\\n        require(\\n            auction.auctionType == AuctionType.ENGLISH ||\\n                auction.auctionType == AuctionType.RESERVE,\\n            \\\"Invalid auction type for this bid method\\\"\\n        );\\n        require(msg.sender != auction.seller, \\\"Seller cannot bid\\\");\\n        require(auction.status == AuctionStatus.ACTIVE, \\\"Auction not active\\\");\\n        require(block.timestamp < auction.endTime, \\\"Auction ended\\\");\\n        require(msg.value > 0, \\\"Bid amount must be greater than 0\\\");\\n\\n        // Check minimum bid increment\\n        uint256 minBid = auction.highestBid + auction.bidIncrement;\\n        if (auction.highestBid == 0) {\\n            minBid = auction.startingPrice;\\n        }\\n        require(msg.value >= minBid, \\\"Bid too low\\\");\\n\\n        // Check bid interval\\n        require(\\n            block.timestamp >= lastBidTime[auctionId][msg.sender] + MIN_BID_INTERVAL,\\n            \\\"Bid too soon\\\"\\n        );\\n\\n        // Update state first to prevent reentrancy\\n        address previousBidder = auction.highestBidder;\\n        uint256 previousBid = auction.highestBid;\\n\\n        // Update auction state\\n        auction.highestBidder = msg.sender;\\n        auction.highestBid = msg.value;\\n        auction.totalBidders++;\\n        lastBidTime[auctionId][msg.sender] = block.timestamp;\\n\\n        // Add bid to array\\n        auctionBids[auctionId].push(\\n            Bid({\\n                bidder: msg.sender,\\n                amount: msg.value,\\n                timestamp: block.timestamp,\\n                isWinning: true,\\n                isRefunded: false\\n            })\\n        );\\n\\n        // Update previous bids to not winning\\n        for (uint256 i = 0; i < auctionBids[auctionId].length - 1; i++) {\\n            auctionBids[auctionId][i].isWinning = false;\\n        }\\n\\n        // Add to user bids if not already there\\n        if (!_hasUserBid(auctionId, msg.sender)) {\\n            userBids[msg.sender].push(auctionId);\\n        }\\n\\n        // Refund previous bidder\\n        if (previousBidder != address(0)) {\\n            _refundBid(auctionId, previousBidder, previousBid);\\n        }\\n\\n        // Check if reserve price is met\\n        if (auction.reservePrice > 0 && msg.value >= auction.reservePrice) {\\n            emit ReserveReached(auctionId, auction.reservePrice);\\n        }\\n\\n        emit BidPlaced(auctionId, msg.sender, msg.value, true);\\n    }\\n\\n    /**\\n     * @dev Purchase at current price for Dutch auction\\n     */\\n    function buyNowDutch(\\n        uint256 auctionId\\n    )\\n        external\\n        payable\\n        validAuction(auctionId)\\n        auctionActive(auctionId)\\n        notSettled(auctionId)\\n        nonReentrant\\n    {\\n        Auction storage auction = auctions[auctionId];\\n        require(\\n            auction.auctionType == AuctionType.DUTCH,\\n            \\\"Not a Dutch auction\\\"\\n        );\\n        require(msg.sender != auction.seller, \\\"Seller cannot buy\\\");\\n\\n        uint256 currentPrice = _getDutchPrice(auctionId);\\n        require(msg.value >= currentPrice, \\\"Insufficient payment\\\");\\n\\n        _executeBuyNow(auctionId, msg.sender, currentPrice);\\n\\n        // Refund excess payment\\n        if (msg.value > currentPrice) {\\n            payable(msg.sender).transfer(msg.value - currentPrice);\\n        }\\n    }\\n\\n    /**\\n     * @dev Submit sealed bid (commitment phase)\\n     */\\n    function submitSealedBid(\\n        uint256 auctionId,\\n        bytes32 bidHash\\n    )\\n        external\\n        payable\\n        validAuction(auctionId)\\n        auctionActive(auctionId)\\n        notSettled(auctionId)\\n        bidInterval(auctionId)\\n        nonReentrant\\n    {\\n        Auction storage auction = auctions[auctionId];\\n        require(\\n            auction.auctionType == AuctionType.SEALED_BID,\\n            \\\"Not a sealed bid auction\\\"\\n        );\\n        require(msg.sender != auction.seller, \\\"Seller cannot bid\\\");\\n        require(msg.value >= auction.startingPrice, \\\"Bid below minimum\\\");\\n        require(\\n            sealedBids[auctionId][msg.sender] == bytes32(0),\\n            \\\"Bid already submitted\\\"\\n        );\\n\\n        // Prevent DoS by limiting number of bidders\\n        require(\\n            auction.totalBidders < MAX_BIDS_PER_AUCTION,\\n            \\\"Too many bidders\\\"\\n        );\\n\\n        // Update last bid time\\n        lastBidTime[auctionId][msg.sender] = block.timestamp;\\n\\n        // Store sealed bid hash and escrow payment\\n        sealedBids[auctionId][msg.sender] = bidHash;\\n\\n        // Track bidder\\n        if (!_hasUserBid(auctionId, msg.sender)) {\\n            auction.totalBidders++;\\n            userBids[msg.sender].push(auctionId);\\n        }\\n\\n        // Add to bid history (amount hidden)\\n        auctionBids[auctionId].push(\\n            Bid({\\n                bidder: msg.sender,\\n                amount: msg.value, // Escrowed amount, not actual bid\\n                timestamp: block.timestamp,\\n                isWinning: false,\\n                isRefunded: false\\n            })\\n        );\\n\\n        emit SealedBidSubmitted(auctionId, msg.sender, bidHash);\\n    }\\n\\n    /**\\n     * @dev Reveal sealed bid\\n     */\\n    function revealSealedBid(\\n        uint256 auctionId,\\n        uint256 bidAmount,\\n        uint256 nonce\\n    ) external validAuction(auctionId) notSettled(auctionId) nonReentrant {\\n        Auction storage auction = auctions[auctionId];\\n        require(\\n            auction.auctionType == AuctionType.SEALED_BID,\\n            \\\"Not a sealed bid auction\\\"\\n        );\\n        require(auction.status == AuctionStatus.REVEAL, \\\"Not in reveal phase\\\");\\n        require(!hasRevealed[auctionId][msg.sender], \\\"Already revealed\\\");\\n        require(\\n            sealedBids[auctionId][msg.sender] != bytes32(0),\\n            \\\"No sealed bid submitted\\\"\\n        );\\n\\n        // Verify bid hash\\n        bytes32 bidHash = keccak256(\\n            abi.encodePacked(bidAmount, nonce, msg.sender)\\n        );\\n        require(\\n            sealedBids[auctionId][msg.sender] == bidHash,\\n            \\\"Invalid bid reveal\\\"\\n        );\\n\\n        hasRevealed[auctionId][msg.sender] = true;\\n\\n        // Find and update the bid in history\\n        for (uint256 i = 0; i < auctionBids[auctionId].length; i++) {\\n            if (auctionBids[auctionId][i].bidder == msg.sender) {\\n                // Check if user escrowed enough\\n                require(\\n                    auctionBids[auctionId][i].amount >= bidAmount,\\n                    \\\"Insufficient escrow\\\"\\n                );\\n\\n                // Update with actual bid amount\\n                auctionBids[auctionId][i].amount = bidAmount;\\n                break;\\n            }\\n        }\\n\\n        // Check if this is the new highest bid\\n        if (bidAmount > auction.highestBid) {\\n            auction.highestBidder = msg.sender;\\n            auction.highestBid = bidAmount;\\n        }\\n\\n        emit SealedBidRevealed(auctionId, msg.sender, bidAmount);\\n    }\\n\\n    // ============= AUCTION SETTLEMENT =============\\n\\n    /**\\n     * @dev End auction when time expires (can be called by anyone)\\n     */\\n    function endAuction(uint256 auctionId) external validAuction(auctionId) {\\n        Auction storage auction = auctions[auctionId];\\n        require(\\n            auction.status == AuctionStatus.ACTIVE,\\n            \\\"Auction not active\\\"\\n        );\\n        require(\\n            block.timestamp >= auction.endTime,\\n            \\\"Auction not ended yet\\\"\\n        );\\n\\n        auction.status = AuctionStatus.ENDED;\\n        emit AuctionEnded(auctionId);\\n    }\\n\\n    /**\\n     * @dev Settle auction and transfer NFT to winner\\n     */\\n    function settleAuction(uint256 auctionId) external nonReentrant {\\n        Auction storage auction = auctions[auctionId];\\n        require(auction.status == AuctionStatus.ENDED, \\\"Auction not ready for settlement\\\");\\n        require(auction.status == AuctionStatus.REVEAL, \\\"Reveal phase not started\\\");\\n        require(block.timestamp > auction.endTime + 86400, \\\"Reveal phase not ended\\\");\\n\\n        address winner = auction.highestBidder;\\n        uint256 winningBid = auction.highestBid;\\n\\n        require(winner != address(0), \\\"No winner found\\\");\\n\\n        // Update state first to prevent reentrancy\\n        auction.status = AuctionStatus.SETTLED;\\n\\n        // Calculate fees\\n        (\\n            uint256 platformFee,\\n            uint256 royaltyFee,\\n            address royaltyRecipient\\n        ) = _calculateFees(auction.nftContract, auction.tokenId, winningBid);\\n\\n        uint256 sellerProceeds = winningBid - platformFee - royaltyFee;\\n\\n        // Transfer NFT to winner\\n        IERC721(auction.nftContract).transferFrom(\\n            address(this),\\n            winner,\\n            auction.tokenId\\n        );\\n\\n        // Transfer proceeds to seller\\n        (bool sellerSuccess, ) = payable(auction.seller).call{value: sellerProceeds}(\\\"\\\");\\n        require(sellerSuccess, \\\"Seller transfer failed\\\");\\n\\n        // Transfer royalty fee\\n        if (royaltyFee > 0 && royaltyRecipient != address(0)) {\\n            (bool royaltySuccess, ) = payable(royaltyRecipient).call{value: royaltyFee}(\\\"\\\");\\n            require(royaltySuccess, \\\"Royalty transfer failed\\\");\\n        }\\n\\n        // Refund losing bidders\\n        _refundLosingBidders(auctionId);\\n\\n        emit AuctionSettled(\\n            auctionId,\\n            winner,\\n            winningBid,\\n            platformFee,\\n            royaltyFee\\n        );\\n    }\\n\\n    /**\\n     * @dev Start reveal phase for sealed bid auctions\\n     */\\n    function startRevealPhase(\\n        uint256 auctionId\\n    ) external validAuction(auctionId) {\\n        Auction storage auction = auctions[auctionId];\\n        require(\\n            auction.auctionType == AuctionType.SEALED_BID,\\n            \\\"Not a sealed bid auction\\\"\\n        );\\n        require(auction.status == AuctionStatus.ACTIVE, \\\"Auction not active\\\");\\n        require(block.timestamp > auction.endTime, \\\"Auction still active\\\");\\n\\n        auction.status = AuctionStatus.REVEAL;\\n        // Reveal phase lasts 24 hours\\n        auction.endTime = block.timestamp + 24 hours;\\n    }\\n\\n    // ============= AUCTION MANAGEMENT =============\\n\\n    /**\\n     * @dev Cancel auction (seller or admin only)\\n     */\\n    function cancelAuction(\\n        uint256 auctionId,\\n        string memory reason\\n    ) external validAuction(auctionId) notSettled(auctionId) nonReentrant {\\n        Auction storage auction = auctions[auctionId];\\n\\n        require(\\n            msg.sender == auction.seller ||\\n                accessControl.hasRole(\\n                    accessControl.MASTER_ADMIN_ROLE(),\\n                    msg.sender\\n                ),\\n            \\\"Not authorized to cancel\\\"\\n        );\\n\\n        require(\\n            auction.status == AuctionStatus.PENDING ||\\n                auction.status == AuctionStatus.ACTIVE,\\n            \\\"Cannot cancel auction in current state\\\"\\n        );\\n\\n        _cancelAuctionAndRefund(auctionId, reason);\\n    }\\n\\n    /**\\n     * @dev Emergency cancel by admin\\n     */\\n    function emergencyCancel(\\n        uint256 auctionId,\\n        string memory reason\\n    ) external onlyAccessControlRole(accessControl.MASTER_ADMIN_ROLE()) {\\n        _cancelAuctionAndRefund(auctionId, reason);\\n    }\\n\\n    /**\\n     * @dev Extend auction duration (admin only, emergency situations)\\n     */\\n    function extendAuction(\\n        uint256 auctionId,\\n        uint256 additionalTime\\n    )\\n        external\\n        validAuction(auctionId)\\n        onlyAccessControlRole(accessControl.AUCTION_MANAGER_ROLE())\\n    {\\n        Auction storage auction = auctions[auctionId];\\n        require(auction.status == AuctionStatus.ACTIVE, \\\"Auction not active\\\");\\n        require(additionalTime <= 24 hours, \\\"Extension too long\\\");\\n\\n        auction.endTime += additionalTime;\\n    }\\n\\n    // ============= VIEW FUNCTIONS =============\\n\\n    /**\\n     * @dev Get auction details\\n     */\\n    function getAuction(\\n        uint256 auctionId\\n    ) external view validAuction(auctionId) returns (Auction memory) {\\n        return auctions[auctionId];\\n    }\\n\\n    /**\\n     * @dev Get auction bids\\n     */\\n    function getAuctionBids(\\n        uint256 auctionId\\n    ) external view validAuction(auctionId) returns (Bid[] memory) {\\n        return auctionBids[auctionId];\\n    }\\n\\n    /**\\n     * @dev Get current price for Dutch auction\\n     */\\n    function getDutchPrice(\\n        uint256 auctionId\\n    ) external view validAuction(auctionId) returns (uint256) {\\n        return _getDutchPrice(auctionId);\\n    }\\n\\n    /**\\n     * @dev Get user's auctions\\n     */\\n    function getUserAuctions(\\n        address user\\n    ) external view returns (uint256[] memory) {\\n        return userAuctions[user];\\n    }\\n\\n    /**\\n     * @dev Get user's bids\\n     */\\n    function getUserBids(\\n        address user\\n    ) external view returns (uint256[] memory) {\\n        return userBids[user];\\n    }\\n\\n    /**\\n     * @dev Get active auctions\\n     */\\n    function getActiveAuctions()\\n        external\\n        view\\n        returns (uint256[] memory activeAuctions)\\n    {\\n        // Count active auctions\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < _auctionIdCounter; i++) {\\n            if (\\n                auctions[i].status == AuctionStatus.ACTIVE &&\\n                block.timestamp <= auctions[i].endTime\\n            ) {\\n                count++;\\n            }\\n        }\\n\\n        // Fill array\\n        activeAuctions = new uint256[](count);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < _auctionIdCounter; i++) {\\n            if (\\n                auctions[i].status == AuctionStatus.ACTIVE &&\\n                block.timestamp <= auctions[i].endTime\\n            ) {\\n                activeAuctions[index++] = i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get auctions by type\\n     */\\n    function getAuctionsByType(\\n        AuctionType auctionType\\n    ) external view returns (uint256[] memory matchingAuctions) {\\n        // Count matching auctions\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < _auctionIdCounter; i++) {\\n            if (auctions[i].auctionType == auctionType) {\\n                count++;\\n            }\\n        }\\n\\n        // Fill array\\n        matchingAuctions = new uint256[](count);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < _auctionIdCounter; i++) {\\n            if (auctions[i].auctionType == auctionType) {\\n                matchingAuctions[index++] = i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get ending soon auctions (within next 24 hours)\\n     */\\n    function getEndingSoonAuctions()\\n        external\\n        view\\n        returns (uint256[] memory endingSoon)\\n    {\\n        uint256 count = 0;\\n        uint256 deadline = block.timestamp + 24 hours;\\n\\n        // Count ending soon auctions\\n        for (uint256 i = 0; i < _auctionIdCounter; i++) {\\n            if (\\n                auctions[i].status == AuctionStatus.ACTIVE &&\\n                auctions[i].endTime <= deadline &&\\n                auctions[i].endTime > block.timestamp\\n            ) {\\n                count++;\\n            }\\n        }\\n\\n        // Fill array\\n        endingSoon = new uint256[](count);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < _auctionIdCounter; i++) {\\n            if (\\n                auctions[i].status == AuctionStatus.ACTIVE &&\\n                auctions[i].endTime <= deadline &&\\n                auctions[i].endTime > block.timestamp\\n            ) {\\n                endingSoon[index++] = i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if user has bid on auction\\n     */\\n    function hasUserBid(\\n        uint256 auctionId,\\n        address user\\n    ) external view validAuction(auctionId) returns (bool) {\\n        return _hasUserBid(auctionId, user);\\n    }\\n\\n    /**\\n     * @dev Get total number of auctions\\n     */\\n    function totalAuctions() external view returns (uint256) {\\n        return _auctionIdCounter;\\n    }\\n\\n    // ============= INTERNAL FUNCTIONS =============\\n\\n    /**\\n     * @dev Validate auction parameters based on type\\n     */\\n    function _validateAuctionParameters(\\n        AuctionType auctionType,\\n        uint256 startingPrice,\\n        uint256 reservePrice,\\n        uint256 buyNowPrice\\n    ) internal pure {\\n        if (auctionType == AuctionType.RESERVE) {\\n            require(\\n                reservePrice >= startingPrice,\\n                \\\"Reserve price must be >= starting price\\\"\\n            );\\n        }\\n\\n        if (buyNowPrice > 0) {\\n            require(\\n                buyNowPrice > startingPrice,\\n                \\\"Buy now price must be > starting price\\\"\\n            );\\n            if (reservePrice > 0) {\\n                require(\\n                    buyNowPrice >= reservePrice,\\n                    \\\"Buy now price must be >= reserve price\\\"\\n                );\\n            }\\n        }\\n\\n        if (auctionType == AuctionType.DUTCH) {\\n            require(\\n                reservePrice > 0 && reservePrice < startingPrice,\\n                \\\"Dutch auction needs valid reserve < starting price\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Get current Dutch auction price\\n     */\\n    function _getDutchPrice(uint256 auctionId) internal view returns (uint256) {\\n        Auction storage auction = auctions[auctionId];\\n        require(\\n            auction.auctionType == AuctionType.DUTCH,\\n            \\\"Not a Dutch auction\\\"\\n        );\\n\\n        if (block.timestamp >= auction.endTime) {\\n            return auction.reservePrice;\\n        }\\n\\n        uint256 timeElapsed = block.timestamp - auction.startTime;\\n        uint256 totalDuration = auction.endTime - auction.startTime;\\n\\n        if (timeElapsed >= totalDuration) {\\n            return auction.reservePrice;\\n        }\\n\\n        uint256 priceDecrease = ((auction.startingPrice - auction.reservePrice) * timeElapsed) / totalDuration;\\n        return auction.startingPrice - priceDecrease;\\n    }\\n\\n    /**\\n     * @dev Execute buy now purchase\\n     */\\n    function _executeBuyNow(\\n        uint256 auctionId,\\n        address buyer,\\n        uint256 price\\n    ) internal {\\n        Auction storage auction = auctions[auctionId];\\n\\n        auction.highestBidder = buyer;\\n        auction.highestBid = price;\\n        auction.status = AuctionStatus.ENDED;\\n        auction.totalBidders = 1;\\n\\n        // Add to user bids if not already present\\n        if (!_hasUserBid(auctionId, buyer)) {\\n            userBids[buyer].push(auctionId);\\n        }\\n\\n        // Add bid to history\\n        auctionBids[auctionId].push(\\n            Bid({\\n                bidder: buyer,\\n                amount: price,\\n                timestamp: block.timestamp,\\n                isWinning: true,\\n                isRefunded: false\\n            })\\n        );\\n\\n        emit BidPlaced(auctionId, buyer, price, true);\\n    }\\n\\n    /**\\n     * @dev Cancel auction and refund all bidders\\n     */\\n    function _cancelAuctionAndRefund(\\n        uint256 auctionId,\\n        string memory reason\\n    ) internal {\\n        Auction storage auction = auctions[auctionId];\\n\\n        // Update state first to prevent reentrancy\\n        auction.status = AuctionStatus.CANCELLED;\\n\\n        // Return NFT to seller\\n        IERC721(auction.nftContract).transferFrom(\\n            address(this),\\n            auction.seller,\\n            auction.tokenId\\n        );\\n\\n        // Refund all bidders\\n        _refundAllBidders(auctionId);\\n\\n        emit AuctionCancelled(auctionId, reason);\\n    }\\n\\n    /**\\n     * @dev Refund a specific bid\\n     */\\n    function _refundBid(\\n        uint256 auctionId,\\n        address bidder,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            // Use call instead of transfer for better gas efficiency and to prevent reentrancy\\n            (bool success, ) = payable(bidder).call{value: amount}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n            emit BidRefunded(auctionId, bidder, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Refund all bidders except winner\\n     */\\n    function _refundLosingBidders(uint256 auctionId) internal {\\n        Bid[] storage bids = auctionBids[auctionId];\\n        address winner = auctions[auctionId].highestBidder;\\n\\n        for (uint256 i = 0; i < bids.length; i++) {\\n            if (bids[i].bidder != winner && !bids[i].isRefunded) {\\n                bids[i].isRefunded = true;\\n                _refundBid(auctionId, bids[i].bidder, bids[i].amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Refund all bidders (for cancelled auctions)\\n     */\\n    function _refundAllBidders(uint256 auctionId) internal {\\n        Bid[] storage bids = auctionBids[auctionId];\\n\\n        for (uint256 i = 0; i < bids.length; i++) {\\n            if (!bids[i].isRefunded) {\\n                bids[i].isRefunded = true;\\n                _refundBid(auctionId, bids[i].bidder, bids[i].amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if user has placed a bid on auction\\n     */\\n    function _hasUserBid(\\n        uint256 auctionId,\\n        address user\\n    ) internal view returns (bool) {\\n        uint256[] memory userBidsArray = userBids[user];\\n        for (uint256 i = 0; i < userBidsArray.length; i++) {\\n            if (userBidsArray[i] == auctionId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Calculate platform and royalty fees\\n     */\\n    function _calculateFees(\\n        address nftContract,\\n        uint256 tokenId,\\n        uint256 salePrice\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 platformFee,\\n            uint256 royaltyFee,\\n            address royaltyRecipient\\n        )\\n    {\\n        // Calculate platform fee\\n        platformFee = (salePrice * platformFeePercentage) / 10000;\\n\\n        // Calculate royalty fee if contract supports EIP-2981\\n        try IERC2981(nftContract).royaltyInfo(tokenId, salePrice) returns (\\n            address recipient,\\n            uint256 royaltyAmount\\n        ) {\\n            royaltyFee = royaltyAmount;\\n            royaltyRecipient = recipient;\\n        } catch {\\n            royaltyFee = 0;\\n            royaltyRecipient = address(0);\\n        }\\n\\n        // Ensure fees don't exceed sale price\\n        require(\\n            platformFee + royaltyFee <= salePrice,\\n            \\\"Fees exceed sale price\\\"\\n        );\\n    }\\n\\n    // ============= ADMIN FUNCTIONS =============\\n\\n    /**\\n     * @dev Update platform fee percentage\\n     */\\n    function updatePlatformFee(\\n        uint256 newFeePercentage\\n    ) external onlyAccessControlRole(accessControl.PRICE_MANAGER_ROLE()) {\\n        require(newFeePercentage <= 1000, \\\"Fee too high\\\"); // Max 10%\\n        platformFeePercentage = newFeePercentage;\\n    }\\n\\n    /**\\n     * @dev Update minimum bid increment\\n     */\\n    function updateMinimumBidIncrement(\\n        uint256 newIncrement\\n    ) external onlyAccessControlRole(accessControl.PRICE_MANAGER_ROLE()) {\\n        require(newIncrement <= 2000, \\\"Increment too high\\\"); // Max 20%\\n        minimumBidIncrement = newIncrement;\\n    }\\n\\n    /**\\n     * @dev Withdraw platform fees\\n     */\\n    function withdrawPlatformFees(\\n        address to,\\n        uint256 amount\\n    )\\n        external\\n        onlyAccessControlRole(accessControl.WITHDRAWER_ROLE())\\n        nonReentrant\\n    {\\n        require(to != address(0), \\\"Invalid recipient\\\");\\n        require(to != address(this), \\\"Cannot withdraw to self\\\");\\n        require(to.code.length == 0, \\\"Cannot withdraw to contract\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n        // Use call instead of transfer for better gas efficiency and to prevent reentrancy\\n        (bool success, ) = payable(to).call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    /**\\n     * @dev Emergency pause\\n     */\\n    function pause()\\n        external\\n        onlyAccessControlRole(accessControl.PAUSER_ROLE())\\n    {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause\\n     */\\n    function unpause()\\n        external\\n        onlyAccessControlRole(accessControl.MASTER_ADMIN_ROLE())\\n    {\\n        _unpause();\\n    }\\n\\n    // ============= STATISTICS FUNCTIONS =============\\n\\n    /**\\n     * @dev Get auction statistics\\n     */\\n    function getAuctionStats()\\n        external\\n        view\\n        returns (\\n            uint256 totalAuctionsCount,\\n            uint256 activeAuctionsCount,\\n            uint256 settledAuctionsCount,\\n            uint256 cancelledAuctionsCount,\\n            uint256 totalVolume\\n        )\\n    {\\n        totalAuctionsCount = _auctionIdCounter;\\n\\n        for (uint256 i = 0; i < _auctionIdCounter; i++) {\\n            AuctionStatus status = auctions[i].status;\\n\\n            if (status == AuctionStatus.ACTIVE) {\\n                activeAuctionsCount++;\\n            } else if (status == AuctionStatus.SETTLED) {\\n                settledAuctionsCount++;\\n                totalVolume += auctions[i].highestBid;\\n            } else if (status == AuctionStatus.CANCELLED) {\\n                cancelledAuctionsCount++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get auction type distribution\\n     */\\n    function getAuctionTypeDistribution()\\n        external\\n        view\\n        returns (\\n            uint256 englishCount,\\n            uint256 dutchCount,\\n            uint256 sealedBidCount,\\n            uint256 reserveCount\\n        )\\n    {\\n        for (uint256 i = 0; i < _auctionIdCounter; i++) {\\n            AuctionType auctionType = auctions[i].auctionType;\\n\\n            if (auctionType == AuctionType.ENGLISH) {\\n                englishCount++;\\n            } else if (auctionType == AuctionType.DUTCH) {\\n                dutchCount++;\\n            } else if (auctionType == AuctionType.SEALED_BID) {\\n                sealedBidCount++;\\n            } else if (auctionType == AuctionType.RESERVE) {\\n                reserveCount++;\\n            }\\n        }\\n    }\\n\\n    // ============= RECEIVE FUNCTION =============\\n\\n    /**\\n     * @dev Receive function to handle direct ETH transfers\\n     */\\n    receive() external payable {\\n        // Accept ETH for fee collection\\n    }\\n\\n    /**\\n     * @dev Fallback function\\n     */\\n    fallback() external payable {\\n        revert(\\\"Function not found\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6a780c5db00ae27dbbf18887ac473a4729e6c1a745157788e35fea21bd9084d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200010657601f620044b738819003918201601f19168301916001600160401b038311848410176200010b578084926020946040528339810103126200010657516001600160a01b038116908190036200010657600160005560fa6009556101f4600a558015620000c15760805260405161439590816200012282396080518181816108710152818161118e015281816112800152818161186101528181611ce901528181612f220152818161303d0152818161345301526134a20152f35b60405162461bcd60e51b815260206004820152601e60248201527f496e76616c69642061636365737320636f6e74726f6c206164647265737300006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe60e0806040526004361015610052575b5036156100505760405162461bcd60e51b8152602060048201526012602482015271119d5b98dd1a5bdb881b9bdd08199bdd5b9960721b6044820152606490fd5b005b600090813560e01c90816303700a5e146139545750806307d2681d146135a85780630b4ca1ce1461348257806313007d551461343d57806316002f4a1461341f57806316b5551d146133d35780631d0a99751461317a578063237f39521461300b5780632b3b0ced14612de05780632e993611146128ce5780632ecdee5b146127e4578063328fbcde146127c757806335e65cac14611f7557806336b4e26214611dff5780633f4ba83a14611cc75780633fb3517814611ca9578063571a26a014611b3e5780635c975abb14611b1b5780635f93de4914611aa457806364628253146118235780636759789f146117b05780637097529f1461179357806370b4768e1461165957806378bd7935146113885780638456cb591461125e5780638becf1381461116e57806396ec50c3146111265780639979ef4514610d89578063a6d7ec4714610aa2578063a8d93dea14610993578063aa0b598814610847578063b4fbe80a146107f1578063b9a2de3a14610716578063c2f50a7a146106f9578063c604c2a0146105fa578063ca96dd27146105bb578063cdd78cfc1461059d578063cf44b5d514610473578063d3a8c4ec1461043f578063de6cf04314610322578063ec89b5e014610304578063ff3ad0b41461027d5763ffd8a7840361000f573461027a57604036600319011261027a57604061024f613995565b916004358152600b602052209060018060a01b03166000526020526020604060002054604051908152f35b80fd5b503461027a57602080600319360112610300576001600160a01b036102a06139ab565b1682526007815260408220916040518092808554928381520194835280832092905b8282106102e9576102e5856102d981890382613a3a565b60405191829182613ae6565b0390f35b8354865294850194600193840193909101906102c2565b5080fd5b503461027a578060031936011261027a576020600a54604051908152f35b503461027a5760208060031936011261030057600435906004821015918261043b576002549284805b8581106103db575061035c90613f8d565b948093815b86811061037657604051806102e58a82613ae6565b808352600380835260408420015460a01c60ff16846103c75760048110156103c75790856103a892146103ad57613bb1565b610361565b806103c16103ba89613bb1565b988b613fbf565b52613bb1565b634e487b7160e01b84526021600452602484fd5b808752600380865260408820015460a01c60ff1683610427576004811015610427578414610412575b61040d90613bb1565b61034b565b9061041f61040d91613bb1565b919050610404565b634e487b7160e01b88526021600452602488fd5b8380fd5b503461027a57602036600319011261027a57602061046b6004356104666002548210613e26565b613fd3565b604051908152f35b503461027a578060031936011261027a5760025481805b82811061051f575061049b90613f8d565b9082835b8281106104b457604051806102e58682613ae6565b808552600360209080825260ff600d604089200154166006811015610427579060016104ef949392149182610508575b50506104f457613bb1565b61049f565b806103c161050185613bb1565b9487613fbf565b8389525250604086206009015442111538806104e4565b808452600360209080825260ff600d604088200154166006811015610589576001149182610572575b505061055d575b61055890613bb1565b61048a565b9061056a61055891613bb1565b91905061054f565b838752525060408420600901544211153880610548565b634e487b7160e01b87526021600452602487fd5b503461027a578060031936011261027a576020600954604051908152f35b503461027a57604036600319011261027a5760206105f06004356105dd613995565b906105eb6002548210613e26565b6142c5565b6040519015158152f35b503461027a578060031936011261027a5780818283918460028054905b81831061063c5750505060809450604051938452602084015260408301526060820152f35b90919586885260038060205260ff8160408b20015460a01c1660048110156106e5578061067f57505061067161067891613bb1565b965b613bb1565b9190610617565b919794916001810361069f57505061069961067891613bb1565b93613bb1565b949591948084036106be5750506106b861067891613bb1565b94613bb1565b959195146106d0575b61067890613bb1565b946106dd61067891613bb1565b9590506106c7565b634e487b7160e01b8a52602160045260248afd5b503461027a578060031936011261027a576020604051610e108152f35b503461027a57602036600319011261027a576004356107386002548210613e26565b808252600360205260408220600d81019081549060ff821660068110156107dd5790610768600160099314613cb8565b015442106107a05760ff191660031790557f45806e512b1f4f10e33e8b3cb64d1d11d998d8c554a95e0841fc1c701278bd5d8280a280f35b60405162461bcd60e51b8152602060048201526015602482015274105d58dd1a5bdb881b9bdd08195b991959081e595d605a1b6044820152606490fd5b634e487b7160e01b86526021600452602486fd5b503461027a57604036600319011261027a5761080b6139ab565b6001600160a01b031681526007602052604081208054602435929083101561027a5760206108398484613b6d565b90546040519160031b1c8152f35b503461027a57602080600319360112610300576040516331aab75960e01b815260048035929184917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908490839081845afa918215610988578392610951575b50803b156109425760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa80156109465761092e575b50506103e882116108fb575060095580f35b6064906040519062461bcd60e51b82526004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b6044820152fd5b610937906139d7565b6109425782386108e9565b8280fd5b6040513d84823e3d90fd5b925090508282813d8111610981575b61096a8183613a3a565b8101031261097c5784915190386108b0565b600080fd5b503d610960565b6040513d85823e3d90fd5b503461027a57602036600319011261027a576004356109b56002548210613e26565b815260036020526040812060ff600382015460a01c166004811015610a8e5760026109e09114613ef9565b600d810180549160ff83166006811015610a7a5790610a03600160099314613cb8565b01918254421115610a3e5760029060ff191617905562015180420190814211610a2a575580f35b634e487b7160e01b83526011600452602483fd5b60405162461bcd60e51b815260206004820152601460248201527341756374696f6e207374696c6c2061637469766560601b6044820152606490fd5b634e487b7160e01b85526021600452602485fd5b634e487b7160e01b83526021600452602483fd5b50604036600319011261027a57600435602490813591610ac56002548310613e26565b8184526020906003825260ff600d604087200154166006811015610d76576001610aef9114613cb8565b82855260038252610b096009604087200154421115613cf9565b82855260038252610b2460ff60106040882001541615613e6b565b828552600b82526040852033600052825260406000205461012c8101809111610d6357610b5390421015613d35565b610b5b613c55565b8285526003825260408520600381015460ff8160a01c166004811015610d505790610b8b6002610b9c9314613ef9565b6001600160a01b0316331415613c78565b60048101543410610d18578386526005835260408620336000528352604060002054610cdc57600f01906103e882541015610ca65750907fa000acd2dce8dd1590ff43e13f10d27c2b8cf42ee254ce90b9dac98e045dabe891838652600b82526040862033600052825242604060002055838652600582526040862033600052825284604060002055610c2f33856142c5565b15610c80575b5082855260048152610c706040862060405190610c5182613a01565b3382523484830152426040830152876060830152876080830152613d70565b6040519384523393a36001815580f35b610c8a8154613bb1565b905533855260088152610ca08360408720613c02565b38610c35565b8260106064926040519262461bcd60e51b845260048401528201526f546f6f206d616e79206269646465727360801b6044820152fd5b60405162461bcd60e51b81526004810184905260158184015274109a5908185b1c9958591e481cdd589b5a5d1d1959605a1b6044820152606490fd5b60405162461bcd60e51b815260048101849052601181840152704269642062656c6f77206d696e696d756d60781b6044820152606490fd5b634e487b7160e01b885260216004528388fd5b50634e487b7160e01b8552601160045284fd5b50634e487b7160e01b8552602160045284fd5b506020806003193601126103005760043590610da3613c55565b81835260039081815260408420928284015460ff8160a01c1660048110156105895784811591821561111c575b5050156110c6576001600160a01b0390610dee908216331415613c78565b60ff600d8601541693600685101561058957610e0d6001809614613cb8565b610e1c60098701544210613cf9565b341561107757600c860190815491610e38600a89015484613bd6565b831561106c575b341061103957848952600b86526040892033600052865260406000205461012c810180911161102557610e7490421015613d35565b600b880180549485169433906001600160601b0360a01b16179055349055600f8701610ea08154613bb1565b9055838852600b8552604088203360005285524260406000205583885260048552610ef46040892060405190610ed582613a01565b33825234888301524260408301528860608301528a6080830152613d70565b87865b610fcd575b50509460059183949596610f1033866142c5565b15610fb4575b81610fa3575b505001548381151580610f99575b610f68575b50505082604051923484528301527f8f06251a01f1c60f43d914574d31d4eb5be776df9d23e7f94e7c07c578b9753d60403393a3815580f35b7f5e34871d0d7fec5df3c8e28a9377067d94fd983f6539a6d8bddfa48119558d2e91604051908152a2803883610f2f565b5081341015610f2a565b610fad918561426e565b3880610f1c565b33895260088752610fc88560408b20613c02565b610f16565b848952600486526040892054600019810190811161102557899082101561101f5781836110098a95946040858b611018975260048d5220613b3b565b5001805460ff19169055613bb1565b9091610ef7565b50610efc565b634e487b7160e01b8a52601160045260248afd5b60405162461bcd60e51b815260048101879052600b60248201526a42696420746f6f206c6f7760a81b6044820152606490fd5b506004880154610e3f565b60405162461bcd60e51b815260048101859052602160248201527f42696420616d6f756e74206d7573742062652067726561746572207468616e206044820152600360fc1b6064820152608490fd5b60405162461bcd60e51b815260048101849052602860248201527f496e76616c69642061756374696f6e207479706520666f72207468697320626960448201526719081b595d1a1bd960c21b6064820152608490fd5b1490508438610dd0565b503461027a57604036600319011261027a576111406139ab565b6001600160a01b031681526008602052604081208054602435929083101561027a5760206108398484613b6d565b503461027a5761117d36613a78565b6040516367ef9e2760e11b815283907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa918215610988578392611228575b50803b156109425760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561094657611214575b505061121191614089565b80f35b61121d906139d7565b610942578238611206565b925090506020823d8211611256575b8161124460209383613a3a565b8101031261097c5784915190386111cd565b3d9150611237565b503461027a578060031936011261027a5760405163e63ab1e960e01b815281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa918215610988578392611352575b50803b1561134e5760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa80156109465761133a575b50611301613c37565b600160ff19815416176001557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b611343906139d7565b61027a5780386112f8565b5050fd5b925090506020823d8211611380575b8161136e60209383613a3a565b8101031261097c5782915190386112bf565b3d9150611361565b503461027a57602036600319011261027a578060409161024083516113ac81613a1d565b82815282602082015282858201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201528261016082015282610180820152826101a0820152826101c0820152826101e08201528261020082015282610220820152015261142f60025460043510613e26565b600435815260036020522060405161144681613a1d565b8154815260018201546001600160a01b03908116602083015260028301546040830152600383015490811660608301526114899060a01c60ff1660808301613bf6565b600482015460a0820152600582015460c082015260068083015460e0830152600783015461010083015260088301546101208301526009830154610140830152600a830154610160830152600b8301546001600160a01b0316610180830152600c8301546101a0830152600d830154929060ff8416101561164357601060ff9182858161026097166101c087015260081c1615156101e0850152600e810154610200850152600f8101546102208501520154161515610240820152610240604051918051835260018060a01b0360208201511660208401526040810151604084015260018060a01b03606082015116606084015261158f60808201516080850190613b21565b60a081015160a084015260c081015160c084015260e081015160e084015261010081015161010084015261012081015161012084015261014081015161014084015261016081015161016084015260018060a01b03610180820151166101808401526101a08101516101a08401526116116101c08201516101c0850190613b2e565b6101e081015115156101e084015261020081015161020084015261022081015161022084015201511515610240820152f35b634e487b7160e01b600052602160045260246000fd5b503461027a576020908160031936011261027a579060043560029061168082548210613e26565b8352600482526040832090815461169681613f75565b916116a46040519384613a3a565b81835284830190819487528587209087925b8484106117305750505050506040519280840191818552518092526040840192945b8281106116e55784840385f35b855180516001600160a01b031685528083015185840152604080820151908601526060808201511515908601526080908101511515908501529481019460a0909301926001016116d8565b60048860019260409b9a98999b5161174781613a01565b848060a01b0387541681528487015483820152858701546040820152600387015460ff908181161515606084015260081c161515608082015281520193019301929197959496976116b6565b503461027a578060031936011261027a57602060405161012c8152f35b503461027a57602080600319360112610300576001600160a01b036117d36139ab565b1682526008815260408220916040518092808554928381520194835280832092905b82821061180c576102e5856102d981890382613a3a565b8354865294850194600193840193909101906117f5565b503461027a57604036600319011261027a5761183d6139ab565b6040516385f438c160e01b8152602480359291602091906001600160a01b039086907f000000000000000000000000000000000000000000000000000000000000000083168582600481845afa918215610988578392611a72575b50803b156109425760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561094657611a5a575b50506118db613c55565b8316928315611a22573084146119de573b61199b5783156119585747841161191e57846119178180808089895af1611911613f45565b50614230565b6001815580f35b9060146064926040519262461bcd60e51b8452600484015282015273496e73756666696369656e742062616c616e636560601b6044820152fd5b90601d6064926040519262461bcd60e51b845260048401528201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152fd5b90601b6064926040519262461bcd60e51b845260048401528201527f43616e6e6f7420776974686472617720746f20636f6e747261637400000000006044820152fd5b60405162461bcd60e51b8152600481018490526017818401527f43616e6e6f7420776974686472617720746f2073656c660000000000000000006044820152606490fd5b60405162461bcd60e51b81526004810184905260118184015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606490fd5b611a63906139d7565b611a6e5785386118d1565b8580fd5b925090508482813d8111611a9d575b611a8b8183613a3a565b8101031261097c578791519038611898565b503d611a81565b503461027a57611ab3366139c1565b9190815260046020526040812090815483101561027a5760a0611ad68484613b3b565b5060ff600180841b03825416916001810154906003600282015491015491604051948552602085015260408401528181161515606084015260081c1615156080820152f35b503461027a578060031936011261027a57602060ff600154166040519015158152f35b503461027a57602036600319011261027a57600435815260036020526040902080808054600160a01b6001900360018301541660c05260028201546003830154600484015460058501546006860154600787015490600888015492600989015494600a8a015496600160a01b60019003600b8c01541698600c8c01549a600d8d01549c600e01549d600f01549e6010015460ff1660805260405160a05260a0515260c05160a0516020015260a05160400152600160a01b60019003811660a0516060015260a0516080019060a01c60ff1690611c1991613b21565b60a05160a0015260a05160c0015260a05160e0015260a051610100015260a051610120015260a051610140015260a051610160015260a051610180015260a0516101a0015260a0516101c00160ff821690611c7391613b2e565b60081c60ff16151560a0516101e0015260a051610200015260a0516102200152608051151560a051610240015260a05161026090f35b503461027a578060031936011261027a57602060405162278d008152f35b503461027a578060031936011261027a576040516367ef9e2760e11b815281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa918215610988578392611dc9575b50803b1561134e5760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561094657611db5575b505060015460ff811615611da35760ff19166001557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b604051638dfc202b60e01b8152600490fd5b611dbe906139d7565b61027a578038611d61565b925090506020823d8211611df7575b81611de560209383613a3a565b8101031261097c578291519038611d28565b3d9150611dd8565b503461027a578060031936011261027a578062015180420190814211610a2a5760025490835b828110611eed5750611e3690613f8d565b918390845b838110611e5057604051806102e58782613ae6565b808652600360209080825260ff600d60408a200154166006811015611ed957906001611e91949392149182611ec0575b82611eaa575b5050611e9657613bb1565b611e3b565b806103c1611ea386613bb1565b9588613fbf565b838a525250604087206009015442103880611e86565b915082895280825284600960408b200154111591611e80565b634e487b7160e01b89526021600452602489fd5b808552600360209080825260ff600d604089200154166006811015610427576001149182611f5c575b82611f46575b5050611f31575b611f2c90613bb1565b611e25565b90611f3e611f2c91613bb1565b919050611f23565b8388525250604085206009015442103880611f1c565b9150828752808252856009604089200154111591611f16565b503461027a5761010036600319011261027a57611f906139ab565b6004604435101561030057611fa3613c55565b611fab613c37565b60e435906001600160a01b0381161561278b576064351561273857610e1060c435101580612729575b156126f1576040516331a9108f60e11b81526024803560048301526020908290816001600160a01b0386165afa9081156123b15784916126b7575b50336001600160a01b03909116036126825760405163e985e9c560e01b81523360048201523060248201526020816044816001600160a01b0386165afa9081156123b1578491612653575b5080156125d1575b1561259957600360443514612538575b60a435612470575b6001604435146123f4575b6002549161209283613bb1565b6002556120a160c43542613bd6565b60e435156123cb575b60ff906044356001036123c457606435925b6044356002036123bc576002915b604051946120d786613a1d565b8786526001600160a01b0387166020870152602435604087015233606087015261210660443560808801613bf6565b60643560a087015260843560c087015260a43560e08701526101008601524261012086015261014085015261016084015285610180840152856101a084015260016101c0840152856101e0840152166102008201528361022082015283610240820152828452600360205260408420908051825560018060a01b036020820151166001600160601b0360a01b6001840154161760018301556040810151600283015560018060a01b03606082015116600383015490608083015160048110156104275760ff60a01b9060a01b16916affffffffffffffffffffff60a81b161717600383015560a0810151600483015560c0810151600583015560e08101516006830155610100810151600783015561012081015160088301556101408101516009830155610160810151600a830155600b820160018060a01b03610180830151166001600160601b0360a01b8254161790556101a0810151600c830155600d82016101c082015160068110156105895781546101e084015161ff0090151560081b1660ff9290921661ffff19909116171790556122d2919060109061024090610200810151600e850155610220810151600f8501550151151591019060ff801983541691151516179055565b33835260076020526122e78260408520613c02565b6001600160a01b0381163b15610942576040516323b872dd60e01b8152336004820152306024808301919091523560448201528381606481836001600160a01b0387165af180156123b15761239d575b50602092600191604051906024358252612355868301604435613b21565b606435604083015260c4356060830152838060a01b031690847f5c2d0edaf61e67e74604ea483df48ee4e415c7022f58881f276a833502e5b94f60803393a455604051908152f35b6123a784916139d7565b6109425738612337565b6040513d86823e3d90fd5b6001916120ca565b85926120bc565b90506127106123de600a54606435613be3565b0490816120aa5766038d7ea4c6800091506120aa565b608435151580612463575b6120855760405162461bcd60e51b815260206004820152603260248201527f44757463682061756374696f6e206e656564732076616c69642072657365727660448201527165203c207374617274696e6720707269636560701b6064820152608490fd5b50606435608435106123ff565b60643560a43511156124e4576084351561207a5760843560a435101561207a5760405162461bcd60e51b815260206004820152602660248201527f427579206e6f77207072696365206d757374206265203e3d207265736572766560448201526520707269636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602660248201527f427579206e6f77207072696365206d757374206265203e207374617274696e6760448201526520707269636560d01b6064820152608490fd5b60643560843510156120725760405162461bcd60e51b815260206004820152602760248201527f52657365727665207072696365206d757374206265203e3d207374617274696e6044820152666720707269636560c81b6064820152608490fd5b60405162461bcd60e51b815260206004820152601060248201526f139195081b9bdd08185c1c1c9bdd995960821b6044820152606490fd5b5060405163020604bf60e21b81526024803560048301526020908290816001600160a01b0386165afa9081156123b1578491612619575b506001600160a01b03163014612062565b90506020813d60201161264b575b8161263460209383613a3a565b8101031261043b5761264590613b85565b38612608565b3d9150612627565b612675915060203d60201161267b575b61266d8183613a3a565b810190613b99565b3861205a565b503d612663565b60405162461bcd60e51b815260206004820152600d60248201526c2737ba1027232a1037bbb732b960991b6044820152606490fd5b90506020813d6020116126e9575b816126d260209383613a3a565b8101031261043b576126e390613b85565b3861200f565b3d91506126c5565b60405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b210323ab930ba34b7b760811b6044820152606490fd5b5062278d0060c4351115611fd4565b60405162461bcd60e51b815260206004820152602560248201527f5374617274696e67207072696365206d75737420626520677265617465722074604482015264068616e20360dc1b6064820152608490fd5b60405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081391950818dbdb9d1c9858dd60621b6044820152606490fd5b503461027a578060031936011261027a5760206040516103e88152f35b503461027a578060031936011261027a5760025481808080805b858110612826575060a095506040519485526020850152604084015260608301526080820152f35b90818752600360209080825260ff600d60408b2001541660068110156106e557600181036128685750505061285d61286391613bb1565b91613bb1565b6127fe565b6004819894959896929396146000146128a05750916106b89161288d61286394613bb1565b95888b5252600c60408a20015490613bd6565b90945060059150959195146128b9575b61286390613bb1565b926128c661286391613bb1565b9390506128b0565b503461027a57602036600319011261027a576128e8613c55565b6004358152600360205260408120600d810180549060ff82166006811015610a7a5760038103612d9c57600203612d57576009830154620151808101809111612d4357421115612d055760018060a01b03600b8401541690600c840154928215612cce5760ff19166004179055600183015460028401546009549092916001600160a01b0316906127109061297d9086613be3565b049460405163152a902d60e11b8152846004820152856024820152604081604481865afa8089928a92612c88575b50612c80575050869387925b866129c2878a613bd6565b11612c425788926129dc876129d78b8b613e19565b613e19565b91803b15612c3e576040516323b872dd60e01b81523060048201526001600160a01b0388166024820152604481019490945284908490606490829084905af19283156123b1578493612c26575b5060030154829182916001600160a01b03165af1612a45613f45565b5015612be85785908380151580612bd6575b612b6a575b505050600435855260046020526040852092600360205260018060a01b03600b6040882001541692865b8554811015612b26578085612a9e612aba9389613b3b565b50546001600160a01b0316141580612b0a575b612abf57613bb1565b612a86565b6003612acb8289613b3b565b5001805461ff001916610100179055610673612ae78289613b3b565b50546001600160a01b03166001612afe848b613b3b565b5001549060043561426e565b5060ff6003612b19838a613b3b565b50015460081c1615612ab1565b5086935085604051928352602083015260408201527f505c7c7cd3a58c7bd261c378954ce91c744bdde91a6e1a6f5cb8799f2e9a1d68606060043592a36001815580f35b8291829182916001600160a01b03165af1612b83613f45565b5015612b9157843883612a5c565b60405162461bcd60e51b815260206004820152601760248201527f526f79616c7479207472616e73666572206661696c65640000000000000000006044820152606490fd5b506001600160a01b0382161515612a57565b60405162461bcd60e51b815260206004820152601660248201527514d95b1b195c881d1c985b9cd9995c8819985a5b195960521b6044820152606490fd5b612c32909391936139d7565b61094257829138612a29565b8480fd5b60405162461bcd60e51b815260206004820152601660248201527546656573206578636565642073616c6520707269636560501b6044820152606490fd5b9490926129b7565b925090506040823d604011612cc6575b81612ca560409383613a3a565b81010312612cc2576020612cb883613b85565b92015190386129ab565b8880fd5b3d9150612c98565b60405162461bcd60e51b815260206004820152600f60248201526e139bc81dda5b9b995c88199bdd5b99608a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527514995d99585b081c1a185cd9481b9bdd08195b99195960521b6044820152606490fd5b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b815260206004820152601860248201527f52657665616c207068617365206e6f74207374617274656400000000000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f41756374696f6e206e6f7420726561647920666f7220736574746c656d656e746044820152fd5b503461027a57612def36613a78565b612dff6002939293548410613e26565b82825260209260038452612e1d60ff60106040862001541615613e6b565b612e25613c55565b80835260038085526040842090810154336001600160a01b0391821614908115612f1e575b5015612ed957600d015460ff1660068110156103c7578015908115612ece575b5015612e7a579061191791614089565b60405162461bcd60e51b815260048101859052602660248201527f43616e6e6f742063616e63656c2061756374696f6e20696e2063757272656e7460448201526520737461746560d01b6064820152608490fd5b600191501438612e6a565b60405162461bcd60e51b815260048101869052601860248201527f4e6f7420617574686f72697a656420746f2063616e63656c00000000000000006044820152606490fd5b90507f0000000000000000000000000000000000000000000000000000000000000000166040516367ef9e2760e11b81528681600481855afa908115613000579087918791612fcf575b50604051632474521560e21b815260048101919091523360248201529182908180604481015b03915afa908115612fc4578591612fa7575b5038612e4a565b612fbe9150863d881161267b5761266d8183613a3a565b38612fa0565b6040513d87823e3d90fd5b82819392503d8311612ff9575b612fe68183613a3a565b8101031261097c57518690612f8e612f68565b503d612fdc565b6040513d88823e3d90fd5b503461027a5761301a366139c1565b906130286002548210613e26565b604051633eb0a94360e11b81526020919084907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168482600481845afa918215610988578392613148575b50803b156109425760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561094657613134575b505260038152604083209060ff600d830154166006811015610a7a5760016130dc9114613cb8565b6201518083116130fb575060096130f69101918254613bd6565b905580f35b6064906040519062461bcd60e51b825260048201526012602482015271457874656e73696f6e20746f6f206c6f6e6760701b6044820152fd5b61313d906139d7565b61043b5783386130b4565b925090508382813d8111613173575b6131618183613a3a565b8101031261097c57859151903861307b565b503d613157565b5060208060031936011261030057600435906131996002548310613e26565b81835260039081815260ff600d60408620015416926006841015610a7a576131c46001809514613cb8565b8085528282526131dd6009604087200154421115613cf9565b8085528282526131f760ff60106040882001541615613e6b565b6131ff613c55565b8085528282528260408620015460ff8160a01c16600481101561058957856132279114613eb7565b6001600160a01b0316331461339a5761323f81613fd3565b9283341061335e579084600f879594938387528085526040872090600b8201336001600160601b0360a01b82541617905586600c830155600d82019060ff19825416179055015561329033826142c5565b15613345575b808452600482526132d060408520604051906132b182613a01565b3382528585830152426040830152876060830152866080830152613d70565b84604051928484528301527f8f06251a01f1c60f43d914574d31d4eb5be776df9d23e7f94e7c07c578b9753d60403393a380341161330d57505580f35b818061331a819334613e19565b81811561333c575b3390f11561332f57815580f35b50604051903d90823e3d90fd5b506108fc613322565b338452600882526133598160408620613c02565b613296565b60405162461bcd60e51b8152600481018490526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606490fd5b60405162461bcd60e51b815260048101839052601160248201527053656c6c65722063616e6e6f742062757960781b6044820152606490fd5b503461027a57604036600319011261027a5760406133ef613995565b9160043581526006602052209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b503461027a578060031936011261027a576020600254604051908152f35b503461027a578060031936011261027a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461027a57602080600319360112610300576004359060018060a01b037f000000000000000000000000000000000000000000000000000000000000000016836040516331aab75960e01b81528381600481865afa90811561094657829161357b575b50823b156103005760405163101a2a3160e31b8152600481019190915233602482015291829060449082905afa80156123b157613568575b506107d0821161352f5750600a5580f35b6064906040519062461bcd60e51b825260048201526012602482015271092dcc6e4cadacadce840e8dede40d0d2ced60731b6044820152fd5b613574909391936139d7565b913861351e565b90508381813d83116135a1575b6135928183613a3a565b810103126103005751386134e6565b503d613588565b503461027a57606036600319011261027a5760043560249081356044916135d26002548210613e26565b8085526020600381526135ef60ff60106040892001541615613e6b565b6135f7613c55565b818652600381526040862060ff600382015460a01c1660048110156139415760026136229114613ef9565b60ff600d82015416600681101561394157600203613908578287526006825260408720338852825260ff6040882054166138d2578287526005825260408720338852825260408720541561388f5760405182810190858252863560408201523360601b606082015260548152608081019181831067ffffffffffffffff84111761387c578260405281519020858a526005855260408a20338b52855260408a20540361384657505082875260068252604087203388528252604087209460019687968760ff198254161790558689905b61375c575b5050508394509283600c7fe114ea9e9a27652a7d68437b8464a4c003a7697f8123821f48a4b83718c05bc69495019081548311613740575b5050506040519384523393a3815580f35b600b0180546001600160a01b031916331790555583388061372f565b858a526004855260408a208054821015613840578161377a91613b3b565b50546001600160a01b0316331461379a5761379490613bb1565b876136f2565b9293948096975089526004855286886137b68560408d20613b3b565b500154106138085750507fe114ea9e9a27652a7d68437b8464a4c003a7697f8123821f48a4b83718c05bc6929185876137fa8294888c526004875260408c20613b3b565b5001559093928695386136f7565b72496e73756666696369656e7420657363726f7760681b606492601387936040519462461bcd60e51b86526004860152840152820152fd5b506136f7565b9071125b9d985b1a5908189a59081c995d99585b60721b60c46064938662461bcd60e51b85526084820152601260a48201520152fd5b634e487b7160e01b8a526041600452888afd5b60405162461bcd60e51b8152600481018390526017818801527f4e6f207365616c656420626964207375626d697474656400000000000000000081870152606490fd5b60405162461bcd60e51b8152600481018390526010818801526f105b1c9958591e481c995d99585b195960821b81870152606490fd5b60405162461bcd60e51b815260048101839052601381880152724e6f7420696e2072657665616c20706861736560681b81870152606490fd5b634e487b7160e01b885260216004528688fd5b905034610300576040366003190112610300576040602092613974613995565b6004358252600585528282206001600160a01b039091168252845220548152f35b602435906001600160a01b038216820361097c57565b600435906001600160a01b038216820361097c57565b604090600319011261097c576004359060243590565b67ffffffffffffffff81116139eb57604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff8211176139eb57604052565b610260810190811067ffffffffffffffff8211176139eb57604052565b90601f8019910116810190811067ffffffffffffffff8211176139eb57604052565b67ffffffffffffffff81116139eb57601f01601f191660200190565b90604060031983011261097c576004359160243567ffffffffffffffff811161097c578160238201121561097c57806004013590613ab582613a5c565b92613ac36040519485613a3a565b8284526024838301011161097c5781600092602460209301838601378301015290565b6020908160408183019282815285518094520193019160005b828110613b0d575050505090565b835185529381019392810192600101613aff565b9060048210156116435752565b9060068210156116435752565b8054821015613b575760005260206000209060021b0190600090565b634e487b7160e01b600052603260045260246000fd5b8054821015613b575760005260206000200190600090565b51906001600160a01b038216820361097c57565b9081602091031261097c5751801515810361097c5790565b6000198114613bc05760010190565b634e487b7160e01b600052601160045260246000fd5b91908201809211613bc057565b81810292918115918404141715613bc057565b60048210156116435752565b8054600160401b8110156139eb57613c1f91600182018155613b6d565b819291549060031b91821b91600019901b1916179055565b60ff60015416613c4357565b60405163d93c066560e01b8152600490fd5b600260005414613c66576002600055565b604051633ee5aeb560e01b8152600490fd5b15613c7f57565b60405162461bcd60e51b815260206004820152601160248201527014d95b1b195c8818d85b9b9bdd08189a59607a1b6044820152606490fd5b15613cbf57565b60405162461bcd60e51b815260206004820152601260248201527141756374696f6e206e6f742061637469766560701b6044820152606490fd5b15613d0057565b60405162461bcd60e51b815260206004820152600d60248201526c105d58dd1a5bdb88195b991959609a1b6044820152606490fd5b15613d3c57565b60405162461bcd60e51b815260206004820152600c60248201526b2134b2103a37b79039b7b7b760a11b6044820152606490fd5b8054600160401b8110156139eb57613d8d91600182018155613b3b565b919091613e035760806003613e019360018060a01b038451166001600160601b0360a01b82541617815560208401516001820155604084015160028201550191613de960608201511515849060ff801983541691151516179055565b0151815461ff00191690151560081b61ff0016179055565b565b634e487b7160e01b600052600060045260246000fd5b91908203918211613bc057565b15613e2d57565b60405162461bcd60e51b8152602060048201526016602482015275105d58dd1a5bdb88191bd95cc81b9bdd08195e1a5cdd60521b6044820152606490fd5b15613e7257565b60405162461bcd60e51b815260206004820152601760248201527f41756374696f6e20616c726561647920736574746c65640000000000000000006044820152606490fd5b15613ebe57565b60405162461bcd60e51b81526020600482015260136024820152722737ba103090223aba31b41030bab1ba34b7b760691b6044820152606490fd5b15613f0057565b60405162461bcd60e51b815260206004820152601860248201527f4e6f742061207365616c6564206269642061756374696f6e00000000000000006044820152606490fd5b3d15613f70573d90613f5682613a5c565b91613f646040519384613a3a565b82523d6000602084013e565b606090565b67ffffffffffffffff81116139eb5760051b60200190565b90613f9782613f75565b613fa46040519182613a3a565b8281528092613fb5601f1991613f75565b0190602036910137565b8051821015613b575760209160051b010190565b90600091825260036020526040822060ff600382015460a01c1660048110156103c75760016140029114613eb7565b6009810154804210156140805761402760088301546140218142613e19565b92613e19565b90818110156140765761404c906140476005600486015495015485613e19565b613be3565b81156140625761405f9394500490613e19565b90565b634e487b7160e01b85526012600452602485fd5b5050600501549150565b50600501549150565b9060009082825260039060209282845260409283822090600d8201600560ff1982541617905560018060a01b0390600192828482015416600284848401541692015491813b1561422c5788516323b872dd60e01b81523060048201526001600160a01b03919091166024820152604481019290925285908290606490829084905af180156142225761420f575b5087845260048752828685209185915b614198575b50505050508251938085528251928382870152825b8481106141855750505092817f847bb320e1da018de1bcb9cc28092da9d5d4fcbcc735f003ad1d9c1d4c3684e5948483959484010152601f80199101168101030190a2565b8181018301518782018701528201614140565b825482101561420a576141c48260ff836141b3899688613b3b565b50015460081c16156141ca57613bb1565b91614126565b826141d58287613b3b565b5001805461ff0019166101001790556106738c876141f38489613b3b565b50541686614201858a613b3b565b5001549161426e565b61412b565b61421b909491946139d7565b9238614116565b87513d87823e3d90fd5b8680fd5b1561423757565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b908261427957505050565b6001600160a01b0316917fa59312996dc68b7f0224b341fed75d5afeb3bb20624107d37942d14f59428156906020906142bc6000808080858a5af1611911613f45565b604051908152a3565b60009160018060a01b0316825260206008815260408320906040518092839183825491828152019187528387209387905b8282106143455750505061430c92500382613a3a565b825b815181101561433f57826143228284613fbf565b51146143365761433190613bb1565b61430e565b50505050600190565b50505090565b8554845260019586019587955093810193909101906142f656fea2646970667358221220ecd5f0d70344098ba5e9396d04fcc392270cbcaf1105521dfb1e3631ecf3094c64736f6c63430008150033",
  "deployedBytecode": "0x60e0806040526004361015610052575b5036156100505760405162461bcd60e51b8152602060048201526012602482015271119d5b98dd1a5bdb881b9bdd08199bdd5b9960721b6044820152606490fd5b005b600090813560e01c90816303700a5e146139545750806307d2681d146135a85780630b4ca1ce1461348257806313007d551461343d57806316002f4a1461341f57806316b5551d146133d35780631d0a99751461317a578063237f39521461300b5780632b3b0ced14612de05780632e993611146128ce5780632ecdee5b146127e4578063328fbcde146127c757806335e65cac14611f7557806336b4e26214611dff5780633f4ba83a14611cc75780633fb3517814611ca9578063571a26a014611b3e5780635c975abb14611b1b5780635f93de4914611aa457806364628253146118235780636759789f146117b05780637097529f1461179357806370b4768e1461165957806378bd7935146113885780638456cb591461125e5780638becf1381461116e57806396ec50c3146111265780639979ef4514610d89578063a6d7ec4714610aa2578063a8d93dea14610993578063aa0b598814610847578063b4fbe80a146107f1578063b9a2de3a14610716578063c2f50a7a146106f9578063c604c2a0146105fa578063ca96dd27146105bb578063cdd78cfc1461059d578063cf44b5d514610473578063d3a8c4ec1461043f578063de6cf04314610322578063ec89b5e014610304578063ff3ad0b41461027d5763ffd8a7840361000f573461027a57604036600319011261027a57604061024f613995565b916004358152600b602052209060018060a01b03166000526020526020604060002054604051908152f35b80fd5b503461027a57602080600319360112610300576001600160a01b036102a06139ab565b1682526007815260408220916040518092808554928381520194835280832092905b8282106102e9576102e5856102d981890382613a3a565b60405191829182613ae6565b0390f35b8354865294850194600193840193909101906102c2565b5080fd5b503461027a578060031936011261027a576020600a54604051908152f35b503461027a5760208060031936011261030057600435906004821015918261043b576002549284805b8581106103db575061035c90613f8d565b948093815b86811061037657604051806102e58a82613ae6565b808352600380835260408420015460a01c60ff16846103c75760048110156103c75790856103a892146103ad57613bb1565b610361565b806103c16103ba89613bb1565b988b613fbf565b52613bb1565b634e487b7160e01b84526021600452602484fd5b808752600380865260408820015460a01c60ff1683610427576004811015610427578414610412575b61040d90613bb1565b61034b565b9061041f61040d91613bb1565b919050610404565b634e487b7160e01b88526021600452602488fd5b8380fd5b503461027a57602036600319011261027a57602061046b6004356104666002548210613e26565b613fd3565b604051908152f35b503461027a578060031936011261027a5760025481805b82811061051f575061049b90613f8d565b9082835b8281106104b457604051806102e58682613ae6565b808552600360209080825260ff600d604089200154166006811015610427579060016104ef949392149182610508575b50506104f457613bb1565b61049f565b806103c161050185613bb1565b9487613fbf565b8389525250604086206009015442111538806104e4565b808452600360209080825260ff600d604088200154166006811015610589576001149182610572575b505061055d575b61055890613bb1565b61048a565b9061056a61055891613bb1565b91905061054f565b838752525060408420600901544211153880610548565b634e487b7160e01b87526021600452602487fd5b503461027a578060031936011261027a576020600954604051908152f35b503461027a57604036600319011261027a5760206105f06004356105dd613995565b906105eb6002548210613e26565b6142c5565b6040519015158152f35b503461027a578060031936011261027a5780818283918460028054905b81831061063c5750505060809450604051938452602084015260408301526060820152f35b90919586885260038060205260ff8160408b20015460a01c1660048110156106e5578061067f57505061067161067891613bb1565b965b613bb1565b9190610617565b919794916001810361069f57505061069961067891613bb1565b93613bb1565b949591948084036106be5750506106b861067891613bb1565b94613bb1565b959195146106d0575b61067890613bb1565b946106dd61067891613bb1565b9590506106c7565b634e487b7160e01b8a52602160045260248afd5b503461027a578060031936011261027a576020604051610e108152f35b503461027a57602036600319011261027a576004356107386002548210613e26565b808252600360205260408220600d81019081549060ff821660068110156107dd5790610768600160099314613cb8565b015442106107a05760ff191660031790557f45806e512b1f4f10e33e8b3cb64d1d11d998d8c554a95e0841fc1c701278bd5d8280a280f35b60405162461bcd60e51b8152602060048201526015602482015274105d58dd1a5bdb881b9bdd08195b991959081e595d605a1b6044820152606490fd5b634e487b7160e01b86526021600452602486fd5b503461027a57604036600319011261027a5761080b6139ab565b6001600160a01b031681526007602052604081208054602435929083101561027a5760206108398484613b6d565b90546040519160031b1c8152f35b503461027a57602080600319360112610300576040516331aab75960e01b815260048035929184917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908490839081845afa918215610988578392610951575b50803b156109425760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa80156109465761092e575b50506103e882116108fb575060095580f35b6064906040519062461bcd60e51b82526004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b6044820152fd5b610937906139d7565b6109425782386108e9565b8280fd5b6040513d84823e3d90fd5b925090508282813d8111610981575b61096a8183613a3a565b8101031261097c5784915190386108b0565b600080fd5b503d610960565b6040513d85823e3d90fd5b503461027a57602036600319011261027a576004356109b56002548210613e26565b815260036020526040812060ff600382015460a01c166004811015610a8e5760026109e09114613ef9565b600d810180549160ff83166006811015610a7a5790610a03600160099314613cb8565b01918254421115610a3e5760029060ff191617905562015180420190814211610a2a575580f35b634e487b7160e01b83526011600452602483fd5b60405162461bcd60e51b815260206004820152601460248201527341756374696f6e207374696c6c2061637469766560601b6044820152606490fd5b634e487b7160e01b85526021600452602485fd5b634e487b7160e01b83526021600452602483fd5b50604036600319011261027a57600435602490813591610ac56002548310613e26565b8184526020906003825260ff600d604087200154166006811015610d76576001610aef9114613cb8565b82855260038252610b096009604087200154421115613cf9565b82855260038252610b2460ff60106040882001541615613e6b565b828552600b82526040852033600052825260406000205461012c8101809111610d6357610b5390421015613d35565b610b5b613c55565b8285526003825260408520600381015460ff8160a01c166004811015610d505790610b8b6002610b9c9314613ef9565b6001600160a01b0316331415613c78565b60048101543410610d18578386526005835260408620336000528352604060002054610cdc57600f01906103e882541015610ca65750907fa000acd2dce8dd1590ff43e13f10d27c2b8cf42ee254ce90b9dac98e045dabe891838652600b82526040862033600052825242604060002055838652600582526040862033600052825284604060002055610c2f33856142c5565b15610c80575b5082855260048152610c706040862060405190610c5182613a01565b3382523484830152426040830152876060830152876080830152613d70565b6040519384523393a36001815580f35b610c8a8154613bb1565b905533855260088152610ca08360408720613c02565b38610c35565b8260106064926040519262461bcd60e51b845260048401528201526f546f6f206d616e79206269646465727360801b6044820152fd5b60405162461bcd60e51b81526004810184905260158184015274109a5908185b1c9958591e481cdd589b5a5d1d1959605a1b6044820152606490fd5b60405162461bcd60e51b815260048101849052601181840152704269642062656c6f77206d696e696d756d60781b6044820152606490fd5b634e487b7160e01b885260216004528388fd5b50634e487b7160e01b8552601160045284fd5b50634e487b7160e01b8552602160045284fd5b506020806003193601126103005760043590610da3613c55565b81835260039081815260408420928284015460ff8160a01c1660048110156105895784811591821561111c575b5050156110c6576001600160a01b0390610dee908216331415613c78565b60ff600d8601541693600685101561058957610e0d6001809614613cb8565b610e1c60098701544210613cf9565b341561107757600c860190815491610e38600a89015484613bd6565b831561106c575b341061103957848952600b86526040892033600052865260406000205461012c810180911161102557610e7490421015613d35565b600b880180549485169433906001600160601b0360a01b16179055349055600f8701610ea08154613bb1565b9055838852600b8552604088203360005285524260406000205583885260048552610ef46040892060405190610ed582613a01565b33825234888301524260408301528860608301528a6080830152613d70565b87865b610fcd575b50509460059183949596610f1033866142c5565b15610fb4575b81610fa3575b505001548381151580610f99575b610f68575b50505082604051923484528301527f8f06251a01f1c60f43d914574d31d4eb5be776df9d23e7f94e7c07c578b9753d60403393a3815580f35b7f5e34871d0d7fec5df3c8e28a9377067d94fd983f6539a6d8bddfa48119558d2e91604051908152a2803883610f2f565b5081341015610f2a565b610fad918561426e565b3880610f1c565b33895260088752610fc88560408b20613c02565b610f16565b848952600486526040892054600019810190811161102557899082101561101f5781836110098a95946040858b611018975260048d5220613b3b565b5001805460ff19169055613bb1565b9091610ef7565b50610efc565b634e487b7160e01b8a52601160045260248afd5b60405162461bcd60e51b815260048101879052600b60248201526a42696420746f6f206c6f7760a81b6044820152606490fd5b506004880154610e3f565b60405162461bcd60e51b815260048101859052602160248201527f42696420616d6f756e74206d7573742062652067726561746572207468616e206044820152600360fc1b6064820152608490fd5b60405162461bcd60e51b815260048101849052602860248201527f496e76616c69642061756374696f6e207479706520666f72207468697320626960448201526719081b595d1a1bd960c21b6064820152608490fd5b1490508438610dd0565b503461027a57604036600319011261027a576111406139ab565b6001600160a01b031681526008602052604081208054602435929083101561027a5760206108398484613b6d565b503461027a5761117d36613a78565b6040516367ef9e2760e11b815283907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa918215610988578392611228575b50803b156109425760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561094657611214575b505061121191614089565b80f35b61121d906139d7565b610942578238611206565b925090506020823d8211611256575b8161124460209383613a3a565b8101031261097c5784915190386111cd565b3d9150611237565b503461027a578060031936011261027a5760405163e63ab1e960e01b815281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa918215610988578392611352575b50803b1561134e5760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa80156109465761133a575b50611301613c37565b600160ff19815416176001557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b611343906139d7565b61027a5780386112f8565b5050fd5b925090506020823d8211611380575b8161136e60209383613a3a565b8101031261097c5782915190386112bf565b3d9150611361565b503461027a57602036600319011261027a578060409161024083516113ac81613a1d565b82815282602082015282858201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201528261016082015282610180820152826101a0820152826101c0820152826101e08201528261020082015282610220820152015261142f60025460043510613e26565b600435815260036020522060405161144681613a1d565b8154815260018201546001600160a01b03908116602083015260028301546040830152600383015490811660608301526114899060a01c60ff1660808301613bf6565b600482015460a0820152600582015460c082015260068083015460e0830152600783015461010083015260088301546101208301526009830154610140830152600a830154610160830152600b8301546001600160a01b0316610180830152600c8301546101a0830152600d830154929060ff8416101561164357601060ff9182858161026097166101c087015260081c1615156101e0850152600e810154610200850152600f8101546102208501520154161515610240820152610240604051918051835260018060a01b0360208201511660208401526040810151604084015260018060a01b03606082015116606084015261158f60808201516080850190613b21565b60a081015160a084015260c081015160c084015260e081015160e084015261010081015161010084015261012081015161012084015261014081015161014084015261016081015161016084015260018060a01b03610180820151166101808401526101a08101516101a08401526116116101c08201516101c0850190613b2e565b6101e081015115156101e084015261020081015161020084015261022081015161022084015201511515610240820152f35b634e487b7160e01b600052602160045260246000fd5b503461027a576020908160031936011261027a579060043560029061168082548210613e26565b8352600482526040832090815461169681613f75565b916116a46040519384613a3a565b81835284830190819487528587209087925b8484106117305750505050506040519280840191818552518092526040840192945b8281106116e55784840385f35b855180516001600160a01b031685528083015185840152604080820151908601526060808201511515908601526080908101511515908501529481019460a0909301926001016116d8565b60048860019260409b9a98999b5161174781613a01565b848060a01b0387541681528487015483820152858701546040820152600387015460ff908181161515606084015260081c161515608082015281520193019301929197959496976116b6565b503461027a578060031936011261027a57602060405161012c8152f35b503461027a57602080600319360112610300576001600160a01b036117d36139ab565b1682526008815260408220916040518092808554928381520194835280832092905b82821061180c576102e5856102d981890382613a3a565b8354865294850194600193840193909101906117f5565b503461027a57604036600319011261027a5761183d6139ab565b6040516385f438c160e01b8152602480359291602091906001600160a01b039086907f000000000000000000000000000000000000000000000000000000000000000083168582600481845afa918215610988578392611a72575b50803b156109425760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561094657611a5a575b50506118db613c55565b8316928315611a22573084146119de573b61199b5783156119585747841161191e57846119178180808089895af1611911613f45565b50614230565b6001815580f35b9060146064926040519262461bcd60e51b8452600484015282015273496e73756666696369656e742062616c616e636560601b6044820152fd5b90601d6064926040519262461bcd60e51b845260048401528201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152fd5b90601b6064926040519262461bcd60e51b845260048401528201527f43616e6e6f7420776974686472617720746f20636f6e747261637400000000006044820152fd5b60405162461bcd60e51b8152600481018490526017818401527f43616e6e6f7420776974686472617720746f2073656c660000000000000000006044820152606490fd5b60405162461bcd60e51b81526004810184905260118184015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606490fd5b611a63906139d7565b611a6e5785386118d1565b8580fd5b925090508482813d8111611a9d575b611a8b8183613a3a565b8101031261097c578791519038611898565b503d611a81565b503461027a57611ab3366139c1565b9190815260046020526040812090815483101561027a5760a0611ad68484613b3b565b5060ff600180841b03825416916001810154906003600282015491015491604051948552602085015260408401528181161515606084015260081c1615156080820152f35b503461027a578060031936011261027a57602060ff600154166040519015158152f35b503461027a57602036600319011261027a57600435815260036020526040902080808054600160a01b6001900360018301541660c05260028201546003830154600484015460058501546006860154600787015490600888015492600989015494600a8a015496600160a01b60019003600b8c01541698600c8c01549a600d8d01549c600e01549d600f01549e6010015460ff1660805260405160a05260a0515260c05160a0516020015260a05160400152600160a01b60019003811660a0516060015260a0516080019060a01c60ff1690611c1991613b21565b60a05160a0015260a05160c0015260a05160e0015260a051610100015260a051610120015260a051610140015260a051610160015260a051610180015260a0516101a0015260a0516101c00160ff821690611c7391613b2e565b60081c60ff16151560a0516101e0015260a051610200015260a0516102200152608051151560a051610240015260a05161026090f35b503461027a578060031936011261027a57602060405162278d008152f35b503461027a578060031936011261027a576040516367ef9e2760e11b815281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa918215610988578392611dc9575b50803b1561134e5760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561094657611db5575b505060015460ff811615611da35760ff19166001557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b604051638dfc202b60e01b8152600490fd5b611dbe906139d7565b61027a578038611d61565b925090506020823d8211611df7575b81611de560209383613a3a565b8101031261097c578291519038611d28565b3d9150611dd8565b503461027a578060031936011261027a578062015180420190814211610a2a5760025490835b828110611eed5750611e3690613f8d565b918390845b838110611e5057604051806102e58782613ae6565b808652600360209080825260ff600d60408a200154166006811015611ed957906001611e91949392149182611ec0575b82611eaa575b5050611e9657613bb1565b611e3b565b806103c1611ea386613bb1565b9588613fbf565b838a525250604087206009015442103880611e86565b915082895280825284600960408b200154111591611e80565b634e487b7160e01b89526021600452602489fd5b808552600360209080825260ff600d604089200154166006811015610427576001149182611f5c575b82611f46575b5050611f31575b611f2c90613bb1565b611e25565b90611f3e611f2c91613bb1565b919050611f23565b8388525250604085206009015442103880611f1c565b9150828752808252856009604089200154111591611f16565b503461027a5761010036600319011261027a57611f906139ab565b6004604435101561030057611fa3613c55565b611fab613c37565b60e435906001600160a01b0381161561278b576064351561273857610e1060c435101580612729575b156126f1576040516331a9108f60e11b81526024803560048301526020908290816001600160a01b0386165afa9081156123b15784916126b7575b50336001600160a01b03909116036126825760405163e985e9c560e01b81523360048201523060248201526020816044816001600160a01b0386165afa9081156123b1578491612653575b5080156125d1575b1561259957600360443514612538575b60a435612470575b6001604435146123f4575b6002549161209283613bb1565b6002556120a160c43542613bd6565b60e435156123cb575b60ff906044356001036123c457606435925b6044356002036123bc576002915b604051946120d786613a1d565b8786526001600160a01b0387166020870152602435604087015233606087015261210660443560808801613bf6565b60643560a087015260843560c087015260a43560e08701526101008601524261012086015261014085015261016084015285610180840152856101a084015260016101c0840152856101e0840152166102008201528361022082015283610240820152828452600360205260408420908051825560018060a01b036020820151166001600160601b0360a01b6001840154161760018301556040810151600283015560018060a01b03606082015116600383015490608083015160048110156104275760ff60a01b9060a01b16916affffffffffffffffffffff60a81b161717600383015560a0810151600483015560c0810151600583015560e08101516006830155610100810151600783015561012081015160088301556101408101516009830155610160810151600a830155600b820160018060a01b03610180830151166001600160601b0360a01b8254161790556101a0810151600c830155600d82016101c082015160068110156105895781546101e084015161ff0090151560081b1660ff9290921661ffff19909116171790556122d2919060109061024090610200810151600e850155610220810151600f8501550151151591019060ff801983541691151516179055565b33835260076020526122e78260408520613c02565b6001600160a01b0381163b15610942576040516323b872dd60e01b8152336004820152306024808301919091523560448201528381606481836001600160a01b0387165af180156123b15761239d575b50602092600191604051906024358252612355868301604435613b21565b606435604083015260c4356060830152838060a01b031690847f5c2d0edaf61e67e74604ea483df48ee4e415c7022f58881f276a833502e5b94f60803393a455604051908152f35b6123a784916139d7565b6109425738612337565b6040513d86823e3d90fd5b6001916120ca565b85926120bc565b90506127106123de600a54606435613be3565b0490816120aa5766038d7ea4c6800091506120aa565b608435151580612463575b6120855760405162461bcd60e51b815260206004820152603260248201527f44757463682061756374696f6e206e656564732076616c69642072657365727660448201527165203c207374617274696e6720707269636560701b6064820152608490fd5b50606435608435106123ff565b60643560a43511156124e4576084351561207a5760843560a435101561207a5760405162461bcd60e51b815260206004820152602660248201527f427579206e6f77207072696365206d757374206265203e3d207265736572766560448201526520707269636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602660248201527f427579206e6f77207072696365206d757374206265203e207374617274696e6760448201526520707269636560d01b6064820152608490fd5b60643560843510156120725760405162461bcd60e51b815260206004820152602760248201527f52657365727665207072696365206d757374206265203e3d207374617274696e6044820152666720707269636560c81b6064820152608490fd5b60405162461bcd60e51b815260206004820152601060248201526f139195081b9bdd08185c1c1c9bdd995960821b6044820152606490fd5b5060405163020604bf60e21b81526024803560048301526020908290816001600160a01b0386165afa9081156123b1578491612619575b506001600160a01b03163014612062565b90506020813d60201161264b575b8161263460209383613a3a565b8101031261043b5761264590613b85565b38612608565b3d9150612627565b612675915060203d60201161267b575b61266d8183613a3a565b810190613b99565b3861205a565b503d612663565b60405162461bcd60e51b815260206004820152600d60248201526c2737ba1027232a1037bbb732b960991b6044820152606490fd5b90506020813d6020116126e9575b816126d260209383613a3a565b8101031261043b576126e390613b85565b3861200f565b3d91506126c5565b60405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b210323ab930ba34b7b760811b6044820152606490fd5b5062278d0060c4351115611fd4565b60405162461bcd60e51b815260206004820152602560248201527f5374617274696e67207072696365206d75737420626520677265617465722074604482015264068616e20360dc1b6064820152608490fd5b60405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081391950818dbdb9d1c9858dd60621b6044820152606490fd5b503461027a578060031936011261027a5760206040516103e88152f35b503461027a578060031936011261027a5760025481808080805b858110612826575060a095506040519485526020850152604084015260608301526080820152f35b90818752600360209080825260ff600d60408b2001541660068110156106e557600181036128685750505061285d61286391613bb1565b91613bb1565b6127fe565b6004819894959896929396146000146128a05750916106b89161288d61286394613bb1565b95888b5252600c60408a20015490613bd6565b90945060059150959195146128b9575b61286390613bb1565b926128c661286391613bb1565b9390506128b0565b503461027a57602036600319011261027a576128e8613c55565b6004358152600360205260408120600d810180549060ff82166006811015610a7a5760038103612d9c57600203612d57576009830154620151808101809111612d4357421115612d055760018060a01b03600b8401541690600c840154928215612cce5760ff19166004179055600183015460028401546009549092916001600160a01b0316906127109061297d9086613be3565b049460405163152a902d60e11b8152846004820152856024820152604081604481865afa8089928a92612c88575b50612c80575050869387925b866129c2878a613bd6565b11612c425788926129dc876129d78b8b613e19565b613e19565b91803b15612c3e576040516323b872dd60e01b81523060048201526001600160a01b0388166024820152604481019490945284908490606490829084905af19283156123b1578493612c26575b5060030154829182916001600160a01b03165af1612a45613f45565b5015612be85785908380151580612bd6575b612b6a575b505050600435855260046020526040852092600360205260018060a01b03600b6040882001541692865b8554811015612b26578085612a9e612aba9389613b3b565b50546001600160a01b0316141580612b0a575b612abf57613bb1565b612a86565b6003612acb8289613b3b565b5001805461ff001916610100179055610673612ae78289613b3b565b50546001600160a01b03166001612afe848b613b3b565b5001549060043561426e565b5060ff6003612b19838a613b3b565b50015460081c1615612ab1565b5086935085604051928352602083015260408201527f505c7c7cd3a58c7bd261c378954ce91c744bdde91a6e1a6f5cb8799f2e9a1d68606060043592a36001815580f35b8291829182916001600160a01b03165af1612b83613f45565b5015612b9157843883612a5c565b60405162461bcd60e51b815260206004820152601760248201527f526f79616c7479207472616e73666572206661696c65640000000000000000006044820152606490fd5b506001600160a01b0382161515612a57565b60405162461bcd60e51b815260206004820152601660248201527514d95b1b195c881d1c985b9cd9995c8819985a5b195960521b6044820152606490fd5b612c32909391936139d7565b61094257829138612a29565b8480fd5b60405162461bcd60e51b815260206004820152601660248201527546656573206578636565642073616c6520707269636560501b6044820152606490fd5b9490926129b7565b925090506040823d604011612cc6575b81612ca560409383613a3a565b81010312612cc2576020612cb883613b85565b92015190386129ab565b8880fd5b3d9150612c98565b60405162461bcd60e51b815260206004820152600f60248201526e139bc81dda5b9b995c88199bdd5b99608a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527514995d99585b081c1a185cd9481b9bdd08195b99195960521b6044820152606490fd5b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b815260206004820152601860248201527f52657665616c207068617365206e6f74207374617274656400000000000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f41756374696f6e206e6f7420726561647920666f7220736574746c656d656e746044820152fd5b503461027a57612def36613a78565b612dff6002939293548410613e26565b82825260209260038452612e1d60ff60106040862001541615613e6b565b612e25613c55565b80835260038085526040842090810154336001600160a01b0391821614908115612f1e575b5015612ed957600d015460ff1660068110156103c7578015908115612ece575b5015612e7a579061191791614089565b60405162461bcd60e51b815260048101859052602660248201527f43616e6e6f742063616e63656c2061756374696f6e20696e2063757272656e7460448201526520737461746560d01b6064820152608490fd5b600191501438612e6a565b60405162461bcd60e51b815260048101869052601860248201527f4e6f7420617574686f72697a656420746f2063616e63656c00000000000000006044820152606490fd5b90507f0000000000000000000000000000000000000000000000000000000000000000166040516367ef9e2760e11b81528681600481855afa908115613000579087918791612fcf575b50604051632474521560e21b815260048101919091523360248201529182908180604481015b03915afa908115612fc4578591612fa7575b5038612e4a565b612fbe9150863d881161267b5761266d8183613a3a565b38612fa0565b6040513d87823e3d90fd5b82819392503d8311612ff9575b612fe68183613a3a565b8101031261097c57518690612f8e612f68565b503d612fdc565b6040513d88823e3d90fd5b503461027a5761301a366139c1565b906130286002548210613e26565b604051633eb0a94360e11b81526020919084907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168482600481845afa918215610988578392613148575b50803b156109425760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561094657613134575b505260038152604083209060ff600d830154166006811015610a7a5760016130dc9114613cb8565b6201518083116130fb575060096130f69101918254613bd6565b905580f35b6064906040519062461bcd60e51b825260048201526012602482015271457874656e73696f6e20746f6f206c6f6e6760701b6044820152fd5b61313d906139d7565b61043b5783386130b4565b925090508382813d8111613173575b6131618183613a3a565b8101031261097c57859151903861307b565b503d613157565b5060208060031936011261030057600435906131996002548310613e26565b81835260039081815260ff600d60408620015416926006841015610a7a576131c46001809514613cb8565b8085528282526131dd6009604087200154421115613cf9565b8085528282526131f760ff60106040882001541615613e6b565b6131ff613c55565b8085528282528260408620015460ff8160a01c16600481101561058957856132279114613eb7565b6001600160a01b0316331461339a5761323f81613fd3565b9283341061335e579084600f879594938387528085526040872090600b8201336001600160601b0360a01b82541617905586600c830155600d82019060ff19825416179055015561329033826142c5565b15613345575b808452600482526132d060408520604051906132b182613a01565b3382528585830152426040830152876060830152866080830152613d70565b84604051928484528301527f8f06251a01f1c60f43d914574d31d4eb5be776df9d23e7f94e7c07c578b9753d60403393a380341161330d57505580f35b818061331a819334613e19565b81811561333c575b3390f11561332f57815580f35b50604051903d90823e3d90fd5b506108fc613322565b338452600882526133598160408620613c02565b613296565b60405162461bcd60e51b8152600481018490526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606490fd5b60405162461bcd60e51b815260048101839052601160248201527053656c6c65722063616e6e6f742062757960781b6044820152606490fd5b503461027a57604036600319011261027a5760406133ef613995565b9160043581526006602052209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b503461027a578060031936011261027a576020600254604051908152f35b503461027a578060031936011261027a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461027a57602080600319360112610300576004359060018060a01b037f000000000000000000000000000000000000000000000000000000000000000016836040516331aab75960e01b81528381600481865afa90811561094657829161357b575b50823b156103005760405163101a2a3160e31b8152600481019190915233602482015291829060449082905afa80156123b157613568575b506107d0821161352f5750600a5580f35b6064906040519062461bcd60e51b825260048201526012602482015271092dcc6e4cadacadce840e8dede40d0d2ced60731b6044820152fd5b613574909391936139d7565b913861351e565b90508381813d83116135a1575b6135928183613a3a565b810103126103005751386134e6565b503d613588565b503461027a57606036600319011261027a5760043560249081356044916135d26002548210613e26565b8085526020600381526135ef60ff60106040892001541615613e6b565b6135f7613c55565b818652600381526040862060ff600382015460a01c1660048110156139415760026136229114613ef9565b60ff600d82015416600681101561394157600203613908578287526006825260408720338852825260ff6040882054166138d2578287526005825260408720338852825260408720541561388f5760405182810190858252863560408201523360601b606082015260548152608081019181831067ffffffffffffffff84111761387c578260405281519020858a526005855260408a20338b52855260408a20540361384657505082875260068252604087203388528252604087209460019687968760ff198254161790558689905b61375c575b5050508394509283600c7fe114ea9e9a27652a7d68437b8464a4c003a7697f8123821f48a4b83718c05bc69495019081548311613740575b5050506040519384523393a3815580f35b600b0180546001600160a01b031916331790555583388061372f565b858a526004855260408a208054821015613840578161377a91613b3b565b50546001600160a01b0316331461379a5761379490613bb1565b876136f2565b9293948096975089526004855286886137b68560408d20613b3b565b500154106138085750507fe114ea9e9a27652a7d68437b8464a4c003a7697f8123821f48a4b83718c05bc6929185876137fa8294888c526004875260408c20613b3b565b5001559093928695386136f7565b72496e73756666696369656e7420657363726f7760681b606492601387936040519462461bcd60e51b86526004860152840152820152fd5b506136f7565b9071125b9d985b1a5908189a59081c995d99585b60721b60c46064938662461bcd60e51b85526084820152601260a48201520152fd5b634e487b7160e01b8a526041600452888afd5b60405162461bcd60e51b8152600481018390526017818801527f4e6f207365616c656420626964207375626d697474656400000000000000000081870152606490fd5b60405162461bcd60e51b8152600481018390526010818801526f105b1c9958591e481c995d99585b195960821b81870152606490fd5b60405162461bcd60e51b815260048101839052601381880152724e6f7420696e2072657665616c20706861736560681b81870152606490fd5b634e487b7160e01b885260216004528688fd5b905034610300576040366003190112610300576040602092613974613995565b6004358252600585528282206001600160a01b039091168252845220548152f35b602435906001600160a01b038216820361097c57565b600435906001600160a01b038216820361097c57565b604090600319011261097c576004359060243590565b67ffffffffffffffff81116139eb57604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff8211176139eb57604052565b610260810190811067ffffffffffffffff8211176139eb57604052565b90601f8019910116810190811067ffffffffffffffff8211176139eb57604052565b67ffffffffffffffff81116139eb57601f01601f191660200190565b90604060031983011261097c576004359160243567ffffffffffffffff811161097c578160238201121561097c57806004013590613ab582613a5c565b92613ac36040519485613a3a565b8284526024838301011161097c5781600092602460209301838601378301015290565b6020908160408183019282815285518094520193019160005b828110613b0d575050505090565b835185529381019392810192600101613aff565b9060048210156116435752565b9060068210156116435752565b8054821015613b575760005260206000209060021b0190600090565b634e487b7160e01b600052603260045260246000fd5b8054821015613b575760005260206000200190600090565b51906001600160a01b038216820361097c57565b9081602091031261097c5751801515810361097c5790565b6000198114613bc05760010190565b634e487b7160e01b600052601160045260246000fd5b91908201809211613bc057565b81810292918115918404141715613bc057565b60048210156116435752565b8054600160401b8110156139eb57613c1f91600182018155613b6d565b819291549060031b91821b91600019901b1916179055565b60ff60015416613c4357565b60405163d93c066560e01b8152600490fd5b600260005414613c66576002600055565b604051633ee5aeb560e01b8152600490fd5b15613c7f57565b60405162461bcd60e51b815260206004820152601160248201527014d95b1b195c8818d85b9b9bdd08189a59607a1b6044820152606490fd5b15613cbf57565b60405162461bcd60e51b815260206004820152601260248201527141756374696f6e206e6f742061637469766560701b6044820152606490fd5b15613d0057565b60405162461bcd60e51b815260206004820152600d60248201526c105d58dd1a5bdb88195b991959609a1b6044820152606490fd5b15613d3c57565b60405162461bcd60e51b815260206004820152600c60248201526b2134b2103a37b79039b7b7b760a11b6044820152606490fd5b8054600160401b8110156139eb57613d8d91600182018155613b3b565b919091613e035760806003613e019360018060a01b038451166001600160601b0360a01b82541617815560208401516001820155604084015160028201550191613de960608201511515849060ff801983541691151516179055565b0151815461ff00191690151560081b61ff0016179055565b565b634e487b7160e01b600052600060045260246000fd5b91908203918211613bc057565b15613e2d57565b60405162461bcd60e51b8152602060048201526016602482015275105d58dd1a5bdb88191bd95cc81b9bdd08195e1a5cdd60521b6044820152606490fd5b15613e7257565b60405162461bcd60e51b815260206004820152601760248201527f41756374696f6e20616c726561647920736574746c65640000000000000000006044820152606490fd5b15613ebe57565b60405162461bcd60e51b81526020600482015260136024820152722737ba103090223aba31b41030bab1ba34b7b760691b6044820152606490fd5b15613f0057565b60405162461bcd60e51b815260206004820152601860248201527f4e6f742061207365616c6564206269642061756374696f6e00000000000000006044820152606490fd5b3d15613f70573d90613f5682613a5c565b91613f646040519384613a3a565b82523d6000602084013e565b606090565b67ffffffffffffffff81116139eb5760051b60200190565b90613f9782613f75565b613fa46040519182613a3a565b8281528092613fb5601f1991613f75565b0190602036910137565b8051821015613b575760209160051b010190565b90600091825260036020526040822060ff600382015460a01c1660048110156103c75760016140029114613eb7565b6009810154804210156140805761402760088301546140218142613e19565b92613e19565b90818110156140765761404c906140476005600486015495015485613e19565b613be3565b81156140625761405f9394500490613e19565b90565b634e487b7160e01b85526012600452602485fd5b5050600501549150565b50600501549150565b9060009082825260039060209282845260409283822090600d8201600560ff1982541617905560018060a01b0390600192828482015416600284848401541692015491813b1561422c5788516323b872dd60e01b81523060048201526001600160a01b03919091166024820152604481019290925285908290606490829084905af180156142225761420f575b5087845260048752828685209185915b614198575b50505050508251938085528251928382870152825b8481106141855750505092817f847bb320e1da018de1bcb9cc28092da9d5d4fcbcc735f003ad1d9c1d4c3684e5948483959484010152601f80199101168101030190a2565b8181018301518782018701528201614140565b825482101561420a576141c48260ff836141b3899688613b3b565b50015460081c16156141ca57613bb1565b91614126565b826141d58287613b3b565b5001805461ff0019166101001790556106738c876141f38489613b3b565b50541686614201858a613b3b565b5001549161426e565b61412b565b61421b909491946139d7565b9238614116565b87513d87823e3d90fd5b8680fd5b1561423757565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b908261427957505050565b6001600160a01b0316917fa59312996dc68b7f0224b341fed75d5afeb3bb20624107d37942d14f59428156906020906142bc6000808080858a5af1611911613f45565b604051908152a3565b60009160018060a01b0316825260206008815260408320906040518092839183825491828152019187528387209387905b8282106143455750505061430c92500382613a3a565b825b815181101561433f57826143228284613fbf565b51146143365761433190613bb1565b61430e565b50505050600190565b50505090565b8554845260019586019587955093810193909101906142f656fea2646970667358221220ecd5f0d70344098ba5e9396d04fcc392270cbcaf1105521dfb1e3631ecf3094c64736f6c63430008150033",
  "devdoc": {
    "details": "Advanced auction system with 4 different auction types for Moove Sticker NFTs",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "buyNowDutch(uint256)": {
        "details": "Purchase at current price for Dutch auction"
      },
      "cancelAuction(uint256,string)": {
        "details": "Cancel auction (seller or admin only)"
      },
      "createAuction(address,uint256,uint8,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Create a new auction",
        "params": {
          "auctionType": "Type of auction",
          "bidIncrement": "Minimum bid increment (0 for default)",
          "buyNowPrice": "Buy now price (0 if not applicable)",
          "duration": "Duration of the auction in seconds",
          "nftContract": "Address of the NFT contract",
          "reservePrice": "Reserve price (minimum acceptable price)",
          "startingPrice": "Starting price for the auction",
          "tokenId": "Token ID to auction"
        }
      },
      "emergencyCancel(uint256,string)": {
        "details": "Emergency cancel by admin"
      },
      "endAuction(uint256)": {
        "details": "End auction when time expires (can be called by anyone)"
      },
      "extendAuction(uint256,uint256)": {
        "details": "Extend auction duration (admin only, emergency situations)"
      },
      "getActiveAuctions()": {
        "details": "Get active auctions"
      },
      "getAuction(uint256)": {
        "details": "Get auction details"
      },
      "getAuctionBids(uint256)": {
        "details": "Get auction bids"
      },
      "getAuctionStats()": {
        "details": "Get auction statistics"
      },
      "getAuctionTypeDistribution()": {
        "details": "Get auction type distribution"
      },
      "getAuctionsByType(uint8)": {
        "details": "Get auctions by type"
      },
      "getDutchPrice(uint256)": {
        "details": "Get current price for Dutch auction"
      },
      "getEndingSoonAuctions()": {
        "details": "Get ending soon auctions (within next 24 hours)"
      },
      "getUserAuctions(address)": {
        "details": "Get user's auctions"
      },
      "getUserBids(address)": {
        "details": "Get user's bids"
      },
      "hasUserBid(uint256,address)": {
        "details": "Check if user has bid on auction"
      },
      "pause()": {
        "details": "Emergency pause"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "placeBid(uint256)": {
        "details": "Place a bid on an English or Reserve auction"
      },
      "revealSealedBid(uint256,uint256,uint256)": {
        "details": "Reveal sealed bid"
      },
      "settleAuction(uint256)": {
        "details": "Settle auction and transfer NFT to winner"
      },
      "startRevealPhase(uint256)": {
        "details": "Start reveal phase for sealed bid auctions"
      },
      "submitSealedBid(uint256,bytes32)": {
        "details": "Submit sealed bid (commitment phase)"
      },
      "totalAuctions()": {
        "details": "Get total number of auctions"
      },
      "unpause()": {
        "details": "Unpause"
      },
      "updateMinimumBidIncrement(uint256)": {
        "details": "Update minimum bid increment"
      },
      "updatePlatformFee(uint256)": {
        "details": "Update platform fee percentage"
      },
      "withdrawPlatformFees(address,uint256)": {
        "details": "Withdraw platform fees"
      }
    },
    "stateVariables": {
      "MAX_AUCTION_DURATION": {
        "details": "Maximum auction duration (30 days)"
      },
      "MAX_BIDS_PER_AUCTION": {
        "details": "Maximum number of bids per auction to prevent DoS"
      },
      "MIN_AUCTION_DURATION": {
        "details": "Minimum auction duration (1 hour)"
      },
      "MIN_BID_INTERVAL": {
        "details": "Minimum time between bids to prevent spam (5 minutes)"
      },
      "_auctionIdCounter": {
        "details": "Counter for auction IDs"
      },
      "accessControl": {
        "details": "Reference to access control contract"
      },
      "auctionBids": {
        "details": "Mapping from auction ID to bids"
      },
      "auctions": {
        "details": "Mapping from auction ID to auction details"
      },
      "hasRevealed": {
        "details": "Mapping from auction ID to bidder reveal status"
      },
      "lastBidTime": {
        "details": "Mapping to track last bid time per user per auction"
      },
      "minimumBidIncrement": {
        "details": "Minimum bid increment percentage (500 = 5%)"
      },
      "platformFeePercentage": {
        "details": "Platform fee percentage (250 = 2.5%)"
      },
      "sealedBids": {
        "details": "Mapping from auction ID to sealed bids (for sealed bid auctions)"
      },
      "userAuctions": {
        "details": "Mapping from user to their active auctions"
      },
      "userBids": {
        "details": "Mapping from user to their active bids"
      }
    },
    "title": "MooveAuction",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Supports English, Dutch, Sealed Bid, and Reserve auctions",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2387,
        "contract": "contracts/MooveAuction.sol:MooveAuction",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2277,
        "contract": "contracts/MooveAuction.sol:MooveAuction",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 8626,
        "contract": "contracts/MooveAuction.sol:MooveAuction",
        "label": "_auctionIdCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8632,
        "contract": "contracts/MooveAuction.sol:MooveAuction",
        "label": "auctions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Auction)8737_storage)"
      },
      {
        "astId": 8639,
        "contract": "contracts/MooveAuction.sol:MooveAuction",
        "label": "auctionBids",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_struct(Bid)8748_storage)dyn_storage)"
      },
      {
        "astId": 8646,
        "contract": "contracts/MooveAuction.sol:MooveAuction",
        "label": "sealedBids",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bytes32))"
      },
      {
        "astId": 8653,
        "contract": "contracts/MooveAuction.sol:MooveAuction",
        "label": "hasRevealed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8659,
        "contract": "contracts/MooveAuction.sol:MooveAuction",
        "label": "userAuctions",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 8665,
        "contract": "contracts/MooveAuction.sol:MooveAuction",
        "label": "userBids",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 8669,
        "contract": "contracts/MooveAuction.sol:MooveAuction",
        "label": "platformFeePercentage",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 8673,
        "contract": "contracts/MooveAuction.sol:MooveAuction",
        "label": "minimumBidIncrement",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 8696,
        "contract": "contracts/MooveAuction.sol:MooveAuction",
        "label": "lastBidTime",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Bid)8748_storage)dyn_storage": {
        "base": "t_struct(Bid)8748_storage",
        "encoding": "dynamic_array",
        "label": "struct MooveAuction.Bid[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(AuctionStatus)8765": {
        "encoding": "inplace",
        "label": "enum MooveAuction.AuctionStatus",
        "numberOfBytes": "1"
      },
      "t_enum(AuctionType)8758": {
        "encoding": "inplace",
        "label": "enum MooveAuction.AuctionType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(Bid)8748_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MooveAuction.Bid[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Bid)8748_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bytes32)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Auction)8737_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MooveAuction.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)8737_storage"
      },
      "t_struct(Auction)8737_storage": {
        "encoding": "inplace",
        "label": "struct MooveAuction.Auction",
        "members": [
          {
            "astId": 8698,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "auctionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8700,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "nftContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8702,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8704,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "seller",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 8707,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "auctionType",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(AuctionType)8758"
          },
          {
            "astId": 8709,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "startingPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8711,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "reservePrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8713,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "buyNowPrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8715,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "currentPrice",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8717,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "startTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 8719,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "endTime",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 8721,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "bidIncrement",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 8723,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "highestBidder",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          },
          {
            "astId": 8725,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "highestBid",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 8728,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "status",
            "offset": 0,
            "slot": "13",
            "type": "t_enum(AuctionStatus)8765"
          },
          {
            "astId": 8730,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "allowPartialFulfillment",
            "offset": 1,
            "slot": "13",
            "type": "t_bool"
          },
          {
            "astId": 8732,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "minBidders",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 8734,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "totalBidders",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 8736,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "isSettled",
            "offset": 0,
            "slot": "16",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(Bid)8748_storage": {
        "encoding": "inplace",
        "label": "struct MooveAuction.Bid",
        "members": [
          {
            "astId": 8739,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "bidder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8741,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8743,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8745,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "isWinning",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 8747,
            "contract": "contracts/MooveAuction.sol:MooveAuction",
            "label": "isRefunded",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}