{
  "address": "0x62E1C3c912DD70AC99241e3814Cf26e10A6AD889",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "name": "CustomizationLockChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "NFTContractAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowCustomization",
          "type": "bool"
        }
      ],
      "name": "NFTPreparedForTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketplaceFee",
          "type": "uint256"
        }
      ],
      "name": "NFTTradeCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMarketplaceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMarketplaceFee",
          "type": "uint256"
        }
      ],
      "name": "TradingFeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_TRADING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControl",
      "outputs": [
        {
          "internalType": "contract MooveAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeSales",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listedAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "allowCustomization",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "authorizeNFTContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedNFTContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "calculateTradeFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "marketplaceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellerProceeds",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelNFTSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "customizationLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "deauthorizeNFTContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "executeNFTTrade",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSaleInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "listedAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowCustomization",
              "type": "bool"
            }
          ],
          "internalType": "struct MooveTradingManager.SaleInfo",
          "name": "sale",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getTradingStats",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalSales",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalPurchases",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "volumeTraded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feesEarned",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feesPaid",
              "type": "uint256"
            }
          ],
          "internalType": "struct MooveTradingManager.TradingStats",
          "name": "stats",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isCustomizationLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "lockCustomization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplaceFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumTradingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseTrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "allowCustomization",
          "type": "bool"
        }
      ],
      "name": "prepareNFTForTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unlockCustomization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseTrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTradingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newMarketplaceFee",
          "type": "uint256"
        }
      ],
      "name": "updateTradingFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userTradingStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalSales",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPurchases",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "volumeTraded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feesEarned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feesPaid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd2ca6f997b6749bb1bb01072f50e176214fe6fd6f2250192307424a31c4e8d83",
  "receipt": {
    "to": null,
    "from": "0x777382955f33Bb8540602E914D9b650C962EF6Cc",
    "contractAddress": "0x62E1C3c912DD70AC99241e3814Cf26e10A6AD889",
    "transactionIndex": 4,
    "gasUsed": "1932804",
    "logsBloom": "0x
    "blockHash": "0x1021c1d7d7314fa43addb783acfc7e1971924f32991ab8710afc4d1ff1ae5974",
    "transactionHash": "0xd2ca6f997b6749bb1bb01072f50e176214fe6fd6f2250192307424a31c4e8d83",
    "logs": [],
    "blockNumber": 8924739,
    "cumulativeGasUsed": "2016804",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x005672EcC14b09A958742B960Ebb76eBE52Be44A",
    "0x777382955f33Bb8540602E914D9b650C962EF6Cc"
  ],
  "numDeployments": 1,
  "solcInputHash": "cf9183c5756e95f1fc92655ea94dc824",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"CustomizationLockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"NFTContractAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowCustomization\",\"type\":\"bool\"}],\"name\":\"NFTPreparedForTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketplaceFee\",\"type\":\"uint256\"}],\"name\":\"NFTTradeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMarketplaceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketplaceFee\",\"type\":\"uint256\"}],\"name\":\"TradingFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TRADING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControl\",\"outputs\":[{\"internalType\":\"contract MooveAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeSales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowCustomization\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"authorizeNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedNFTContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"calculateTradeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketplaceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerProceeds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelNFTSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customizationLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"deauthorizeNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"executeNFTTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSaleInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowCustomization\",\"type\":\"bool\"}],\"internalType\":\"struct MooveTradingManager.SaleInfo\",\"name\":\"sale\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTradingStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPurchases\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volumeTraded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesPaid\",\"type\":\"uint256\"}],\"internalType\":\"struct MooveTradingManager.TradingStats\",\"name\":\"stats\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isCustomizationLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lockCustomization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTradingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowCustomization\",\"type\":\"bool\"}],\"name\":\"prepareNFTForTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unlockCustomization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTradingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketplaceFee\",\"type\":\"uint256\"}],\"name\":\"updateTradingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTradingStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPurchases\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volumeTraded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"authorizeNFTContract(address)\":{\"details\":\"Authorize NFT contract for trading\",\"params\":{\"nftContract\":\"Address of the NFT contract\"}},\"calculateTradeFees(uint256)\":{\"details\":\"Calculate trade fees for a given price\",\"params\":{\"price\":\"Trade price\"},\"returns\":{\"marketplaceFee\":\"Marketplace fee amount\",\"sellerProceeds\":\"Amount seller receives\",\"tradingFee\":\"Trading fee amount\"}},\"cancelNFTSale(address,uint256)\":{\"details\":\"Cancel NFT sale and unlock customization\",\"params\":{\"nftContract\":\"Address of the NFT contract\",\"tokenId\":\"Token ID to cancel sale for\"}},\"deauthorizeNFTContract(address)\":{\"details\":\"Deauthorize NFT contract for trading\",\"params\":{\"nftContract\":\"Address of the NFT contract\"}},\"emergencyWithdraw()\":{\"details\":\"Emergency withdraw all funds to treasury\"},\"executeNFTTrade(address,uint256)\":{\"details\":\"Execute NFT trade\",\"params\":{\"nftContract\":\"Address of the NFT contract\",\"tokenId\":\"Token ID to trade\"}},\"getSaleInfo(address,uint256)\":{\"details\":\"Get sale information for an NFT\",\"params\":{\"nftContract\":\"Address of the NFT contract\",\"tokenId\":\"Token ID\"},\"returns\":{\"sale\":\"Sale information\"}},\"getTradingStats(address)\":{\"details\":\"Get trading statistics for a user\",\"params\":{\"user\":\"User address\"},\"returns\":{\"stats\":\"Trading statistics\"}},\"isCustomizationLocked(address,uint256)\":{\"details\":\"Check if NFT customization is locked\",\"params\":{\"nftContract\":\"Address of the NFT contract\",\"tokenId\":\"Token ID to check\"},\"returns\":{\"locked\":\"True if customization is locked\"}},\"lockCustomization(address,uint256)\":{\"details\":\"Lock NFT customization (called by customization contract)\",\"params\":{\"nftContract\":\"Address of the NFT contract\",\"tokenId\":\"Token ID to lock\"}},\"pauseTrading()\":{\"details\":\"Emergency pause trading\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"prepareNFTForTrade(address,uint256,uint256,bool)\":{\"details\":\"Prepare NFT for trading with customization lock options\",\"params\":{\"allowCustomization\":\"Whether to allow customization during sale period\",\"nftContract\":\"Address of the NFT contract\",\"salePrice\":\"Price at which to list the NFT\",\"tokenId\":\"Token ID to prepare for trading\"}},\"unlockCustomization(address,uint256)\":{\"details\":\"Unlock NFT customization\",\"params\":{\"nftContract\":\"Address of the NFT contract\",\"tokenId\":\"Token ID to unlock\"}},\"unpauseTrading()\":{\"details\":\"Unpause trading\"},\"updateTradingFees(uint256,uint256)\":{\"details\":\"Update trading fees\",\"params\":{\"newMarketplaceFee\":\"New marketplace fee percentage (basis points)\",\"newTradingFee\":\"New trading fee percentage (basis points)\"}},\"updateTreasury(address)\":{\"details\":\"Update treasury address\",\"params\":{\"newTreasury\":\"New treasury address\"}},\"withdrawFees(address,uint256)\":{\"details\":\"Withdraw accumulated fees\",\"params\":{\"amount\":\"Amount to withdraw\",\"to\":\"Address to send fees to\"}}},\"stateVariables\":{\"MAX_TRADING_FEE\":{\"details\":\"Maximum trading fee percentage (10%)\"},\"accessControl\":{\"details\":\"Reference to the access control contract\"},\"activeSales\":{\"details\":\"Mapping to track active sales\"},\"authorizedNFTContracts\":{\"details\":\"Mapping to track authorized NFT contracts\"},\"customizationLocked\":{\"details\":\"Mapping to track NFT customization locks during trades\"},\"marketplaceFeePercentage\":{\"details\":\"Marketplace commission percentage (basis points)\"},\"minimumTradingFee\":{\"details\":\"Minimum trading fee in wei\"},\"tradingFeePercentage\":{\"details\":\"Trading fee percentage (basis points: 100 = 1%)\"},\"treasury\":{\"details\":\"Treasury address for collecting fees\"},\"userTradingStats\":{\"details\":\"Mapping to track trading statistics\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MooveTradingManager.sol\":\"MooveTradingManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/MooveAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MooveAccessControl\\r\\n * @dev Centralized access control system for the Moove ecosystem\\r\\n * @notice Manages roles, permissions, and security features across all Moove contracts\\r\\n */\\r\\ncontract MooveAccessControl is AccessControl, Pausable, ReentrancyGuard {\\r\\n    // ============= ROLE DEFINITIONS =============\\r\\n\\r\\n    /// @dev Master admin role - can grant/revoke all other roles\\r\\n    bytes32 public constant MASTER_ADMIN_ROLE = keccak256(\\\"MASTER_ADMIN_ROLE\\\");\\r\\n\\r\\n    /// @dev NFT minting permissions\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n\\r\\n    /// @dev Auction and marketplace management\\r\\n    bytes32 public constant AUCTION_MANAGER_ROLE =\\r\\n        keccak256(\\\"AUCTION_MANAGER_ROLE\\\");\\r\\n\\r\\n    /// @dev Vehicle customization management\\r\\n    bytes32 public constant CUSTOMIZATION_ADMIN_ROLE =\\r\\n        keccak256(\\\"CUSTOMIZATION_ADMIN_ROLE\\\");\\r\\n\\r\\n    /// @dev Price and fee management\\r\\n    bytes32 public constant PRICE_MANAGER_ROLE =\\r\\n        keccak256(\\\"PRICE_MANAGER_ROLE\\\");\\r\\n\\r\\n    /// @dev Emergency pause permissions\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\r\\n\\r\\n    /// @dev Fund withdrawal permissions\\r\\n    bytes32 public constant WITHDRAWER_ROLE = keccak256(\\\"WITHDRAWER_ROLE\\\");\\r\\n\\r\\n    /// @dev Contract upgrade permissions\\r\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\r\\n\\r\\n    /// @dev Metadata management permissions\\r\\n    bytes32 public constant METADATA_MANAGER_ROLE =\\r\\n        keccak256(\\\"METADATA_MANAGER_ROLE\\\");\\r\\n\\r\\n    bytes32 public constant TRADER_ROLE = keccak256(\\\"TRADER_ROLE\\\");\\r\\n    bytes32 public constant MARKETPLACE_MANAGER_ROLE =\\r\\n        keccak256(\\\"MARKETPLACE_MANAGER_ROLE\\\");\\r\\n\\r\\n    // ============= STATE VARIABLES =============\\r\\n\\r\\n    /// @dev Mapping to track authorized contract addresses\\r\\n    mapping(address => bool) public authorizedContracts;\\r\\n\\r\\n    /// @dev Mapping to track emergency contacts\\r\\n    mapping(address => bool) public emergencyContacts;\\r\\n\\r\\n    /// @dev Time lock duration for critical operations (in seconds)\\r\\n    uint256 public timeLockDuration = 24 hours;\\r\\n\\r\\n    /// @dev Mapping to track time-locked operations\\r\\n    mapping(bytes32 => uint256) public timelockExecutions;\\r\\n\\r\\n    /// @dev Mapping to track role members for enumeration (if needed)\\r\\n    mapping(bytes32 => address[]) private _roleMembers;\\r\\n    mapping(bytes32 => mapping(address => uint256)) private _roleMemberIndex;\\r\\n\\r\\n    /// @dev Global pause state that affects all contracts\\r\\n    bool public globalPause = false;\\r\\n\\r\\n    /// @dev Maximum number of admins allowed\\r\\n    uint256 public constant MAX_ADMINS = 10;\\r\\n\\r\\n    /// @dev Current number of master admins\\r\\n    uint256 public masterAdminCount = 0;\\r\\n\\r\\n    // ============= EVENTS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a contract is authorized or deauthorized\\r\\n     */\\r\\n    event ContractAuthorizationChanged(\\r\\n        address indexed contractAddress,\\r\\n        bool authorized\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when an emergency contact is added or removed\\r\\n     */\\r\\n    event EmergencyContactChanged(address indexed contact, bool added);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when timelock duration is updated\\r\\n     */\\r\\n    event TimeLockDurationUpdated(uint256 oldDuration, uint256 newDuration);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a time-locked operation is scheduled\\r\\n     */\\r\\n    event TimeLockOperationScheduled(\\r\\n        bytes32 indexed operationId,\\r\\n        uint256 executeAfter\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a time-locked operation is executed\\r\\n     */\\r\\n    event TimeLockOperationExecuted(bytes32 indexed operationId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when global pause state changes\\r\\n     */\\r\\n    event GlobalPauseStateChanged(bool paused);\\r\\n\\r\\n    // ============= MODIFIERS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if caller is an authorized contract\\r\\n     */\\r\\n    modifier onlyAuthorizedContract() {\\r\\n        require(authorizedContracts[msg.sender], \\\"Not authorized contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if caller is emergency contact\\r\\n     */\\r\\n    modifier onlyEmergencyContact() {\\r\\n        require(\\r\\n            emergencyContacts[msg.sender] ||\\r\\n                hasRole(MASTER_ADMIN_ROLE, msg.sender),\\r\\n            \\\"Not emergency contact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to ensure global pause is not active\\r\\n     */\\r\\n    modifier whenNotGloballyPaused() {\\r\\n        require(!globalPause, \\\"Globally paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier for time-locked operations\\r\\n     */\\r\\n    modifier onlyAfterTimelock(bytes32 operationId) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] != 0 &&\\r\\n                block.timestamp >= timelockExecutions[operationId],\\r\\n            \\\"Operation not ready or not scheduled\\\"\\r\\n        );\\r\\n        _;\\r\\n        delete timelockExecutions[operationId];\\r\\n    }\\r\\n\\r\\n    // ============= CONSTRUCTOR =============\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor sets up initial roles and admin\\r\\n     * @param initialAdmin Address to be granted master admin role\\r\\n     */\\r\\n    constructor(address initialAdmin) {\\r\\n        require(initialAdmin != address(0), \\\"Invalid admin address\\\");\\r\\n\\r\\n        // Grant master admin role to initial admin\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialAdmin);\\r\\n        _grantRole(MASTER_ADMIN_ROLE, initialAdmin);\\r\\n\\r\\n        // Set master admin as role admin for all roles\\r\\n        _setRoleAdmin(MINTER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(AUCTION_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(CUSTOMIZATION_ADMIN_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(PRICE_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(PAUSER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(WITHDRAWER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(UPGRADER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(METADATA_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(TRADER_ROLE, MASTER_ADMIN_ROLE);\\r\\n        _setRoleAdmin(MARKETPLACE_MANAGER_ROLE, MASTER_ADMIN_ROLE);\\r\\n\\r\\n        // Add initial admin as emergency contact\\r\\n        emergencyContacts[initialAdmin] = true;\\r\\n        masterAdminCount = 1;\\r\\n\\r\\n        emit EmergencyContactChanged(initialAdmin, true);\\r\\n    }\\r\\n\\r\\n    // ============= ROLE MANAGEMENT =============\\r\\n\\r\\n    /**\\r\\n     * @dev Grant master admin role with safety checks\\r\\n     * @param account Address to grant master admin role\\r\\n     */\\r\\n    function grantMasterAdmin(\\r\\n        address account\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(account != address(0), \\\"Invalid address\\\");\\r\\n        require(masterAdminCount < MAX_ADMINS, \\\"Too many admins\\\");\\r\\n        require(!hasRole(MASTER_ADMIN_ROLE, account), \\\"Already master admin\\\");\\r\\n\\r\\n        _grantRole(MASTER_ADMIN_ROLE, account);\\r\\n        emergencyContacts[account] = true;\\r\\n        masterAdminCount++;\\r\\n\\r\\n        emit EmergencyContactChanged(account, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revoke master admin role with safety checks\\r\\n     * @param account Address to revoke master admin role from\\r\\n     */\\r\\n    function revokeMasterAdmin(\\r\\n        address account\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(account != msg.sender, \\\"Cannot revoke own admin\\\");\\r\\n        require(masterAdminCount > 1, \\\"Cannot remove last admin\\\");\\r\\n        require(hasRole(MASTER_ADMIN_ROLE, account), \\\"Not master admin\\\");\\r\\n\\r\\n        _revokeRole(MASTER_ADMIN_ROLE, account);\\r\\n        emergencyContacts[account] = false;\\r\\n        masterAdminCount--;\\r\\n\\r\\n        emit EmergencyContactChanged(account, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch grant roles to multiple addresses\\r\\n     * @param role The role to grant\\r\\n     * @param accounts Array of addresses to grant the role to\\r\\n     */\\r\\n    function batchGrantRole(\\r\\n        bytes32 role,\\r\\n        address[] calldata accounts\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            if (!hasRole(role, accounts[i])) {\\r\\n                _grantRole(role, accounts[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch revoke roles from multiple addresses\\r\\n     * @param role The role to revoke\\r\\n     * @param accounts Array of addresses to revoke the role from\\r\\n     */\\r\\n    function batchRevokeRole(\\r\\n        bytes32 role,\\r\\n        address[] calldata accounts\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            if (hasRole(role, accounts[i])) {\\r\\n                _revokeRole(role, accounts[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============= CONTRACT AUTHORIZATION =============\\r\\n\\r\\n    /**\\r\\n     * @dev Authorize a contract to interact with the system\\r\\n     * @param contractAddress Address of the contract to authorize\\r\\n     */\\r\\n    function authorizeContract(\\r\\n        address contractAddress\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(contractAddress != address(0), \\\"Invalid contract address\\\");\\r\\n        require(contractAddress.code.length > 0, \\\"Not a contract\\\");\\r\\n\\r\\n        authorizedContracts[contractAddress] = true;\\r\\n        emit ContractAuthorizationChanged(contractAddress, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deauthorize a contract\\r\\n     * @param contractAddress Address of the contract to deauthorize\\r\\n     */\\r\\n    function deauthorizeContract(\\r\\n        address contractAddress\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        authorizedContracts[contractAddress] = false;\\r\\n        emit ContractAuthorizationChanged(contractAddress, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch authorize multiple contracts\\r\\n     * @param contractAddresses Array of contract addresses to authorize\\r\\n     */\\r\\n    function batchAuthorizeContracts(\\r\\n        address[] calldata contractAddresses\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < contractAddresses.length; i++) {\\r\\n            if (\\r\\n                contractAddresses[i] != address(0) &&\\r\\n                contractAddresses[i].code.length > 0\\r\\n            ) {\\r\\n                authorizedContracts[contractAddresses[i]] = true;\\r\\n                emit ContractAuthorizationChanged(contractAddresses[i], true);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if user is able to trade\\r\\n     * @param account Account check\\r\\n     */\\r\\n\\r\\n    function canTrade(\\r\\n        address account\\r\\n    ) external view returns (bool hasTraderRole) {\\r\\n        return\\r\\n            hasRole(TRADER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if user is able to use Marketplace\\r\\n     * @param account Account check\\r\\n     */\\r\\n\\r\\n    function canManageMarketplace(\\r\\n        address account\\r\\n    ) external view returns (bool hasMarketplaceRole) {\\r\\n        return\\r\\n            hasRole(MARKETPLACE_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    // ============= EMERGENCY MANAGEMENT =============\\r\\n\\r\\n    /**\\r\\n     * @dev Add emergency contact\\r\\n     * @param contact Address to add as emergency contact\\r\\n     */\\r\\n    function addEmergencyContact(\\r\\n        address contact\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(contact != address(0), \\\"Invalid contact address\\\");\\r\\n\\r\\n        emergencyContacts[contact] = true;\\r\\n        emit EmergencyContactChanged(contact, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove emergency contact\\r\\n     * @param contact Address to remove as emergency contact\\r\\n     */\\r\\n    function removeEmergencyContact(\\r\\n        address contact\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        emergencyContacts[contact] = false;\\r\\n        emit EmergencyContactChanged(contact, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency pause - can be called by emergency contacts\\r\\n     */\\r\\n    function emergencyPause() external onlyEmergencyContact {\\r\\n        globalPause = true;\\r\\n        _pause();\\r\\n        emit GlobalPauseStateChanged(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency unpause - requires master admin\\r\\n     */\\r\\n    function emergencyUnpause() external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        globalPause = false;\\r\\n        _unpause();\\r\\n        emit GlobalPauseStateChanged(false);\\r\\n    }\\r\\n\\r\\n    // ============= TIME LOCK OPERATIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Schedule a time-locked operation\\r\\n     * @param operationId Unique identifier for the operation\\r\\n     */\\r\\n    function scheduleTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] == 0,\\r\\n            \\\"Operation already scheduled\\\"\\r\\n        );\\r\\n\\r\\n        uint256 executeAfter = block.timestamp + timeLockDuration;\\r\\n        timelockExecutions[operationId] = executeAfter;\\r\\n\\r\\n        emit TimeLockOperationScheduled(operationId, executeAfter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Cancel a time-locked operation\\r\\n     * @param operationId Unique identifier for the operation\\r\\n     */\\r\\n    function cancelTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            timelockExecutions[operationId] != 0,\\r\\n            \\\"Operation not scheduled\\\"\\r\\n        );\\r\\n\\r\\n        delete timelockExecutions[operationId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update timelock duration\\r\\n     * @param newDuration New duration in seconds\\r\\n     */\\r\\n    function updateTimeLockDuration(\\r\\n        uint256 newDuration\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) {\\r\\n        require(\\r\\n            newDuration >= 1 hours && newDuration <= 7 days,\\r\\n            \\\"Invalid duration\\\"\\r\\n        );\\r\\n\\r\\n        uint256 oldDuration = timeLockDuration;\\r\\n        timeLockDuration = newDuration;\\r\\n\\r\\n        emit TimeLockDurationUpdated(oldDuration, newDuration);\\r\\n    }\\r\\n\\r\\n    // ============= QUERY FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address has minting permissions\\r\\n     * @param account Address to check\\r\\n     * @return hasMinterRole True if address can mint\\r\\n     */\\r\\n    function canMint(\\r\\n        address account\\r\\n    ) external view returns (bool hasMinterRole) {\\r\\n        return\\r\\n            hasRole(MINTER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage auctions\\r\\n     * @param account Address to check\\r\\n     * @return hasAuctionRole True if address can manage auctions\\r\\n     */\\r\\n    function canManageAuctions(\\r\\n        address account\\r\\n    ) external view returns (bool hasAuctionRole) {\\r\\n        return\\r\\n            hasRole(AUCTION_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage customizations\\r\\n     * @param account Address to check\\r\\n     * @return hasCustomizationRole True if address can manage customizations\\r\\n     */\\r\\n    function canManageCustomizations(\\r\\n        address account\\r\\n    ) external view returns (bool hasCustomizationRole) {\\r\\n        return\\r\\n            hasRole(CUSTOMIZATION_ADMIN_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can manage prices\\r\\n     * @param account Address to check\\r\\n     * @return hasPriceRole True if address can manage prices\\r\\n     */\\r\\n    function canManagePrices(\\r\\n        address account\\r\\n    ) external view returns (bool hasPriceRole) {\\r\\n        return\\r\\n            hasRole(PRICE_MANAGER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can pause contracts\\r\\n     * @param account Address to check\\r\\n     * @return hasPauserRole True if address can pause\\r\\n     */\\r\\n    function canPause(\\r\\n        address account\\r\\n    ) external view returns (bool hasPauserRole) {\\r\\n        return\\r\\n            hasRole(PAUSER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account) ||\\r\\n            emergencyContacts[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address can withdraw funds\\r\\n     * @param account Address to check\\r\\n     * @return hasWithdrawRole True if address can withdraw\\r\\n     */\\r\\n    function canWithdraw(\\r\\n        address account\\r\\n    ) external view returns (bool hasWithdrawRole) {\\r\\n        return\\r\\n            hasRole(WITHDRAWER_ROLE, account) ||\\r\\n            hasRole(MASTER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get all role members for a specific role\\r\\n     * @param role The role to query\\r\\n     * @return members Array of addresses with the role\\r\\n     */\\r\\n    function getRoleMembers(\\r\\n        bytes32 role\\r\\n    ) external view returns (address[] memory members) {\\r\\n        return _roleMembers[role];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get number of members for a specific role\\r\\n     * @param role The role to query\\r\\n     * @return count Number of addresses with the role\\r\\n     */\\r\\n    function getRoleMemberCount(\\r\\n        bytes32 role\\r\\n    ) external view returns (uint256 count) {\\r\\n        return _roleMembers[role].length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Execute time-locked operation validation\\r\\n     * @param operationId The operation ID to validate\\r\\n     */\\r\\n    function executeTimeLockOperation(\\r\\n        bytes32 operationId\\r\\n    ) external onlyRole(MASTER_ADMIN_ROLE) onlyAfterTimelock(operationId) {\\r\\n        emit TimeLockOperationExecuted(operationId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if the system is in global pause state\\r\\n     * @return isPaused True if globally paused\\r\\n     */\\r\\n    function isGloballyPaused() external view returns (bool isPaused) {\\r\\n        return globalPause;\\r\\n    }\\r\\n\\r\\n    // ============= EXTERNAL VALIDATION FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Validate that caller has required role (called by other contracts)\\r\\n     * @param role The role to check\\r\\n     * @param account The account to validate\\r\\n     */\\r\\n    function validateRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) external view onlyAuthorizedContract {\\r\\n        require(\\r\\n            hasRole(role, account) || hasRole(MASTER_ADMIN_ROLE, account),\\r\\n            \\\"Access denied\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validate that system is not paused (called by other contracts)\\r\\n     */\\r\\n    function validateNotPaused() external view onlyAuthorizedContract {\\r\\n        require(!globalPause && !paused(), \\\"System paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override _grantRole to track role members\\r\\n     */\\r\\n    function _grantRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) internal override returns (bool) {\\r\\n        super._grantRole(role, account);\\r\\n\\r\\n        // Track role member for enumeration\\r\\n        if (_roleMemberIndex[role][account] == 0) {\\r\\n            _roleMembers[role].push(account);\\r\\n            _roleMemberIndex[role][account] = _roleMembers[role].length;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override _revokeRole to untrack role members\\r\\n     */\\r\\n    function _revokeRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) internal override returns (bool) {\\r\\n        super._revokeRole(role, account);\\r\\n\\r\\n        // Remove from role member tracking\\r\\n        uint256 index = _roleMemberIndex[role][account];\\r\\n        if (index > 0) {\\r\\n            uint256 lastIndex = _roleMembers[role].length;\\r\\n            address lastMember = _roleMembers[role][lastIndex - 1];\\r\\n\\r\\n            // Move last member to the position of the removed member\\r\\n            _roleMembers[role][index - 1] = lastMember;\\r\\n            _roleMemberIndex[role][lastMember] = index;\\r\\n\\r\\n            // Remove last element\\r\\n            _roleMembers[role].pop();\\r\\n            delete _roleMemberIndex[role][account];\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0fa63b562a209458f5838960171dc2a40198e14208332f6a742a7f399f4e7769\",\"license\":\"MIT\"},\"contracts/MooveTradingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"./MooveAccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MooveTradingManager\\r\\n * @dev Estensione per gestire il trading di NFT personalizzabili\\r\\n * @notice Gestisce commissioni, lock personalizzazioni e validazioni per il trading\\r\\n */\\r\\n\\r\\ninterface IMooveTradingManager {\\r\\n    function recordAuctionSale(\\r\\n        address nftContract,\\r\\n        uint256 tokenId,\\r\\n        address seller,\\r\\n        address buyer,\\r\\n        uint256 price\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract MooveTradingManager is ReentrancyGuard, Pausable {\\r\\n    // ============= STORAGE VARIABLES =============\\r\\n\\r\\n    /// @dev Reference to the access control contract\\r\\n    MooveAccessControl public immutable accessControl;\\r\\n\\r\\n    /// @dev Trading fee percentage (basis points: 100 = 1%)\\r\\n    uint256 public tradingFeePercentage = 250; // 2.5%\\r\\n\\r\\n    /// @dev Marketplace commission percentage (basis points)\\r\\n    uint256 public marketplaceFeePercentage = 100; // 1%\\r\\n\\r\\n    /// @dev Minimum trading fee in wei\\r\\n    uint256 public constant minimumTradingFee = 0.001 ether;\\r\\n\\r\\n    /// @dev Maximum trading fee percentage (10%)\\r\\n    uint256 public constant MAX_TRADING_FEE = 1000;\\r\\n\\r\\n    /// @dev Treasury address for collecting fees\\r\\n    address public treasury;\\r\\n\\r\\n    /// @dev Mapping to track NFT customization locks during trades\\r\\n    mapping(address => mapping(uint256 => bool)) public customizationLocked;\\r\\n\\r\\n    /// @dev Mapping to track authorized NFT contracts\\r\\n    mapping(address => bool) public authorizedNFTContracts;\\r\\n\\r\\n    /// @dev Mapping to track active sales\\r\\n    mapping(address => mapping(uint256 => SaleInfo)) public activeSales;\\r\\n\\r\\n    /// @dev Mapping to track trading statistics\\r\\n    mapping(address => TradingStats) public userTradingStats;\\r\\n\\r\\n    // ============= STRUCTS =============\\r\\n\\r\\n    struct SaleInfo {\\r\\n        address seller;\\r\\n        uint256 price;\\r\\n        uint256 listedAt;\\r\\n        bool isActive;\\r\\n        bool allowCustomization;\\r\\n    }\\r\\n\\r\\n    struct TradingStats {\\r\\n        uint256 totalSales;\\r\\n        uint256 totalPurchases;\\r\\n        uint256 volumeTraded;\\r\\n        uint256 feesEarned; // For sellers\\r\\n        uint256 feesPaid; // For buyers\\r\\n    }\\r\\n\\r\\n    struct TradeDetails {\\r\\n        address nftContract;\\r\\n        uint256 tokenId;\\r\\n        address seller;\\r\\n        address buyer;\\r\\n        uint256 price;\\r\\n        uint256 tradingFee;\\r\\n        uint256 marketplaceFee;\\r\\n        uint256 sellerProceeds;\\r\\n    }\\r\\n\\r\\n    // ============= EVENTS =============\\r\\n\\r\\n    event NFTPreparedForTrade(\\r\\n        address indexed nftContract,\\r\\n        uint256 indexed tokenId,\\r\\n        address indexed seller,\\r\\n        uint256 price,\\r\\n        bool allowCustomization\\r\\n    );\\r\\n\\r\\n    event NFTTradeCompleted(\\r\\n        address indexed nftContract,\\r\\n        uint256 indexed tokenId,\\r\\n        address indexed buyer,\\r\\n        address seller,\\r\\n        uint256 finalPrice,\\r\\n        uint256 tradingFee,\\r\\n        uint256 marketplaceFee\\r\\n    );\\r\\n\\r\\n    event CustomizationLockChanged(\\r\\n        address indexed nftContract,\\r\\n        uint256 indexed tokenId,\\r\\n        bool locked\\r\\n    );\\r\\n\\r\\n    event TradingFeesUpdated(\\r\\n        uint256 oldTradingFee,\\r\\n        uint256 newTradingFee,\\r\\n        uint256 oldMarketplaceFee,\\r\\n        uint256 newMarketplaceFee\\r\\n    );\\r\\n\\r\\n    event NFTContractAuthorized(address indexed nftContract, bool authorized);\\r\\n\\r\\n    event TreasuryUpdated(\\r\\n        address indexed oldTreasury,\\r\\n        address indexed newTreasury\\r\\n    );\\r\\n\\r\\n    event FeesWithdrawn(address indexed to, uint256 amount);\\r\\n\\r\\n    // ============= MODIFIERS =============\\r\\n\\r\\n    modifier onlyAccessControlRole(bytes32 role) {\\r\\n        accessControl.validateRole(role, msg.sender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAuthorizedNFT(address nftContract) {\\r\\n        require(\\r\\n            authorizedNFTContracts[nftContract],\\r\\n            \\\"NFT contract not authorized\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyWhenNotPaused() {\\r\\n        accessControl.validateNotPaused();\\r\\n        require(!paused(), \\\"Trading paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier validAddress(address addr) {\\r\\n        require(addr != address(0), \\\"Invalid address\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============= CONSTRUCTOR =============\\r\\n\\r\\n    constructor(\\r\\n        address _accessControl,\\r\\n        address _treasury\\r\\n    ) validAddress(_accessControl) validAddress(_treasury) {\\r\\n        accessControl = MooveAccessControl(_accessControl);\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    // ============= TRADING FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Prepare NFT for trading with customization lock options\\r\\n     * @param nftContract Address of the NFT contract\\r\\n     * @param tokenId Token ID to prepare for trading\\r\\n     * @param salePrice Price at which to list the NFT\\r\\n     * @param allowCustomization Whether to allow customization during sale period\\r\\n     */\\r\\n    function prepareNFTForTrade(\\r\\n        address nftContract,\\r\\n        uint256 tokenId,\\r\\n        uint256 salePrice,\\r\\n        bool allowCustomization\\r\\n    ) external onlyAuthorizedNFT(nftContract) onlyWhenNotPaused nonReentrant {\\r\\n        require(salePrice > 0, \\\"Invalid sale price\\\");\\r\\n\\r\\n        // Verify caller owns the NFT (this would need to be integrated with your NFT contract)\\r\\n        // For now, we assume the caller is authorized\\r\\n\\r\\n        // Lock customization if not allowed during sale\\r\\n        if (!allowCustomization) {\\r\\n            customizationLocked[nftContract][tokenId] = true;\\r\\n            emit CustomizationLockChanged(nftContract, tokenId, true);\\r\\n        }\\r\\n\\r\\n        // Create sale info\\r\\n        activeSales[nftContract][tokenId] = SaleInfo({\\r\\n            seller: msg.sender,\\r\\n            price: salePrice,\\r\\n            listedAt: block.timestamp,\\r\\n            isActive: true,\\r\\n            allowCustomization: allowCustomization\\r\\n        });\\r\\n\\r\\n        emit NFTPreparedForTrade(\\r\\n            nftContract,\\r\\n            tokenId,\\r\\n            msg.sender,\\r\\n            salePrice,\\r\\n            allowCustomization\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Execute NFT trade\\r\\n     * @param nftContract Address of the NFT contract\\r\\n     * @param tokenId Token ID to trade\\r\\n     */\\r\\n    function executeNFTTrade(\\r\\n        address nftContract,\\r\\n        uint256 tokenId\\r\\n    ) external payable nonReentrant {\\r\\n        SaleInfo storage sale = activeSales[nftContract][tokenId];\\r\\n        require(sale.isActive, \\\"Sale not active\\\");\\r\\n        require(msg.value == sale.price, \\\"Incorrect payment amount\\\");\\r\\n        require(msg.sender != sale.seller, \\\"Cannot buy your own NFT\\\");\\r\\n\\r\\n        // Update state first to prevent reentrancy\\r\\n        sale.isActive = false;\\r\\n        customizationLocked[nftContract][tokenId] = false;\\r\\n\\r\\n        // Calculate trade details\\r\\n        TradeDetails memory trade = _calculateTradeDetails(\\r\\n            nftContract,\\r\\n            tokenId,\\r\\n            sale.seller,\\r\\n            msg.sender,\\r\\n            sale.price\\r\\n        );\\r\\n\\r\\n        // Process payments\\r\\n        _processTradePayments(trade);\\r\\n\\r\\n        // Transfer NFT - use safeTransferFrom to prevent arbitrary from\\r\\n        IERC721(nftContract).safeTransferFrom(sale.seller, msg.sender, tokenId);\\r\\n\\r\\n        // Refund excess payment\\r\\n        if (msg.value > sale.price) {\\r\\n            (bool refundSuccess, ) = payable(msg.sender).call{value: msg.value - sale.price}(\\\"\\\");\\r\\n            require(refundSuccess, \\\"Refund failed\\\");\\r\\n        }\\r\\n\\r\\n        // Update statistics\\r\\n        _updateTradingStats(trade);\\r\\n\\r\\n        emit NFTTradeCompleted(\\r\\n            nftContract,\\r\\n            tokenId,\\r\\n            msg.sender,\\r\\n            sale.seller,\\r\\n            sale.price,\\r\\n            trade.tradingFee,\\r\\n            trade.marketplaceFee\\r\\n        );\\r\\n\\r\\n        emit CustomizationLockChanged(nftContract, tokenId, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Cancel NFT sale and unlock customization\\r\\n     * @param nftContract Address of the NFT contract\\r\\n     * @param tokenId Token ID to cancel sale for\\r\\n     */\\r\\n    function cancelNFTSale(\\r\\n        address nftContract,\\r\\n        uint256 tokenId\\r\\n    ) external onlyAuthorizedNFT(nftContract) nonReentrant {\\r\\n        SaleInfo storage sale = activeSales[nftContract][tokenId];\\r\\n        require(sale.isActive, \\\"NFT not for sale\\\");\\r\\n        require(sale.seller == msg.sender, \\\"Not the seller\\\");\\r\\n\\r\\n        // Unlock customization\\r\\n        customizationLocked[nftContract][tokenId] = false;\\r\\n\\r\\n        // Deactivate sale\\r\\n        sale.isActive = false;\\r\\n\\r\\n        emit CustomizationLockChanged(nftContract, tokenId, false);\\r\\n    }\\r\\n\\r\\n    // ============= CUSTOMIZATION MANAGEMENT =============\\r\\n\\r\\n    /**\\r\\n     * @dev Lock NFT customization (called by customization contract)\\r\\n     * @param nftContract Address of the NFT contract\\r\\n     * @param tokenId Token ID to lock\\r\\n     */\\r\\n    function lockCustomization(\\r\\n        address nftContract,\\r\\n        uint256 tokenId\\r\\n    )\\r\\n        external\\r\\n        onlyAccessControlRole(accessControl.CUSTOMIZATION_ADMIN_ROLE())\\r\\n        onlyAuthorizedNFT(nftContract)\\r\\n    {\\r\\n        customizationLocked[nftContract][tokenId] = true;\\r\\n        emit CustomizationLockChanged(nftContract, tokenId, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unlock NFT customization\\r\\n     * @param nftContract Address of the NFT contract\\r\\n     * @param tokenId Token ID to unlock\\r\\n     */\\r\\n    function unlockCustomization(\\r\\n        address nftContract,\\r\\n        uint256 tokenId\\r\\n    )\\r\\n        external\\r\\n        onlyAccessControlRole(accessControl.CUSTOMIZATION_ADMIN_ROLE())\\r\\n        onlyAuthorizedNFT(nftContract)\\r\\n    {\\r\\n        customizationLocked[nftContract][tokenId] = false;\\r\\n        emit CustomizationLockChanged(nftContract, tokenId, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if NFT customization is locked\\r\\n     * @param nftContract Address of the NFT contract\\r\\n     * @param tokenId Token ID to check\\r\\n     * @return locked True if customization is locked\\r\\n     */\\r\\n    function isCustomizationLocked(\\r\\n        address nftContract,\\r\\n        uint256 tokenId\\r\\n    ) external view returns (bool locked) {\\r\\n        return customizationLocked[nftContract][tokenId];\\r\\n    }\\r\\n\\r\\n    // ============= ADMIN FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Update trading fees\\r\\n     * @param newTradingFee New trading fee percentage (basis points)\\r\\n     * @param newMarketplaceFee New marketplace fee percentage (basis points)\\r\\n     */\\r\\n    function updateTradingFees(\\r\\n        uint256 newTradingFee,\\r\\n        uint256 newMarketplaceFee\\r\\n    ) external onlyAccessControlRole(accessControl.PRICE_MANAGER_ROLE()) {\\r\\n        require(newTradingFee <= MAX_TRADING_FEE, \\\"Trading fee too high\\\");\\r\\n        require(\\r\\n            newMarketplaceFee <= MAX_TRADING_FEE,\\r\\n            \\\"Marketplace fee too high\\\"\\r\\n        );\\r\\n\\r\\n        uint256 oldTradingFee = tradingFeePercentage;\\r\\n        uint256 oldMarketplaceFee = marketplaceFeePercentage;\\r\\n\\r\\n        tradingFeePercentage = newTradingFee;\\r\\n        marketplaceFeePercentage = newMarketplaceFee;\\r\\n\\r\\n        emit TradingFeesUpdated(\\r\\n            oldTradingFee,\\r\\n            newTradingFee,\\r\\n            oldMarketplaceFee,\\r\\n            newMarketplaceFee\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Authorize NFT contract for trading\\r\\n     * @param nftContract Address of the NFT contract\\r\\n     */\\r\\n    function authorizeNFTContract(\\r\\n        address nftContract\\r\\n    )\\r\\n        external\\r\\n        onlyAccessControlRole(accessControl.MASTER_ADMIN_ROLE())\\r\\n        validAddress(nftContract)\\r\\n    {\\r\\n        require(nftContract.code.length > 0, \\\"Not a contract\\\");\\r\\n        authorizedNFTContracts[nftContract] = true;\\r\\n        emit NFTContractAuthorized(nftContract, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deauthorize NFT contract for trading\\r\\n     * @param nftContract Address of the NFT contract\\r\\n     */\\r\\n    function deauthorizeNFTContract(\\r\\n        address nftContract\\r\\n    ) external onlyAccessControlRole(accessControl.MASTER_ADMIN_ROLE()) {\\r\\n        authorizedNFTContracts[nftContract] = false;\\r\\n        emit NFTContractAuthorized(nftContract, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update treasury address\\r\\n     * @param newTreasury New treasury address\\r\\n     */\\r\\n    function updateTreasury(\\r\\n        address newTreasury\\r\\n    )\\r\\n        external\\r\\n        onlyAccessControlRole(accessControl.MASTER_ADMIN_ROLE())\\r\\n        validAddress(newTreasury)\\r\\n    {\\r\\n        address oldTreasury = treasury;\\r\\n        treasury = newTreasury;\\r\\n        emit TreasuryUpdated(oldTreasury, newTreasury);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency pause trading\\r\\n     */\\r\\n    function pauseTrading()\\r\\n        external\\r\\n        onlyAccessControlRole(accessControl.PAUSER_ROLE())\\r\\n    {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unpause trading\\r\\n     */\\r\\n    function unpauseTrading()\\r\\n        external\\r\\n        onlyAccessControlRole(accessControl.MASTER_ADMIN_ROLE())\\r\\n    {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw accumulated fees\\r\\n     * @param to Address to send fees to\\r\\n     * @param amount Amount to withdraw\\r\\n     */\\r\\n    function withdrawFees(\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    )\\r\\n        external\\r\\n        onlyAccessControlRole(accessControl.WITHDRAWER_ROLE())\\r\\n        validAddress(to)\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(to != address(this), \\\"Cannot withdraw to self\\\");\\r\\n        require(to.code.length == 0, \\\"Cannot withdraw to contract\\\");\\r\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\r\\n\\r\\n        // Use call instead of transfer for better gas efficiency and to prevent reentrancy\\r\\n        (bool success, ) = payable(to).call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        emit FeesWithdrawn(to, amount);\\r\\n    }\\r\\n\\r\\n    // ============= VIEW FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Get sale information for an NFT\\r\\n     * @param nftContract Address of the NFT contract\\r\\n     * @param tokenId Token ID\\r\\n     * @return sale Sale information\\r\\n     */\\r\\n    function getSaleInfo(\\r\\n        address nftContract,\\r\\n        uint256 tokenId\\r\\n    ) external view returns (SaleInfo memory sale) {\\r\\n        return activeSales[nftContract][tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get trading statistics for a user\\r\\n     * @param user User address\\r\\n     * @return stats Trading statistics\\r\\n     */\\r\\n    function getTradingStats(\\r\\n        address user\\r\\n    ) external view returns (TradingStats memory stats) {\\r\\n        return userTradingStats[user];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate trade fees for a given price\\r\\n     * @param price Trade price\\r\\n     * @return tradingFee Trading fee amount\\r\\n     * @return marketplaceFee Marketplace fee amount\\r\\n     * @return sellerProceeds Amount seller receives\\r\\n     */\\r\\n    function calculateTradeFees(\\r\\n        uint256 price\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 tradingFee,\\r\\n            uint256 marketplaceFee,\\r\\n            uint256 sellerProceeds\\r\\n        )\\r\\n    {\\r\\n        tradingFee = (price * tradingFeePercentage) / 10000;\\r\\n        if (tradingFee < minimumTradingFee) {\\r\\n            tradingFee = minimumTradingFee;\\r\\n        }\\r\\n\\r\\n        marketplaceFee = (price * marketplaceFeePercentage) / 10000;\\r\\n        sellerProceeds = price - tradingFee - marketplaceFee;\\r\\n    }\\r\\n\\r\\n    // ============= INTERNAL FUNCTIONS =============\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate detailed trade information\\r\\n     */\\r\\n    function _calculateTradeDetails(\\r\\n        address nftContract,\\r\\n        uint256 tokenId,\\r\\n        address seller,\\r\\n        address buyer,\\r\\n        uint256 price\\r\\n    ) internal view returns (TradeDetails memory) {\\r\\n        (\\r\\n            uint256 tradingFee,\\r\\n            uint256 marketplaceFee,\\r\\n            uint256 sellerProceeds\\r\\n        ) = this.calculateTradeFees(price);\\r\\n\\r\\n        return\\r\\n            TradeDetails({\\r\\n                nftContract: nftContract,\\r\\n                tokenId: tokenId,\\r\\n                seller: seller,\\r\\n                buyer: buyer,\\r\\n                price: price,\\r\\n                tradingFee: tradingFee,\\r\\n                marketplaceFee: marketplaceFee,\\r\\n                sellerProceeds: sellerProceeds\\r\\n            });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update trading statistics for buyer and seller\\r\\n     */\\r\\n    function _updateTradingStats(TradeDetails memory trade) internal {\\r\\n        // Update seller stats\\r\\n        TradingStats storage sellerStats = userTradingStats[trade.seller];\\r\\n        sellerStats.totalSales++;\\r\\n        sellerStats.volumeTraded += trade.price;\\r\\n        sellerStats.feesEarned += trade.sellerProceeds;\\r\\n\\r\\n        // Update buyer stats\\r\\n        TradingStats storage buyerStats = userTradingStats[trade.buyer];\\r\\n        buyerStats.totalPurchases++;\\r\\n        buyerStats.volumeTraded += trade.price;\\r\\n        buyerStats.feesPaid += trade.tradingFee + trade.marketplaceFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Process payments for a trade\\r\\n     */\\r\\n    function _processTradePayments(TradeDetails memory trade) internal {\\r\\n        require(trade.seller != address(0), \\\"Invalid seller address\\\");\\r\\n        require(trade.seller.code.length == 0, \\\"Seller cannot be a contract\\\");\\r\\n        require(trade.sellerProceeds > 0, \\\"Invalid seller proceeds\\\");\\r\\n        \\r\\n        // Send proceeds to seller using call for better security\\r\\n        (bool success, ) = payable(trade.seller).call{value: trade.sellerProceeds}(\\\"\\\");\\r\\n        require(success, \\\"Transfer to seller failed\\\");\\r\\n\\r\\n        // Keep fees in contract for later withdrawal to treasury\\r\\n        // Trading fee and marketplace fee stay in contract balance\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency withdraw all funds to treasury\\r\\n     */\\r\\n    function emergencyWithdraw() external onlyAccessControlRole(accessControl.MASTER_ADMIN_ROLE()) nonReentrant {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0, \\\"No funds to withdraw\\\");\\r\\n\\r\\n        // Use call instead of transfer for better gas efficiency and to prevent reentrancy\\r\\n        (bool success, ) = payable(treasury).call{value: balance}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        emit FeesWithdrawn(treasury, balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Receive function to accept ETH\\r\\n     */\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x1bbc03d86a7096bec0d8cbad06f1d8e595c4fc46c01f0b023f85cf02357d038f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200010f57601f620021d338819003918201601f19168301916001600160401b03831184841017620001145780849260409485528339810103126200010f576200005a602062000052836200012a565b92016200012a565b600160005560fa60025560646003556001600160a01b039182169190620000838315156200013f565b1690620000928215156200013f565b608052600480546001600160a01b03191691909117905560405161205490816200017f82396080518181816101b4015281816103fe0152818161065c0152818161091a015281816110180152818161123701528181611375015281816114ce0152818161184501528181611a0f01528181611ba60152611bf50152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200010f57565b156200014757565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fdfe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c8063087db5b814611d055780631031e36e14611bd557806313007d5514611b905780631de403e314611b2a5780631fdeab3614611b085780633a1cea5f146119da5780633c5e987e1461195f578063456068d2146118235780634adadddf146118055780634c389cda146108965780635a117316146117875780635c975abb1461176457806361d027b31461173b578063730889ab1461161257806379e49b36146114965780637f51bb1f1461134257806388a71435146111fc5780638aaa8f24146111bd57806393b1c69c14610ff75780639abddd9e14610a1f5780639fc80b72146108df578063a3629ff314610896578063ad3b1b4714610621578063b2356ad414610603578063cf48279414610569578063db2e21bc146103d0578063eeb7f65a146103b35763f285f9761461015b575061000e565b346103b05760803660031901126103b057610174611dbb565b602435604435906064359283159384158091036103ac5760018060a01b0380921691828752602090600682526101b060ff60408a205416611dd1565b87817f000000000000000000000000000000000000000000000000000000000000000016803b156103a857816004916040519283809263e97868a560e01b82525afa801561039d57610385575b505060019660ff88541661034f57610213611ea2565b8615610315576102d9575b87600360405161022d81611e1d565b338152848101898152604082019042825260608301958c8752604060808501968a88528b815260078a528181208d82528a52209351166bffffffffffffffffffffffff60a01b845416178355518b83015551600282015501915115159060ff61ff0084549251151560081b1692169061ffff1916171790556040519485528401527fa7d77964fd3cac14d7fb9e30959185aa38f966523e03569dcb935d16a33ced9660403394a4815580f35b83885260058252604088208589528252604088208760ff198254161790558484600080516020611fff833981519152846040518b8152a361021e565b60405162461bcd60e51b8152600481018490526012602482015271496e76616c69642073616c6520707269636560701b6044820152606490fd5b60405162461bcd60e51b815260048101849052600e60248201526d151c98591a5b99c81c185d5cd95960921b6044820152606490fd5b61038e90611e4f565b6103995787386101fd565b8780fd5b6040513d84823e3d90fd5b5080fd5b8580fd5b80fd5b50346103b057806003193601126103b05760206040516103e88152f35b50346103b057806003193601126103b0576040516367ef9e2760e11b81526001600160a01b039060209083907f000000000000000000000000000000000000000000000000000000000000000084168382600481845afa91821561055e578392610527575b50803b156105235760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d5761050f575b5050610478611ea2565b479182156104d35790816104c085808080887fc0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a98600454165af16104ba611ee8565b50611f66565b6004541692604051908152a26001815580f35b60405162461bcd60e51b81526004810183905260146024820152734e6f2066756e647320746f20776974686472617760601b6044820152606490fd5b61051890611e4f565b61052357823861046e565b8280fd5b925090508282813d8111610557575b6105408183611e80565b81010312610552578491519038610435565b600080fd5b503d610536565b6040513d85823e3d90fd5b50346103b05760203660031901126103b057604060a091610588611dbb565b610590611fa4565b50600180851b031681526008602052206040516105ac81611e1d565b81549182825260018101546020830190815260028201549060408401918252608060046003850154946060870195865201549401938452604051948552516020850152516040840152516060830152516080820152f35b50346103b057806003193601126103b0576020600254604051908152f35b50346103b05760403660031901126103b05761063b611dbb565b6040516385f438c160e01b8152602090602435906001600160a01b039085907f000000000000000000000000000000000000000000000000000000000000000083168582600481845afa91821561055e578392610864575b50803b156105235760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d5761084c575b50508316926106dc841515611f28565b6106e4611ea2565b308414610807573b6107c257801561077d57478111610741579081610733858080807fc0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a97895af16104ba611ee8565b604051908152a26001815580f35b60405162461bcd60e51b8152600481018390526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b60405162461bcd60e51b815260048101839052601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606490fd5b60405162461bcd60e51b815260048101839052601b60248201527f43616e6e6f7420776974686472617720746f20636f6e747261637400000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601760248201527f43616e6e6f7420776974686472617720746f2073656c660000000000000000006044820152606490fd5b61085590611e4f565b6108605784386106cc565b8480fd5b925090508482813d811161088f575b61087d8183611e80565b81010312610552578691519038610693565b503d610873565b50346103b05760403660031901126103b05760209060ff906040906001600160a01b036108c1611dbb565b16815260058452818120602435825284522054166040519015158152f35b50346103b05760403660031901126103b0576108f9611dbb565b60405163a29d671760e01b8152602435916020916001600160a01b039085907f000000000000000000000000000000000000000000000000000000000000000083168582600481845afa91821561055e5783926109ed575b50803b156105235760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d576109d9575b5050600080516020611fff833981519152911691828552600681526109b560ff604087205416611dd1565b8285526005815260408086208587528252808620805460ff1916905551858152a380f35b6109e290611e4f565b61086057843861098a565b925090508482813d8111610a18575b610a068183611e80565b81010312610552578691519038610951565b503d6109fc565b5060403660031901126103b057610a34611dbb565b610a3c611ea2565b6001600160a01b0381168252600760209081526040808420602435855290915282206003810180549060ff821615610fc05760018301543403610f7b5782546001600160a01b03163314610f365760ff19809216905560018060a01b038316845260056020526040842060243585526020526040842090815416905560018060a01b038154166001820154908460e0604051610ad781611e63565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201520152604051632d08b98b60e11b8152826004820152606081602481305afa908115610f2b578687918893610ee9575b5060405194610b3b86611e63565b6001600160a01b0388168652602435602087015260408601859052336060870152608086015260a085015260c084015260e083015215610eab5760408101516001600160a01b03163b610e665760e081015115610e21578380808060018060a01b0360408601511660e0860151905af1610bb3611ee8565b5015610ddc57815484906001600160a01b039081169085163b156103a857604051632142170760e11b81526004810191909152336024808301919091523560448201528181606481836001600160a01b038a165af1801561039d57610dc4575b506001830154803411610d6a575b50506040818101516001600160a01b03168552600860205284208054610c4690611fe2565b81556080820151610c5c60028301918254611ff1565b9055610c72600360e08401519201918254611ff1565b905560608101516001600160a01b03168452600860205260408420600181018054610c9c90611fe2565b90556080820151610cb260028301918254611ff1565b9055610cd66004610ccc60a085015160c086015190611ff1565b9201918254611ff1565b90556001808060a01b038354169201549060c060a0820151910151916040519384526020840152604083015260608201523390602435907f042814a68a3c8ac606aaf695f49ac1f1c14720b8d86ab01fba86ebbd8888111e608060018060a01b03861692a4604051828152602435916001600160a01b031690600080516020611fff83398151915290602090a36001815580f35b8180610d77819334611ec5565b335af1610d82611ee8565b5015610d8f578338610c21565b60405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152606490fd5b610dcd90611e4f565b610dd8578338610c13565b8380fd5b60405162461bcd60e51b815260206004820152601960248201527f5472616e7366657220746f2073656c6c6572206661696c6564000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f496e76616c69642073656c6c65722070726f63656564730000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f53656c6c65722063616e6e6f74206265206120636f6e747261637400000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275496e76616c69642073656c6c6572206164647265737360501b6044820152606490fd5b925050506060813d606011610f23575b81610f0660609383611e80565b810103126103ac5780516020820151604090920151919038610b2d565b3d9150610ef9565b6040513d88823e3d90fd5b60405162461bcd60e51b815260206004820152601760248201527f43616e6e6f742062757920796f7572206f776e204e46540000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f496e636f7272656374207061796d656e7420616d6f756e7400000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152600f60248201526e53616c65206e6f742061637469766560881b6044820152606490fd5b50346103b05760403660031901126103b05760043560243560018060a01b037f000000000000000000000000000000000000000000000000000000000000000016836040516331aab75960e01b81526020928382600481845afa91821561055e57839261118b575b50803b156105235760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d57611177575b50506103e880841161113b5782116110f757916080917f74f05c870859436b4301e4284753dc4420eb6b0c26e29668cb063105ea29a3e6936002549260035491816002558360035560405194855284015260408301526060820152a180f35b6064906040519062461bcd60e51b82526004820152601860248201527f4d61726b6574706c6163652066656520746f6f206869676800000000000000006044820152fd5b60405162461bcd60e51b81526004810183905260146024820152730a8e4c2c8d2dcce40cccaca40e8dede40d0d2ced60631b6044820152606490fd5b61118090611e4f565b610dd8578338611098565b925090508282813d81116111b6575b6111a48183611e80565b8101031261055257859151903861105f565b503d61119a565b50346103b05760203660031901126103b05760209060ff906040906001600160a01b036111e8611dbb565b168152600684522054166040519015158152f35b50346103b05760403660031901126103b057611216611dbb565b60405163a29d671760e01b8152602435916020916001600160a01b039085907f000000000000000000000000000000000000000000000000000000000000000083168582600481845afa91821561055e578392611310575b50803b156105235760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d576112fc575b5050600080516020611fff833981519152911691828552600681526112d260ff604087205416611dd1565b8285526005815260408520848652815260408520600160ff1982541617905560405160018152a380f35b61130590611e4f565b6108605784386112a7565b925090508482813d811161133b575b6113298183611e80565b8101031261055257869151903861126e565b503d61131f565b50346103b05760203660031901126103b05761135c611dbb565b6040516367ef9e2760e11b81526001600160a01b0391837f00000000000000000000000000000000000000000000000000000000000000008416602084600481845afa93841561039d578294611460575b50803b156103a85760405163101a2a3160e31b815260048101949094523360248501528190849060449082905afa92831561145357849361143a575b505016906113f8821515611f28565b600454826bffffffffffffffffffffffff60a01b821617600455167f4ab5be82436d353e61ca18726e984e561f5c1cc7c6d38b29d2553c790434705a8380a380f35b61144691929350611e4f565b61052357819083386113e9565b50604051903d90823e3d90fd5b915092506020813d821161148e575b8161147c60209383611e80565b810103126105525784905192386113ad565b3d915061146f565b50346103b0576020806003193601126103a8576114b1611dbb565b6040516367ef9e2760e11b81529091906001600160a01b039084907f000000000000000000000000000000000000000000000000000000000000000083168482600481845afa91821561055e5783926115e0575b50803b156105235760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d576115cc575b505082169161154e831515611f28565b3b15611597577f516d8f02c985d8f15895674201bff0b76f3acd517f848a6d0bc7e77d7b87d42d908284526006815260408420600160ff1982541617905560405160018152a280f35b6064906040519062461bcd60e51b82526004820152600e60248201526d139bdd08184818dbdb9d1c9858dd60921b6044820152fd5b6115d590611e4f565b610dd857833861153e565b925090508382813d811161160b575b6115f98183611e80565b81010312610552578591519038611505565b503d6115ef565b50346103b05760403660031901126103b05761162c611dbb565b6001600160a01b0390811680835260066020908152604084205460243593906116579060ff16611dd1565b61165f611ea2565b828552600782526040852084865282526040852090600382019160ff8354161561170357541633036116cd5790600080516020611fff83398151915291838652600582526040862085875282526040862060ff19908181541690558154169055604051858152a36001815580f35b60405162461bcd60e51b815260048101839052600e60248201526d2737ba103a34329039b2b63632b960911b6044820152606490fd5b60405162461bcd60e51b815260048101859052601060248201526f4e4654206e6f7420666f722073616c6560801b6044820152606490fd5b50346103b057806003193601126103b0576004546040516001600160a01b039091168152602090f35b50346103b057806003193601126103b057602060ff600154166040519015158152f35b50346103b05760203660031901126103b057606090600435905061271090816117b260025483611fcf565b049166038d7ea4c680008084106117fb575b5082916117e36117e8926117da60035484611fcf565b04938492611ec5565b611ec5565b9060405192835260208301526040820152f35b92506117e86117c4565b50346103b057806003193601126103b0576020600354604051908152f35b50346103b057806003193601126103b0576040516367ef9e2760e11b815281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa91821561055e578392611929575b50803b156119255760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d57611911575b505060015460ff8116156118ff5760ff19166001557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b604051638dfc202b60e01b8152600490fd5b61191a90611e4f565b6103b05780386118bd565b5050fd5b925090506020823d8211611957575b8161194560209383611e80565b81010312610552578291519038611884565b3d9150611938565b50346103b05760403660031901126103b05760a09060ff6040611980611dbb565b92600180861b038094168152600760205281812060243582526020522091825416916001810154906003600282015491015491604051948552602085015260408401528181161515606084015260081c1615156080820152f35b50346103b0576020806003193601126103a8576119f5611dbb565b6040516367ef9e2760e11b81526001600160a01b039084907f000000000000000000000000000000000000000000000000000000000000000083168582600481845afa91821561055e578392611ad6575b50803b156105235760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d57611ac2575b50507f516d8f02c985d8f15895674201bff0b76f3acd517f848a6d0bc7e77d7b87d42d911691828452600681526040842060ff198154169055604051848152a280f35b611acb90611e4f565b610dd8578338611a7f565b925090508482813d8111611b01575b611aef8183611e80565b81010312610552578591519038611a46565b503d611ae5565b50346103b057806003193601126103b057602060405166038d7ea4c680008152f35b50346103b05760203660031901126103b05760a0906040906001600160a01b03611b52611dbb565b168152600860205220805490600181015490600281015460046003830154920154926040519485526020850152604084015260608301526080820152f35b50346103b057806003193601126103b0576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346103b057806003193601126103b05760405163e63ab1e960e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908290602081600481865afa90811561039d578291611cd4575b50823b156103a85760405163101a2a3160e31b8152600481019190915233602482015291829060449082905afa801561039d57611cc5575b5060015460ff8116611cb35760019060ff1916176001557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b60405163d93c066560e01b8152600490fd5b611cce90611e4f565b38611c6f565b90506020813d8211611cfd575b81611cee60209383611e80565b810103126103a8575138611c37565b3d9150611ce1565b50346103b05760403660031901126103b05760a0906040611d24611dbb565b91611d2d611fa4565b50600180851b038093168152600760205281812060243582526020522060405191611d5783611e1d565b815416918281526001820154916020820192835260036002820154916040840192835201549260ff6080606085019482871615158652019460081c161515845260405194855251602085015251604084015251151560608301525115156080820152f35b600435906001600160a01b038216820361055257565b15611dd857565b60405162461bcd60e51b815260206004820152601b60248201527f4e465420636f6e7472616374206e6f7420617574686f72697a656400000000006044820152606490fd5b60a0810190811067ffffffffffffffff821117611e3957604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111611e3957604052565b610100810190811067ffffffffffffffff821117611e3957604052565b90601f8019910116810190811067ffffffffffffffff821117611e3957604052565b600260005414611eb3576002600055565b604051633ee5aeb560e01b8152600490fd5b91908203918211611ed257565b634e487b7160e01b600052601160045260246000fd5b3d15611f23573d9067ffffffffffffffff8211611e395760405191611f17601f8201601f191660200184611e80565b82523d6000602084013e565b606090565b15611f2f57565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b15611f6d57565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b60405190611fb182611e1d565b60006080838281528260208201528260408201528260608201520152565b81810292918115918404141715611ed257565b6000198114611ed25760010190565b91908201809211611ed25756fecaf430257d95f6a3fa7db65e0b0b191906b28d6cf1c91aba4806db25a153ee9fa2646970667358221220b7fccb61725edc4039d39ea8d915f37c201022a2bfcf995c9d40c9cb7a03679564736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c8063087db5b814611d055780631031e36e14611bd557806313007d5514611b905780631de403e314611b2a5780631fdeab3614611b085780633a1cea5f146119da5780633c5e987e1461195f578063456068d2146118235780634adadddf146118055780634c389cda146108965780635a117316146117875780635c975abb1461176457806361d027b31461173b578063730889ab1461161257806379e49b36146114965780637f51bb1f1461134257806388a71435146111fc5780638aaa8f24146111bd57806393b1c69c14610ff75780639abddd9e14610a1f5780639fc80b72146108df578063a3629ff314610896578063ad3b1b4714610621578063b2356ad414610603578063cf48279414610569578063db2e21bc146103d0578063eeb7f65a146103b35763f285f9761461015b575061000e565b346103b05760803660031901126103b057610174611dbb565b602435604435906064359283159384158091036103ac5760018060a01b0380921691828752602090600682526101b060ff60408a205416611dd1565b87817f000000000000000000000000000000000000000000000000000000000000000016803b156103a857816004916040519283809263e97868a560e01b82525afa801561039d57610385575b505060019660ff88541661034f57610213611ea2565b8615610315576102d9575b87600360405161022d81611e1d565b338152848101898152604082019042825260608301958c8752604060808501968a88528b815260078a528181208d82528a52209351166bffffffffffffffffffffffff60a01b845416178355518b83015551600282015501915115159060ff61ff0084549251151560081b1692169061ffff1916171790556040519485528401527fa7d77964fd3cac14d7fb9e30959185aa38f966523e03569dcb935d16a33ced9660403394a4815580f35b83885260058252604088208589528252604088208760ff198254161790558484600080516020611fff833981519152846040518b8152a361021e565b60405162461bcd60e51b8152600481018490526012602482015271496e76616c69642073616c6520707269636560701b6044820152606490fd5b60405162461bcd60e51b815260048101849052600e60248201526d151c98591a5b99c81c185d5cd95960921b6044820152606490fd5b61038e90611e4f565b6103995787386101fd565b8780fd5b6040513d84823e3d90fd5b5080fd5b8580fd5b80fd5b50346103b057806003193601126103b05760206040516103e88152f35b50346103b057806003193601126103b0576040516367ef9e2760e11b81526001600160a01b039060209083907f000000000000000000000000000000000000000000000000000000000000000084168382600481845afa91821561055e578392610527575b50803b156105235760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d5761050f575b5050610478611ea2565b479182156104d35790816104c085808080887fc0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a98600454165af16104ba611ee8565b50611f66565b6004541692604051908152a26001815580f35b60405162461bcd60e51b81526004810183905260146024820152734e6f2066756e647320746f20776974686472617760601b6044820152606490fd5b61051890611e4f565b61052357823861046e565b8280fd5b925090508282813d8111610557575b6105408183611e80565b81010312610552578491519038610435565b600080fd5b503d610536565b6040513d85823e3d90fd5b50346103b05760203660031901126103b057604060a091610588611dbb565b610590611fa4565b50600180851b031681526008602052206040516105ac81611e1d565b81549182825260018101546020830190815260028201549060408401918252608060046003850154946060870195865201549401938452604051948552516020850152516040840152516060830152516080820152f35b50346103b057806003193601126103b0576020600254604051908152f35b50346103b05760403660031901126103b05761063b611dbb565b6040516385f438c160e01b8152602090602435906001600160a01b039085907f000000000000000000000000000000000000000000000000000000000000000083168582600481845afa91821561055e578392610864575b50803b156105235760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d5761084c575b50508316926106dc841515611f28565b6106e4611ea2565b308414610807573b6107c257801561077d57478111610741579081610733858080807fc0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a97895af16104ba611ee8565b604051908152a26001815580f35b60405162461bcd60e51b8152600481018390526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b60405162461bcd60e51b815260048101839052601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606490fd5b60405162461bcd60e51b815260048101839052601b60248201527f43616e6e6f7420776974686472617720746f20636f6e747261637400000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601760248201527f43616e6e6f7420776974686472617720746f2073656c660000000000000000006044820152606490fd5b61085590611e4f565b6108605784386106cc565b8480fd5b925090508482813d811161088f575b61087d8183611e80565b81010312610552578691519038610693565b503d610873565b50346103b05760403660031901126103b05760209060ff906040906001600160a01b036108c1611dbb565b16815260058452818120602435825284522054166040519015158152f35b50346103b05760403660031901126103b0576108f9611dbb565b60405163a29d671760e01b8152602435916020916001600160a01b039085907f000000000000000000000000000000000000000000000000000000000000000083168582600481845afa91821561055e5783926109ed575b50803b156105235760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d576109d9575b5050600080516020611fff833981519152911691828552600681526109b560ff604087205416611dd1565b8285526005815260408086208587528252808620805460ff1916905551858152a380f35b6109e290611e4f565b61086057843861098a565b925090508482813d8111610a18575b610a068183611e80565b81010312610552578691519038610951565b503d6109fc565b5060403660031901126103b057610a34611dbb565b610a3c611ea2565b6001600160a01b0381168252600760209081526040808420602435855290915282206003810180549060ff821615610fc05760018301543403610f7b5782546001600160a01b03163314610f365760ff19809216905560018060a01b038316845260056020526040842060243585526020526040842090815416905560018060a01b038154166001820154908460e0604051610ad781611e63565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201520152604051632d08b98b60e11b8152826004820152606081602481305afa908115610f2b578687918893610ee9575b5060405194610b3b86611e63565b6001600160a01b0388168652602435602087015260408601859052336060870152608086015260a085015260c084015260e083015215610eab5760408101516001600160a01b03163b610e665760e081015115610e21578380808060018060a01b0360408601511660e0860151905af1610bb3611ee8565b5015610ddc57815484906001600160a01b039081169085163b156103a857604051632142170760e11b81526004810191909152336024808301919091523560448201528181606481836001600160a01b038a165af1801561039d57610dc4575b506001830154803411610d6a575b50506040818101516001600160a01b03168552600860205284208054610c4690611fe2565b81556080820151610c5c60028301918254611ff1565b9055610c72600360e08401519201918254611ff1565b905560608101516001600160a01b03168452600860205260408420600181018054610c9c90611fe2565b90556080820151610cb260028301918254611ff1565b9055610cd66004610ccc60a085015160c086015190611ff1565b9201918254611ff1565b90556001808060a01b038354169201549060c060a0820151910151916040519384526020840152604083015260608201523390602435907f042814a68a3c8ac606aaf695f49ac1f1c14720b8d86ab01fba86ebbd8888111e608060018060a01b03861692a4604051828152602435916001600160a01b031690600080516020611fff83398151915290602090a36001815580f35b8180610d77819334611ec5565b335af1610d82611ee8565b5015610d8f578338610c21565b60405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152606490fd5b610dcd90611e4f565b610dd8578338610c13565b8380fd5b60405162461bcd60e51b815260206004820152601960248201527f5472616e7366657220746f2073656c6c6572206661696c6564000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f496e76616c69642073656c6c65722070726f63656564730000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f53656c6c65722063616e6e6f74206265206120636f6e747261637400000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275496e76616c69642073656c6c6572206164647265737360501b6044820152606490fd5b925050506060813d606011610f23575b81610f0660609383611e80565b810103126103ac5780516020820151604090920151919038610b2d565b3d9150610ef9565b6040513d88823e3d90fd5b60405162461bcd60e51b815260206004820152601760248201527f43616e6e6f742062757920796f7572206f776e204e46540000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f496e636f7272656374207061796d656e7420616d6f756e7400000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152600f60248201526e53616c65206e6f742061637469766560881b6044820152606490fd5b50346103b05760403660031901126103b05760043560243560018060a01b037f000000000000000000000000000000000000000000000000000000000000000016836040516331aab75960e01b81526020928382600481845afa91821561055e57839261118b575b50803b156105235760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d57611177575b50506103e880841161113b5782116110f757916080917f74f05c870859436b4301e4284753dc4420eb6b0c26e29668cb063105ea29a3e6936002549260035491816002558360035560405194855284015260408301526060820152a180f35b6064906040519062461bcd60e51b82526004820152601860248201527f4d61726b6574706c6163652066656520746f6f206869676800000000000000006044820152fd5b60405162461bcd60e51b81526004810183905260146024820152730a8e4c2c8d2dcce40cccaca40e8dede40d0d2ced60631b6044820152606490fd5b61118090611e4f565b610dd8578338611098565b925090508282813d81116111b6575b6111a48183611e80565b8101031261055257859151903861105f565b503d61119a565b50346103b05760203660031901126103b05760209060ff906040906001600160a01b036111e8611dbb565b168152600684522054166040519015158152f35b50346103b05760403660031901126103b057611216611dbb565b60405163a29d671760e01b8152602435916020916001600160a01b039085907f000000000000000000000000000000000000000000000000000000000000000083168582600481845afa91821561055e578392611310575b50803b156105235760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d576112fc575b5050600080516020611fff833981519152911691828552600681526112d260ff604087205416611dd1565b8285526005815260408520848652815260408520600160ff1982541617905560405160018152a380f35b61130590611e4f565b6108605784386112a7565b925090508482813d811161133b575b6113298183611e80565b8101031261055257869151903861126e565b503d61131f565b50346103b05760203660031901126103b05761135c611dbb565b6040516367ef9e2760e11b81526001600160a01b0391837f00000000000000000000000000000000000000000000000000000000000000008416602084600481845afa93841561039d578294611460575b50803b156103a85760405163101a2a3160e31b815260048101949094523360248501528190849060449082905afa92831561145357849361143a575b505016906113f8821515611f28565b600454826bffffffffffffffffffffffff60a01b821617600455167f4ab5be82436d353e61ca18726e984e561f5c1cc7c6d38b29d2553c790434705a8380a380f35b61144691929350611e4f565b61052357819083386113e9565b50604051903d90823e3d90fd5b915092506020813d821161148e575b8161147c60209383611e80565b810103126105525784905192386113ad565b3d915061146f565b50346103b0576020806003193601126103a8576114b1611dbb565b6040516367ef9e2760e11b81529091906001600160a01b039084907f000000000000000000000000000000000000000000000000000000000000000083168482600481845afa91821561055e5783926115e0575b50803b156105235760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d576115cc575b505082169161154e831515611f28565b3b15611597577f516d8f02c985d8f15895674201bff0b76f3acd517f848a6d0bc7e77d7b87d42d908284526006815260408420600160ff1982541617905560405160018152a280f35b6064906040519062461bcd60e51b82526004820152600e60248201526d139bdd08184818dbdb9d1c9858dd60921b6044820152fd5b6115d590611e4f565b610dd857833861153e565b925090508382813d811161160b575b6115f98183611e80565b81010312610552578591519038611505565b503d6115ef565b50346103b05760403660031901126103b05761162c611dbb565b6001600160a01b0390811680835260066020908152604084205460243593906116579060ff16611dd1565b61165f611ea2565b828552600782526040852084865282526040852090600382019160ff8354161561170357541633036116cd5790600080516020611fff83398151915291838652600582526040862085875282526040862060ff19908181541690558154169055604051858152a36001815580f35b60405162461bcd60e51b815260048101839052600e60248201526d2737ba103a34329039b2b63632b960911b6044820152606490fd5b60405162461bcd60e51b815260048101859052601060248201526f4e4654206e6f7420666f722073616c6560801b6044820152606490fd5b50346103b057806003193601126103b0576004546040516001600160a01b039091168152602090f35b50346103b057806003193601126103b057602060ff600154166040519015158152f35b50346103b05760203660031901126103b057606090600435905061271090816117b260025483611fcf565b049166038d7ea4c680008084106117fb575b5082916117e36117e8926117da60035484611fcf565b04938492611ec5565b611ec5565b9060405192835260208301526040820152f35b92506117e86117c4565b50346103b057806003193601126103b0576020600354604051908152f35b50346103b057806003193601126103b0576040516367ef9e2760e11b815281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa91821561055e578392611929575b50803b156119255760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d57611911575b505060015460ff8116156118ff5760ff19166001557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b604051638dfc202b60e01b8152600490fd5b61191a90611e4f565b6103b05780386118bd565b5050fd5b925090506020823d8211611957575b8161194560209383611e80565b81010312610552578291519038611884565b3d9150611938565b50346103b05760403660031901126103b05760a09060ff6040611980611dbb565b92600180861b038094168152600760205281812060243582526020522091825416916001810154906003600282015491015491604051948552602085015260408401528181161515606084015260081c1615156080820152f35b50346103b0576020806003193601126103a8576119f5611dbb565b6040516367ef9e2760e11b81526001600160a01b039084907f000000000000000000000000000000000000000000000000000000000000000083168582600481845afa91821561055e578392611ad6575b50803b156105235760405163101a2a3160e31b815260048101929092523360248301528290829060449082905afa801561039d57611ac2575b50507f516d8f02c985d8f15895674201bff0b76f3acd517f848a6d0bc7e77d7b87d42d911691828452600681526040842060ff198154169055604051848152a280f35b611acb90611e4f565b610dd8578338611a7f565b925090508482813d8111611b01575b611aef8183611e80565b81010312610552578591519038611a46565b503d611ae5565b50346103b057806003193601126103b057602060405166038d7ea4c680008152f35b50346103b05760203660031901126103b05760a0906040906001600160a01b03611b52611dbb565b168152600860205220805490600181015490600281015460046003830154920154926040519485526020850152604084015260608301526080820152f35b50346103b057806003193601126103b0576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346103b057806003193601126103b05760405163e63ab1e960e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908290602081600481865afa90811561039d578291611cd4575b50823b156103a85760405163101a2a3160e31b8152600481019190915233602482015291829060449082905afa801561039d57611cc5575b5060015460ff8116611cb35760019060ff1916176001557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b60405163d93c066560e01b8152600490fd5b611cce90611e4f565b38611c6f565b90506020813d8211611cfd575b81611cee60209383611e80565b810103126103a8575138611c37565b3d9150611ce1565b50346103b05760403660031901126103b05760a0906040611d24611dbb565b91611d2d611fa4565b50600180851b038093168152600760205281812060243582526020522060405191611d5783611e1d565b815416918281526001820154916020820192835260036002820154916040840192835201549260ff6080606085019482871615158652019460081c161515845260405194855251602085015251604084015251151560608301525115156080820152f35b600435906001600160a01b038216820361055257565b15611dd857565b60405162461bcd60e51b815260206004820152601b60248201527f4e465420636f6e7472616374206e6f7420617574686f72697a656400000000006044820152606490fd5b60a0810190811067ffffffffffffffff821117611e3957604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111611e3957604052565b610100810190811067ffffffffffffffff821117611e3957604052565b90601f8019910116810190811067ffffffffffffffff821117611e3957604052565b600260005414611eb3576002600055565b604051633ee5aeb560e01b8152600490fd5b91908203918211611ed257565b634e487b7160e01b600052601160045260246000fd5b3d15611f23573d9067ffffffffffffffff8211611e395760405191611f17601f8201601f191660200184611e80565b82523d6000602084013e565b606090565b15611f2f57565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b15611f6d57565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b60405190611fb182611e1d565b60006080838281528260208201528260408201528260608201520152565b81810292918115918404141715611ed257565b6000198114611ed25760010190565b91908201809211611ed25756fecaf430257d95f6a3fa7db65e0b0b191906b28d6cf1c91aba4806db25a153ee9fa2646970667358221220b7fccb61725edc4039d39ea8d915f37c201022a2bfcf995c9d40c9cb7a03679564736f6c63430008150033",
  "devdoc": {
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "authorizeNFTContract(address)": {
        "details": "Authorize NFT contract for trading",
        "params": {
          "nftContract": "Address of the NFT contract"
        }
      },
      "calculateTradeFees(uint256)": {
        "details": "Calculate trade fees for a given price",
        "params": {
          "price": "Trade price"
        },
        "returns": {
          "marketplaceFee": "Marketplace fee amount",
          "sellerProceeds": "Amount seller receives",
          "tradingFee": "Trading fee amount"
        }
      },
      "cancelNFTSale(address,uint256)": {
        "details": "Cancel NFT sale and unlock customization",
        "params": {
          "nftContract": "Address of the NFT contract",
          "tokenId": "Token ID to cancel sale for"
        }
      },
      "deauthorizeNFTContract(address)": {
        "details": "Deauthorize NFT contract for trading",
        "params": {
          "nftContract": "Address of the NFT contract"
        }
      },
      "emergencyWithdraw()": {
        "details": "Emergency withdraw all funds to treasury"
      },
      "executeNFTTrade(address,uint256)": {
        "details": "Execute NFT trade",
        "params": {
          "nftContract": "Address of the NFT contract",
          "tokenId": "Token ID to trade"
        }
      },
      "getSaleInfo(address,uint256)": {
        "details": "Get sale information for an NFT",
        "params": {
          "nftContract": "Address of the NFT contract",
          "tokenId": "Token ID"
        },
        "returns": {
          "sale": "Sale information"
        }
      },
      "getTradingStats(address)": {
        "details": "Get trading statistics for a user",
        "params": {
          "user": "User address"
        },
        "returns": {
          "stats": "Trading statistics"
        }
      },
      "isCustomizationLocked(address,uint256)": {
        "details": "Check if NFT customization is locked",
        "params": {
          "nftContract": "Address of the NFT contract",
          "tokenId": "Token ID to check"
        },
        "returns": {
          "locked": "True if customization is locked"
        }
      },
      "lockCustomization(address,uint256)": {
        "details": "Lock NFT customization (called by customization contract)",
        "params": {
          "nftContract": "Address of the NFT contract",
          "tokenId": "Token ID to lock"
        }
      },
      "pauseTrading()": {
        "details": "Emergency pause trading"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "prepareNFTForTrade(address,uint256,uint256,bool)": {
        "details": "Prepare NFT for trading with customization lock options",
        "params": {
          "allowCustomization": "Whether to allow customization during sale period",
          "nftContract": "Address of the NFT contract",
          "salePrice": "Price at which to list the NFT",
          "tokenId": "Token ID to prepare for trading"
        }
      },
      "unlockCustomization(address,uint256)": {
        "details": "Unlock NFT customization",
        "params": {
          "nftContract": "Address of the NFT contract",
          "tokenId": "Token ID to unlock"
        }
      },
      "unpauseTrading()": {
        "details": "Unpause trading"
      },
      "updateTradingFees(uint256,uint256)": {
        "details": "Update trading fees",
        "params": {
          "newMarketplaceFee": "New marketplace fee percentage (basis points)",
          "newTradingFee": "New trading fee percentage (basis points)"
        }
      },
      "updateTreasury(address)": {
        "details": "Update treasury address",
        "params": {
          "newTreasury": "New treasury address"
        }
      },
      "withdrawFees(address,uint256)": {
        "details": "Withdraw accumulated fees",
        "params": {
          "amount": "Amount to withdraw",
          "to": "Address to send fees to"
        }
      }
    },
    "stateVariables": {
      "MAX_TRADING_FEE": {
        "details": "Maximum trading fee percentage (10%)"
      },
      "accessControl": {
        "details": "Reference to the access control contract"
      },
      "activeSales": {
        "details": "Mapping to track active sales"
      },
      "authorizedNFTContracts": {
        "details": "Mapping to track authorized NFT contracts"
      },
      "customizationLocked": {
        "details": "Mapping to track NFT customization locks during trades"
      },
      "marketplaceFeePercentage": {
        "details": "Marketplace commission percentage (basis points)"
      },
      "minimumTradingFee": {
        "details": "Minimum trading fee in wei"
      },
      "tradingFeePercentage": {
        "details": "Trading fee percentage (basis points: 100 = 1%)"
      },
      "treasury": {
        "details": "Treasury address for collecting fees"
      },
      "userTradingStats": {
        "details": "Mapping to track trading statistics"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2387,
        "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2277,
        "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 15469,
        "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
        "label": "tradingFeePercentage",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 15473,
        "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
        "label": "marketplaceFeePercentage",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15484,
        "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
        "label": "treasury",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 15491,
        "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
        "label": "customizationLocked",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 15496,
        "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
        "label": "authorizedNFTContracts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15504,
        "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
        "label": "activeSales",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(SaleInfo)15521_storage))"
      },
      {
        "astId": 15510,
        "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
        "label": "userTradingStats",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(TradingStats)15532_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(SaleInfo)15521_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct MooveTradingManager.SaleInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(SaleInfo)15521_storage)"
      },
      "t_mapping(t_address,t_struct(TradingStats)15532_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MooveTradingManager.TradingStats)",
        "numberOfBytes": "32",
        "value": "t_struct(TradingStats)15532_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(SaleInfo)15521_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MooveTradingManager.SaleInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SaleInfo)15521_storage"
      },
      "t_struct(SaleInfo)15521_storage": {
        "encoding": "inplace",
        "label": "struct MooveTradingManager.SaleInfo",
        "members": [
          {
            "astId": 15512,
            "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15514,
            "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15516,
            "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
            "label": "listedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15518,
            "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
            "label": "isActive",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 15520,
            "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
            "label": "allowCustomization",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TradingStats)15532_storage": {
        "encoding": "inplace",
        "label": "struct MooveTradingManager.TradingStats",
        "members": [
          {
            "astId": 15523,
            "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
            "label": "totalSales",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15525,
            "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
            "label": "totalPurchases",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15527,
            "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
            "label": "volumeTraded",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15529,
            "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
            "label": "feesEarned",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15531,
            "contract": "contracts/MooveTradingManager.sol:MooveTradingManager",
            "label": "feesPaid",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}